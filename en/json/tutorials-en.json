{"info-01-introduction":{"tag":"info","src":"info-01-introduction.html","title":"Introduction of Webduino","banner":"info-01-01-new2.jpg","img":"info-01-01s-new.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Introduction of Webduino :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino is the combination of Web and Arduino. It proclaims a new era of Web-controlled Arduino has come. There are some similar techniques and solutions in the market, however, they all need C/C++ to connect Arduino and internet, or to write C/C++ onto Arduino through internet. There is barely found a method simply applied Web technique to control Arduino.\">\n\n<meta itemprop=\"description\" content=\"Webduino is the combination of Web and Arduino. It proclaims a new era of Web-controlled Arduino has come. There are some similar techniques and solutions in the market, however, they all need C/C++ to connect Arduino and internet, or to write C/C++ onto Arduino through internet. There is barely found a method simply applied Web technique to control Arduino.\">\n\n<meta property=\"og:description\" content=\"Webduino is the combination of Web and Arduino. It proclaims a new era of Web-controlled Arduino has come. There are some similar techniques and solutions in the market, however, they all need C/C++ to connect Arduino and internet, or to write C/C++ onto Arduino through internet. There is barely found a method simply applied Web technique to control Arduino.\">\n\n<meta property=\"og:title\" content=\"Introduction of Webduino\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-01-introduction.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-01-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-01-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<p>#Introduction of Webduino</p>\n<p>Webduino is the combination of Web and Arduino. It proclaims a new era of Web-controlled Arduino has come. There are some similar techniques and solutions in the market, however, they all need C/C++ to connect Arduino and internet, or to write C/C++ onto Arduino through internet. There is barely found a method simply applied Web technique to control Arduino.</p>\n<p><br/></p>\n<p>Webduino is different from traditional sensors which control Arduino with C or C++.  Webduino brings developers an easier way to connect Arduino by writing webpages (HTML / Javascript). It has lowered entry barriers into IoT so that developers&#39; creativity can works freely without restriction. Developers can apply and connect various sensors to create remarkable applications of Internet of Things.</p>\n<p>##Webduino vs Arduino</p>\n<table>\n<tr>\n<th></th>\n<th>Arduino</th>\n<th>Webduino</th>\n</tr>\n<tr>\n<th>Language</th>\n<td>C / C++</td>\n<td>HTML / JavaScript</td>\n</tr>\n<tr>\n<th>Environment</th>\n<td>Arduino IDE</td>\n<td>Browser / ...</td>\n</tr>\n<tr>\n<th>Connection</th>\n<td>USB</td>\n<td>WiFi</td>\n</tr>\n<tr>\n<th>Update</th>\n<td>link</td>\n<td>realtime</td>\n</tr>\n</table>\n\n<p>##What is Webduino Development Kit?</p>\n<p>The Webduino Development Kit is an easy-to-use and easy-to-learn IoT development kit. Tackling Webduino, whether you are a beginner, an advanced developer, or a senior researcher can let you control the Arduino-compatible components. It&#39;s clearly indicated on the below diagram so that any front-end RD engineer can immediately configure the LED arrays via HTML and JavaScript.</p>\n<p><br/></p>\n<p><img src=\"../../img/tutorials/info-02-02-new.jpg\" alt=\"What is Webduino Development Kit?\"></p>\n<p>##Webduino&#39;s Development Trend in the market of the &quot;Internet of Things&quot;.</p>\n<p>The future market for the IoT provides an amazing opportunity for the IT industry. Webduino was created based on the concept that many users are from diverse backgrounds and only a simple, cross-platform development module will satisfy them. Consequently, Webduino will become a must have tool for all HTML and JavaScript front-end developers.</p>\n<!-- @@close-->\n"},"info-02-setup":{"tag":"info","src":"info-02-setup.html","title":"Webduino Initialization Setup","banner":"info-02-01.jpg","img":"info-02-01s.jpg","date":20150420,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Board Wi-Fi Setup :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"The most important thing before you begin using the Webduino is setting up the Wi-Fi. The purpose of the setup is to make the Webduino Development Kit connect to the internet automatically. It's the same thing we do for a new mobile phone, the phone needs to be set-up to browse the internet via Wi-Fi.\">\n\n<meta itemprop=\"description\" content=\"The most important thing before you begin using the Webduino is setting up the Wi-Fi. The purpose of the setup is to make the Webduino Development Kit connect to the internet automatically. It's the same thing we do for a new mobile phone, the phone needs to be set-up to browse the internet via Wi-Fi.\">\n\n<meta property=\"og:description\" content=\"The most important thing before you begin using the Webduino is setting up the Wi-Fi. The purpose of the setup is to make the Webduino Development Kit connect to the internet automatically. It's the same thing we do for a new mobile phone, the phone needs to be set-up to browse the internet via Wi-Fi.\">\n\n<meta property=\"og:title\" content=\"Webduino Board Wi-Fi Setup\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-02-setup.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-02-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-02-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<p>#Webduino Board Wi-Fi Setup</p>\n<p>The most important thing before you begin using the Webduino is setting up the Wi-Fi. The purpose of the setup is to make the Webduino Development Kit connect to the internet automatically. It&#39;s the same thing we do for a new mobile phone, the phone needs to be set-up to browse the internet via Wi-Fi. </p>\n<p>##Webduino Board Wi-Fi Setup Step by Step</p>\n<ul>\n<li><p>###1. Start Setup</p>\n<p>  Move the switch on the Webduino development board to the STA position, turn the power on and start the setup.</p>\n<p>  <img src=\"../../img/tutorials/en/info-02-09.jpg\" alt=\"Webduino - Start Initialization\"></p>\n</li>\n<li><p>###2. Search Webduino Development Kit</p>\n<p>  Using the Wi-Fi on your computer or portable device search for the Webduino Development Kit&#39;s SSID and key in the password (the default is 12345678). The SSID of the Webduino Development Kit will start with &quot;wa…&quot;&quot; (such as wa101). Then, your computer or portable device will be able to connect to the Webduino.</p>\n<p>  <img src=\"../../img/tutorials/en/info-02-04.jpg\" alt=\"Webduino -  Search Webduino Development Kit\"></p>\n</li>\n<li><p>###3. Connect and Set Up the Webduino Development Kit </p>\n<p>  Use Chrome or Safari internet browsers to type in the web address <a href=\"http://192.168.4.1\">http://192.168.4.1</a>. There you will see the configuration page for the Webduino Development Kit. Type in the SSID and PASSWORD of your Wi-Fi router or portable device (the SSID for the Wi-Fi router has a max length of 14 alphanumeric characters)</p>\n<p>  <img src=\"../../img/tutorials/info-02-07.jpg\" alt=\"Webduino - Connect and Set Up the Webduino Development Kit\"></p>\n</li>\n</ul>\n<ul>\n<li><p>###4. Reboot the Webduino Development Kit</p>\n<p>  After you type in your router SSID and PASSWORD, press &quot;submit&quot;. When &quot;OK&quot; shows on the screen, the Webduino is configured and can be connected to your Wi-Fi router or portable device. Remove the power from the Webduino and move the switch to the AP pattern. Then reconnect power and reboot the Webduino. If no &quot;OK&quot; shows, remove the power and repeat the setup again from Step 2.  </p>\n<p>  <img src=\"../../img/tutorials/en/info-02-10.jpg\" alt=\"Webduino - Reboot the Webduino Development Kit\"></p>\n</li>\n<li><p>###5. Confirm the Connection </p>\n<p>  Once you reboot the Webduino Development Kit and your screen shows &quot;OK&quot;, switch your computer or portable device to your regular internet connection. Go to the page <a href=\"https://webduino.io/device.html\">https://webduino.io/device.html</a> and type in the name of your Webduino to check the connection. If the connection is successful, it will show &quot;OK&quot;.  <strong>If &quot;OK&quot; shows, you can start working with the Webduino</strong>. If no &quot;OK&quot; shows, you need to reboot the Webduino Development Kit again or restart the setup from Step 2.</p>\n<p>  <img src=\"../../img/tutorials/info-02-06.jpg\" alt=\"Webduino - Confirm the Connection\"></p>\n<p>  Another way to know if your <strong>connection is successful</strong> is the red LED on the Webduino will <strong>not be lit up</strong>. However, if the LED is blinking, the connection has failed. Reboot the Webduino and/or start the setup again from Step 2.</p>\n<p>  <img src=\"../../img/tutorials/en/info-02-11.jpg\" alt=\"Webduino - Confirm the Connection\"></p>\n</li>\n</ul>\n<ul>\n<li><p>###6. Connect the Webduino Development Kit to Wi-Fi Router</p>\n<p>  Webduino can now connect to a shared Wi-Fi router or to a portable device. It will also connect to cloud servers automatically. Now, let&#39;s try to control the Webduino via Wi-Fi. (Let&#39;s try our <a href=\"tutorial-01-led.html\">First Tutorial</a>)</p>\n<p>  <img src=\"../../img/tutorials/info-02-05-new.jpg\" alt=\"Webduino - Connect the Webduino Development Kit to Wi-Fi Router\">    </p>\n</li>\n</ul>\n<!-- @@close-->"},"info-03-faq":{"tag":"info","src":"info-03-faq.html","title":"Webduino Support Q&A","banner":"info-03-01.jpg","img":"info-03-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Support Q&amp;A :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"You might face some problems while using Webduino, so here are answers to some of the most common questions. You can also leave a comment below or send us an email.\">\n\n<meta itemprop=\"description\" content=\"You might face some problems while using Webduino, so here are answers to some of the most common questions. You can also leave a comment below or send us an email.\">\n\n<meta property=\"og:description\" content=\"You might face some problems while using Webduino, so here are answers to some of the most common questions. You can also leave a comment below or send us an email.\">\n\n<meta property=\"og:title\" content=\"Webduino Support Q&A\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-03-faq.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-03-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-03-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<p>#Support Q&amp;A</p>\n<p>You might face some problems while using Webduino, so here are answers to some of the most common questions. You can also leave a comment below or send us an <a href=\"mailto:service@webduino.io\">email</a> .</p>\n<p><br/></p>\n<p>##About Webduino</p>\n<ul>\n<li><p>###1. What is the difference between Webduino and the Webduino Development Board?</p>\n<blockquote>\n<p>Webduino is the name of our service, it means Web + Arduino. When speaking about the Webduino Development Board, we refer to the name of the development board, e.g., Webduino Mark 1, Webduino Fly, and Webduino Smart.</p>\n</blockquote>\n</li>\n<li><p>###2. What are the difference between the Webduino Mark 1 and the Webduino Fly?</p>\n<blockquote>\n<p>The Webduino Mark 1 is a combination of the Arduino Pro mini plus a Wi-Fi module, <strong>that can function independently</strong>. However, the Webduino Fly itself is a Wi-Fi extension board, <strong>which works along with the Arduino UNO</strong>. For convenience, we call the Webduino Fly + Arduino UNO board the &quot;Webduino Fly (Extended)&quot; or just &quot;Fly&quot;. Additionally, the Fly is equiped with the more pins than the Mark 1.</p>\n</blockquote>\n</li>\n<li><p>###3. What programming language is adopted in Webduino?</p>\n<blockquote>\n<p>Only JavaScript! You only need to use JavaScript. You can run the codes in both front-end (browser side) and back-end (NodeJS).</p>\n</blockquote>\n</li>\n<li><p>###4. Is it still necessary to burn Arduino firmware?</p>\n<blockquote>\n<p>Since the Webduino Fly is based on the Arduino UNO, it is <strong>necessary</strong> to follow  Firmata Protocol to burn firmware to your Webduino Fly (In the tutorial <a href=\"info-07-arduino-ino.html\">Arduino Firmware Download / Burn</a>, we give you detailed instructions on how to do this). However, it is not necessary to burn the firmware to the Webduino Mark 1 because the default firmware has already been implemented.</p>\n</blockquote>\n</li>\n<li><p>###5. Can Webduino run while my browser is closed?</p>\n<blockquote>\n<p>No. If you wish to control your development boards or devices via Webduino Blockly, you have to keep the browser open. <strong>The operation will only run constantly if you call a Node.js backend function with JavaScript.</strong></p>\n</blockquote>\n</li>\n<li><p>###6. What are the benefits of using Webduino?</p>\n<blockquote>\n<ul>\n<li>(1) Painless Learning: Webduino uses JavaScript, which is much easier to use than C/C++.</li>\n<li>(2) Web browser convetibility: You can convert the website into a mobile application, so you can operate seamlessly across platforms.</li>\n<li>(3) Idea realization: You can easily make a prototype by using Webduino, which speeds up your development.</li>\n<li>(4) Integration with other services: Webduino can be smoothly integrated with other web-based services, e.g., Youtube, Weather Forecast, Stocks, Currency Exchange Rate...etc.</li>\n<li>(5) Remote Control:  Webduino is a web-based service, so it can be operated whenever and wherever web browsers are accessible.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><br/></p>\n<p>##Purchase Webduino</p>\n<ul>\n<li><p>###1. Where can buy Webduino?</p>\n<blockquote>\n<ul>\n<li>(1) Sign up for our Webduino courses! We offer a Webduino Development Kit for each participant.</li>\n<li>(2) If you are in Taiwan, you can find all of our products on Ruten. <a href=\"https://webduino.io/buy.html\">https://webduino.io/buy.html</a> </li>\n<li>(3) We are also about to launch our products overseas! This is great news for everyone outside of the Taiwan!</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###2. Webduino Education Program</p>\n<blockquote>\n<p>We offer an Education Program to companies, schools, and institutions interested in the IOT. This program is customized to your needs and interests. We offerteaching materials and equipment, instruction support, and rich content to make all  learning experience enjoyable. For any enquiries, please email us at <a href=\"mailto:service@webduino.io\">service@webduino.io</a>.</p>\n</blockquote>\n</li>\n</ul>\n<p><br/></p>\n<p>##Wi-Fi Setup of Webduino developmet board </p>\n<ul>\n<li><p>###1. Why is the setup of the development board necessary?</p>\n<blockquote>\n<p>All of the Webduino development boards are controlled by Wi-Fi connections, so they can not function without Wi-Fi configuration.</p>\n</blockquote>\n</li>\n<li><p>###2. Security certification</p>\n<blockquote>\n<p>Webduino development boards only work with WPA/WPA2, which requires a SSID and Password to log in. Other types of networks, like networks with &quot;Captive Portal&quot; security, enterprise networks, etc. are not supported.</p>\n</blockquote>\n</li>\n<li><p>###3. Why there are two SSIDs?</p>\n<blockquote>\n<ul>\n<li>(1) <strong>The SSID of the Webduino is the serial number written on the manual.</strong> It normally starts with &quot;wa&quot;. E.g., wa101, wa999, etc. On the other hand, the SSID of the Wi-Fi is the unique name of your network. Therefore, you have to pay attention to which is which and not confuse them.</li>\n<li>(2) For the detailed instructions, please check the tutorials: <a href=\"info-02-setup.html\">Webduino Board Wi-Fi Setup</a> and <a href=\"info-04-uno-setup.html\">Webduino Fly Wi-Fi Setup</a></li>\n</ul>\n</blockquote>\n</li>\n<li><p>###4. Why does the SSID of my development board not appear in the Wi-Fi list?</p>\n<blockquote>\n<ul>\n<li>(1) Your development board might be in AP mode, please switch it to the STA mode and check the list again. For detailed instructions, please check the tutorials: <a href=\"info-02-setup.html\">Webduino Board Wi-Fi Setup</a> and <a href=\"info-04-uno-setup.html\">Webduino Fly Wi-Fi Setup</a></li>\n<li>(2) Another possibilty could be that the battery is running out of power. In this case, please change the battery or apply power through the USB port.</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###5. The SSID of the development board shows up on the Wi-Fi list, but my device still fails to connect to the development board.</p>\n<blockquote>\n<p>Webduino development boards are not recognized as access points on some Android devices and Windows PCs, so the connections will not work. Follow these steps to fix the issue:</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>(1) Step 1: On your computer, <strong>forget</strong> the setting of your networks</li>\n<li>(2) Step 2: Also <strong>forget</strong> the settings of your Webduino board</li>\n<li>(3) Step 3: Search Webduino board on your network list again</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###6. Why does the SSID of the development board not come up on the page: &quot;device.html&quot; after the Wi-Fi is set up?</p>\n<blockquote>\n<ul>\n<li>(1) You might have typed in the incorrect SSID and Password of your Wi-Fi.</li>\n<li>(2) The SSID and Password of the Wi-Fi should <strong>not include special characters or exceed 14 characters</strong>.</li>\n<li>(3) Webduino does not support a 5G Wi-Fi connection, please use networks that are 4G and lower.</li>\n<li>(4) A firewall might be blocking port 1883. If so, please unblock port 1883.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><br/></p>\n<p>##About the Practice of Webduino </p>\n<ul>\n<li><p>###1. The Webduino development board is connected to Wi-Fi, but there is no response from the board.</p>\n<blockquote>\n<ul>\n<li>(1) Please check the I/O pins, they might be mis-connected.</li>\n<li>(2) Please check the console, there might be errors.</li>\n<li>(3) <strong>Please burn the correct firmware</strong>, check the tutorial: <a href=\"info-07-arduino-ino.html\">Arduino Firmware Download / Burn</a>。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###2. Can the Webduino developmet board be controlled by bluetooth or serial port?</p>\n<blockquote>\n<p>Yes! You can choose &quot;Wi-Fi&quot;, &quot;Bluetooth&quot;, or &quot;Serial Port&quot; on the Board block in Webduino Blockly. You just need to install 1 app and 1 extension on Google Chrome. Check the tutorial: <a href=\"info-05-chrome-api-proxy.html\">Chrome API Proxy Installation Guide</a></p>\n</blockquote>\n</li>\n</ul>\n<p><br/></p>\n<p>##About Webduino Service</p>\n<ul>\n<li><p>###1. Is it possible to invite the Webduino development team for lectures or training?</p>\n<blockquote>\n<p>Of course! We have organized over one hundred lectures and workshops all around Taiwan. For any enquiries, please contact us at service <a href=\"mailto:service@webduino.io\">service@webduino.io</a></p>\n</blockquote>\n</li>\n<li><p>###2. Where to search for answers?</p>\n<blockquote>\n<ul>\n<li>(1) Post your questions on the <a href=\"https://www.facebook.com/webduino/\">Webduino Facebook Page</a> </li>\n<li>(2) Email to us at <a href=\"mailto:service@webduino.io\">service@webduino.io</a> </li>\n<li>(3) Contact us via phone at +886-7-3388511</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###3. Are all the codes open source?</p>\n<blockquote>\n<p>Webduino has a comprehensive open source plan that is currently implemented in three phases. <strong>The first phase is to open the front-end code and put it on Github.</strong> The second phase is to open the back-end code, and last the third phase, is to open the firmware code of the development board. We are  on stage 1 and working toward stage 2. All of our open source codes are on the Github repo. (<a href=\"https://github.com/webduinoio\">https://github.com/webduinoio</a>)</p>\n</blockquote>\n</li>\n<li><p>###4. Is it possible to purchase the private cloud from Webduino?</p>\n<blockquote>\n<p>Yes. For any enquiry, please email us at <a href=\"mailto:service@webduino.io\">service@webduino.io</a></p>\n</blockquote>\n</li>\n<li><p>###5. Are there more Project Examples for other sensors and components in the future?</p>\n<blockquote>\n<ul>\n<li>(1) We are always working on new tutorials for you! Please follow our Facebook Page and Official Website for updates.</li>\n<li>(2) Check our Source Code on Github. Or develop your own WebComponent at <a href=\"https://github.com/webduinoio\">https://github.com/webduinoio</a> </li>\n<li>(3) Post your requests on our <a href=\"https://www.facebook.com/webduino/\">Facebook Page</a></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<!-- @@close-->"},"info-04-uno-setup":{"tag":"info","src":"info-04-uno-setup.html","title":"Webduino Fly Initialization Setup","banner":"info-04-01.jpg","img":"info-04-01s.jpg","date":20160918,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Fly Wi-Fi Setup :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Before you start using your Webduino Fly, the most critical step is setting up and configuring the Wi-Fi. The Webduino Fly is an extension board for the Arduino UNO, which equips your UNO with Wi-Fi, facilitating the complete functions of the Webduino technology. The configuration has the same logic as mobile wireless settings and each device requires a Wi-Fi setup process before connecting to the Internet.\">\n\n<meta itemprop=\"description\" content=\"Before you start using your Webduino Fly, the most critical step is setting up and configuring the Wi-Fi. The Webduino Fly is an extension board for the Arduino UNO, which equips your UNO with Wi-Fi, facilitating the complete functions of the Webduino technology. The configuration has the same logic as mobile wireless settings and each device requires a Wi-Fi setup process before connecting to the Internet.\">\n\n<meta property=\"og:description\" content=\"Before you start using your Webduino Fly, the most critical step is setting up and configuring the Wi-Fi. The Webduino Fly is an extension board for the Arduino UNO, which equips your UNO with Wi-Fi, facilitating the complete functions of the Webduino technology. The configuration has the same logic as mobile wireless settings and each device requires a Wi-Fi setup process before connecting to the Internet.\">\n\n<meta property=\"og:title\" content=\"Webduino Fly Wi-Fi Setup\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-04-uno-setup.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-04-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-04-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-fly-wi-fi-setup\">Webduino Fly Wi-Fi Setup</h1>\n<p>Before you start using your Webduino Fly, the most critical step is setting up and configuring the Wi-Fi. The Webduino Fly is an extension board for the Arduino UNO, which equips your UNO with Wi-Fi, facilitating the complete functions of the Webduino technology. The configuration has the same logic as mobile wireless settings and each device requires a Wi-Fi setup process before connecting to the Internet.</p>\n<h2 id=\"webduino-fly-wi-fi-setup-step-by-step-\">Webduino Fly Wi-Fi Setup Step by step </h2>\n<ul>\n<li><h3 id=\"1-assemble-the-two-boards-webduino-fly-and-arduino-uno\">1. Assemble the two boards, &quot;Webduino Fly&quot; and &quot;Arduino UNO&quot;</h3>\n<p>  Connect your &quot;Webduino Fly&quot; and &quot;Arduino UNO&quot; to create the &quot;Webduino Fly (Extended)&quot;.</p>\n<p>  <img src=\"../../img/tutorials/en/info-04-02.jpg\" alt=\"Webduino Fly Initialization Setup\"></p>\n<p>  <img src=\"../../img/tutorials/info-04-03.jpg\" alt=\"Webduino Fly Initialization Setup\"></p>\n</li>\n<li><h3 id=\"2-wi-fi-setup\">2. Wi-Fi Setup</h3>\n<p>   On the &quot;Webduino Fly&quot; board, move the switch to STA mode. Then, plug in the board into a power source.</p>\n<p>  <img src=\"../../img/tutorials/info-04-04.jpg\" alt=\"Webduino Fly Initialization Setup\"></p>\n</li>\n<li><h3 id=\"3-connect-your-computer-to-the-board\">3. Connect your computer to the board</h3>\n<p>  Search for the SSID of the Webduino Fly on the list of available networks with your Wi-Fi capable computer or device. The default SSID is wa101. After typing in the password (the default is 12345678), your computer or mobile device will connect to the Webduino Fly. </p>\n<p>  <img src=\"../../img/tutorials/en/info-04-05.jpg\" alt=\"Webduino Fly Initialization Setup\"></p>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"4-fill-in-the-wi-fi-information\">4. Fill in the Wi-Fi information</h3>\n<p>  Open &quot;<b><a href=\"http://192.168.4.1\">http://192.168.4.1</a></b>&quot; on your web browser. Type in your Wi-Fi network SSID and PASSWORD. (Note that, the SSID and PASSWORD here is referring to your AP&#39;s, <strong>not the Webduino Fly&#39;s</strong>. (The SSID and PASSWORD must only contain alphanumeric characters, with a maximum of 14 characters for each.)</p>\n<p>  <img src=\"../../img/tutorials/info-04-06.jpg\" alt=\"Webduino Fly Initialization Setup\"></p>\n</li>\n<li><h3 id=\"5-reboot-the-webduino-fly-board\">5. Reboot the Webduino Fly Board</h3>\n<p>  After you type in your Wi-Fi&#39;s SSID and PASSWORD, press &quot;submit&quot;. The Webduino will initialize and if an &quot;OK&quot; shows on screen it can be connected to Wi-Fi (If no &quot;OK&quot; shows on the screen, please go back to Step 2 and start the setup process over).</p>\n<p>  <img src=\"../../img/tutorials/info-04-07.jpg\" alt=\"Webduino - Reboot Webduino board\"></p>\n<p>  When the &quot;OK&quot; shows on the screen, <strong>remove the power on the Webduino Fly board and move the switch to AP</strong>. Then connect the power and restart the Webduino Fly.</p>\n<p>  <img src=\"../../img/tutorials/info-04-08.jpg\" alt=\"Webduino - Reboot Webduino board\"></p>\n</li>\n<li><h3 id=\"6-confirm-the-connection\">6. Confirm the connection</h3>\n<p>  Once you reboot the Webduino Fly use the Internet connection on your computer or mobile device to open the webpage <a href=\"https://webduino.io/device.html\">https://webduino.io/device.html</a>. Then type in the SSID you used to name your Webduino Fly to check the connection. <strong>If you see an &quot;OK&quot; on the screen, you can start using your Webduino Fly.</strong> If there is no response from the Webduino board, you need to reboot the Webduino Fly. If there is still no connection restart the setup starting from step 2.</p>\n<p>  <img src=\"../../img/tutorials/info-04-09.jpg\" alt=\"Webduino - Confirm the connection\"></p>\n<p>  <strong>The LED light will be off when the connection is successful.</strong> However, the LED will  blink when the connection is unsuccessful. If this is the case, please reboot the Webduino board. If there is still no connection restart the setup starting from step 2.</p>\n<p>  <img src=\"../../img/tutorials/info-04-10.jpg\" alt=\"Webduino - Confirm the connection\"></p>\n</li>\n<li><h3 id=\"7-connect-the-webduino-board-to-wi-fi\">7. Connect the Webduino Board to Wi-Fi</h3>\n<p>  Now the Webduino Fly can connect to Wi-Fi and cloud servers automatically. (Check our First Tutorial: <a href=\"tutorial-01-led.html\">Control single LED light</a> )</p>\n</li>\n<li><h3 id=\"8-notice-about-firmata\">8. Notice about Firmata</h3>\n<p>  The Webduino Fly follows the Arduino Firmata protocol, meaning that the Arduino itself <strong>has to burn the Firmata firmware</strong>. We recommend you to check on Arduino IDE to make sure you have the standard Firmata. (Arduino IDE &gt; File &gt;Examples &gt; Firmata&gt;StandardFirmata)</p>\n<p>  <img src=\"../../img/tutorials/en/info-05-08.jpg\" alt=\"Webduino Fly Initialization Setup\"></p>\n</li>\n</ul>\n<h2 id=\"compiling-errors-for-the-arduino-ide-1-6-7\">Compiling Errors for the Arduino IDE 1.6.7</h2>\n<p>Some users have met compiling errors when using Arduino IDE 1.6.7 because of incompatibilities between Firmata versions 2.4.4 and 2.5.1. If you have these versions, you can reinstall the older versions 1.6.6 or 1.6.5, (Download it here: <a href=\"https://www.arduino.cc/en/Main/OldSoftwareReleases#previous\">https://www.arduino.cc/en/Main/OldSoftwareReleases#previous</a> ) or <strong>reinstall Firmata 2.4.4 or 2.4.3 though the following steps</strong>.</p>\n<p>Step 1: Open Library Manager (Sketch&gt;Include Library&gt;Manage Libraries)</p>\n<p><img src=\"../../img/tutorials/en/info-07-10.jpg\" alt=\"Webduino UNO Extension Board Initialization Setup\"></p>\n<p>Step 2: Search for &quot;Firmata&quot;, check if your version is 2.5.1.</p>\n<p><img src=\"../../img/tutorials/info-07-12.jpg\" alt=\"Webduino UNO Extension Board Initialization Setup\"></p>\n<p>Step 3: Choose Firmata version 2.4.4 or 2.4.3, and then press &quot;Install&quot;. Now you can reinstall the older version, and begin burning firmwares!</p>\n<p><img src=\"../../img/tutorials/info-07-13.jpg\" alt=\"Webduino UNO Extension Board Initialization Setup\"></p>\n<!-- @@close-->"},"info-05-chrome-api-proxy":{"tag":"info","src":"info-05-chrome-api-proxy.html","title":"Chrome API Proxy Installation Guide","banner":"info-05-01.jpg","img":"info-05-01s.jpg","date":20151124,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Chrome API Proxy Installation Guide :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Wi-Fi is not the only connection that can control your Arduino UNO. If you install the Chrome API Proxy released by Webduino, you can control many components and sensors and enjoy the convenience of using Webduino through a serial port or a Bluetooth connection.\">\n\n<meta itemprop=\"description\" content=\"Wi-Fi is not the only connection that can control your Arduino UNO. If you install the Chrome API Proxy released by Webduino, you can control many components and sensors and enjoy the convenience of using Webduino through a serial port or a Bluetooth connection.\">\n\n<meta property=\"og:description\" content=\"Wi-Fi is not the only connection that can control your Arduino UNO. If you install the Chrome API Proxy released by Webduino, you can control many components and sensors and enjoy the convenience of using Webduino through a serial port or a Bluetooth connection.\">\n\n<meta property=\"og:title\" content=\"Chrome API Proxy Installation Guide\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-05-chrome-api-proxy.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-05-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-05-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"chrome-api-proxy-installation-guide\">Chrome API Proxy Installation Guide</h1>\n<p>Wi-Fi is not the only connection that can control your Arduino UNO. If you install the Chrome API Proxy released by Webduino, you can control many components and sensors and enjoy the convenience of using Webduino through a serial port or a Bluetooth connection.</p>\n<h2 id=\"install\">Install</h2>\n<p>First, combine the Webduino Fly with the Arduino UNO.</p>\n<p><br/></p>\n<p><img src=\"../../img/tutorials/en/info-05-02.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<p>Click &quot;Applications&quot; on your Google Chrome, and then search for &quot;API Proxy&quot; in the Chrome Web Store. Then you have to install &quot;API Proxy for Google Chrome&quot; and &quot;API  Proxy Agent for Google Chrome&quot;.</p>\n<p><br/></p>\n<p><img src=\"../../img/tutorials/en/info-05-03.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<h2 id=\"enable-the-applications\">Enable the Applications</h2>\n<p>After they are both installed, you can check the extensions through the link: ( chrome://extensions/ ) Make sure you enable both of them.</p>\n<p><br/></p>\n<p><img src=\"../../img/tutorials/en/info-05-04.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<p>Back in &quot;Applications&quot; in Chrome, you will find an app named &quot;API Proxy for Google Chrome&quot;. A popup window will show up once you click it. </p>\n<p><br/></p>\n<p><img src=\"../../img/tutorials/info-05-05.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<h2 id=\"how-to-use\">How to Use</h2>\n<p>If you are using a serial port, you will see the &quot;Path&quot; on the pop-up window. (In Windows, it usually includes &quot;COM&quot; in the path. And on a MAC, it usually includes &quot;/dev&quot;.) If you are using Bluetooth, you have to pair your board with the computer, so you will see the Bluetooth address after you succeed in pairing your devices.</p>\n<p><br/></p>\n<p><img src=\"../../img/tutorials/info-05-06.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<p>Lastly, if you are using a serial port, remember to choose &quot;Serial port&quot; or &quot;Bluetooth&quot; when using <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly</a>.</p>\n<p><br/></p>\n<p><img src=\"../../img/tutorials/en/info-05-07.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<p>Now, every time your press the &quot;Run Blocks&quot; button, the board will be re-connected. (The board will be re-connected when LED stops flashing.) Now, you can use your board with a serial port or through a Bluetooth connection!!</p>\n<p><br/></p>\n<h2 id=\"burn-firmware\">Burn Firmware</h2>\n<p>All Webduino boards follow the Arduino Firmata protocol, so you will have to burn the standard firmware on them. We suggest you to burn the firmware on Arduino IDE. (Go to Arduino IDE &gt; Examples &gt; Firmata &gt; StandardFirmata)</p>\n<p><br/></p>\n<p><img src=\"../../img/tutorials/en/info-05-08.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<h2 id=\"notice\">Notice</h2>\n<ul>\n<li>If you are not able to use the board, please restart Chrome and the API Proxy Application.</li>\n<li>Make sure you also restart the Arduino IDE.</li>\n</ul>\n<h2 id=\"compiling-errors-for-the-arduino-ide-1-6-7\">Compiling Errors for the Arduino IDE 1.6.7</h2>\n<p>Some users have met compiling errors when using Arduino IDE 1.6.7 because of incompatibilities between Firmata versions 2.4.4 and 2.5.1. If you have these versions, you can reinstall the older versions 1.6.6 or 1.6.5, \nDownload it here: <a href=\"https://www.arduino.cc/en/Main/OldSoftwareReleases#previous\">https://www.arduino.cc/en/Main/OldSoftwareReleases#previous</a> or <strong>reinstall Firmata 2.4.4 or 2.4.3 though the following steps</strong>.</p>\n<p>Step 1: Open Library Manager (Sketch &gt; Include Library &gt; Manage Libraries)</p>\n<p><img src=\"../../img/tutorials/en/info-07-10.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>Step 2: Search for &quot;Firmata&quot;, check if your version is 2.5.1.</p>\n<p><img src=\"../../img/tutorials/info-07-12.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>Step 3: Choose Firmata version <strong>2.4.4 or 2.4.3</strong>, and then press &quot;Install&quot;. Now you can reinstall the older version, and begin burning firmwares!</p>\n<p><img src=\"../../img/tutorials/info-07-13.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<!-- @@close-->"},"info-07-arduino-ino":{"tag":"info","src":"info-07-arduino-ino.html","title":"Arduino Firmware Download / Burn","banner":"info-07-01.jpg","img":"info-07-01s.jpg","date":20151210,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Arduino Firmware Download / Burn :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"In this tutorial, you will learn how to burn firmware on your development boards. All Webduino boards follow the Arduino Firmata protocol, so you will have to burn the standard firmware on them. We will also introduce you to the Webduino firmware that provides control for all sensors and components.You can download it from our Github repository. \">\n\n<meta itemprop=\"description\" content=\"In this tutorial, you will learn how to burn firmware on your development boards. All Webduino boards follow the Arduino Firmata protocol, so you will have to burn the standard firmware on them. We will also introduce you to the Webduino firmware that provides control for all sensors and components.You can download it from our Github repository. \">\n\n<meta property=\"og:description\" content=\"In this tutorial, you will learn how to burn firmware on your development boards. All Webduino boards follow the Arduino Firmata protocol, so you will have to burn the standard firmware on them. We will also introduce you to the Webduino firmware that provides control for all sensors and components.You can download it from our Github repository. \">\n\n<meta property=\"og:title\" content=\"Arduino Firmware Download / Burn\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-07-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-07-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"arduino-firmware-download-burn\">Arduino Firmware Download / Burn</h1>\n<p>In this tutorial, you will learn how to burn firmware on your development boards. <strong>All Webduino boards follow the Arduino Firmata protocol, so you will have to burn the standard firmware on them.</strong> We will also introduce you to the Webduino firmware that provides control for all sensors and components.You can download it from our Github repository.</p>\n<p>If you are interested in Webduino Fly Wi-Fi extension, serial port, or Bluetooth, please check out the tutorials as follow.</p>\n<p>(1) <a href=\"info-04-uno-setup.html\">Webduino Fly Wi-Fi Setup</a><br>(2) <a href=\"info-05-chrome-api-proxy.html\">Chrome API Proxy Installation Guide</a></p>\n<h2 id=\"notice\">Notice</h2>\n<p>If your Webduino Wi-Fi extension is combined with Arduino UNO while burning firmware, <strong>please make sure your Webduino Fly is in STA mode</strong>. You will only need to burn the firmware on the Arduno board. Therefore, you can burn the firmware directly to your Arduino UNO through a USB cable connection.</p>\n<p><img src=\"../../img/tutorials/info-04-04.jpg\" alt=\"Webduino Fly 初始化設定\"></p>\n<h2 id=\"downlod-firmware\">Downlod firmware</h2>\n<p>We uploaded the firmware and the libraries onto our Github repositary, so you can either clone or fork this project. For those who are not familiar with Gtihub, you can click on &quot;Clone or download&quot; and then choose &quot;Download Zip&quot; on the Github page. See the following links;</p>\n<p>Github: <a href=\"https://github.com/webduinoio/wafirmata\">https://github.com/webduinoio/wafirmata</a><br>Download: <a href=\"https://github.com/webduinoio/wafirmata/archive/master.zip\">https://github.com/webduinoio/wafirmata/archive/master.zip</a></p>\n<p><img src=\"../../img/tutorials/en/info-07-02.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>You will see the firmware and the libraries after decompressing the .ZIP file.</p>\n<p><img src=\"../../img/tutorials/info-07-03.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<h2 id=\"include-library\">Include Library</h2>\n<p>If you need more libraries than the Arduino provides, you will have to add external libraries. First, use Arduino IDE for burning firmware, please make sure you install IDE from the <a href=\"https://www.arduino.cc/\">Arduino official website</a>. Then, open Arduino IDE, choose &quot;Sketch&quot; from top menu, and then click <strong>Add .ZIP Library</strong> under &quot;Include Library&quot;.</p>\n<p><img src=\"../../img/tutorials/en/info-07-04.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>Include the .ZIP files from the folder &quot;Library&quot;, which you just decompressed.</p>\n<p><img src=\"../../img/tutorials/info-07-05.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>Check if the following .ZIP files are inclued;</p>\n<p>(1) DHT.zip: DHT Sensor\n(2) Joypad.zip: Joystick\n(3) MaxMatrix.zip: LED Matrix\n(4) MFRC522.zip: RFID\n(5) IRremote.zip: IR Sender / Receiver\n(6) G3.zip: PM 2.5 Sensor\n(7) wa_GY291.zip: Triple Axis Accelerometer </p>\n<h2 id=\"burn-firmware\">Burn Firmware</h2>\n<p>Now we can open the .INO file to burn the firmware. Double click the .INO file and a popup window with &quot;The file...needs to be inside a sketch folder...&quot;&quot; will appear, then click on &quot;OK&quot;.</p>\n<p><img src=\"../../img/tutorials/en/info-07-06.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>Once you finished the last step, please connect your Arduino board to your PC with a USB cable.You will have to check if your board is on the list of serial ports. To do this, go to &quot;Serial port&quot; under &quot;Tools&quot;. Then make sure you are connected to the right serial port. If you did not install the driver for the Arduino UNO properly, it might fail to connect to the right serial port.</p>\n<p><img src=\"../../img/tutorials/en/info-07-07.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>Now, you can start burning firmware on your Arduino board by clicking &quot;Upload&quot;.</p>\n<p><img src=\"../../img/tutorials/en/info-07-08.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>You will see the message &quot;Done uploading&quot; when the uploading succeeds. Now, you can start using all the functions that Webduino offers.</p>\n<p><img src=\"../../img/tutorials/en/info-07-09.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<h2 id=\"list-of-firmwares\">List of Firmwares</h2>\n<p>The following list is the open source firmwares that have been released by Webduino. Webduino keeps adding to its list of sensors and components that are supported, so please pay attenetion to our projects on Github. Fork it! (The name of the file may include more than one sensor or component, this shows everything that is supported by that file.)</p>\n<p>(1) buzzer: Buzzer\n(2) ultrasonic: Ultrasonic\n(3) MaxMatrix: LED Matrix\n(4) dht: DHT sensor\n(5) MFRC522: RFID\n(6) Joypad: Joystick\n(7) IR: IR Sender / Receiver\n(8) GPS: GPS \n(9) GY291: Triple Axis Accelerometer\n(10) G3: PM2.5 Sensor</p>\n<h2 id=\"compiling-errors-for-the-arduino-ide-1-6-7\">Compiling Errors for the Arduino IDE 1.6.7</h2>\n<p>Some users have met compiling errors when using Arduino IDE 1.6.7 because of incompatibilities between Firmata versions 2.4.4 and 2.5.1. If you have these versions, you can reinstall the older versions 1.6.6 or 1.6.5, (Download it here: <a href=\"https://www.arduino.cc/en/Main/OldSoftwareReleases#previous\">https://www.arduino.cc/en/Main/OldSoftwareReleases#previous</a>) or <strong>reinstall Firmata 2.4.4 or 2.4.3 though the following steps</strong>.</p>\n<p>Step 1: Open Library Manager (Sketch &gt; Include Library &gt; Manage Libraries)</p>\n<p><img src=\"../../img/tutorials/en/info-07-10.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>Step 2: Search for &quot;Firmata&quot;, check if your version is 2.5.1.</p>\n<p><img src=\"../../img/tutorials/info-07-12.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>Step 3: Choose Firmata version <strong>2.4.4 or 2.4.3</strong>, and then press &quot;Install&quot;. Now you can reinstall the older version, and begin burning firmwares!</p>\n<p><img src=\"../../img/tutorials/info-07-13.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<!-- @@close-->"},"info-08-blockly-tutorial":{"tag":"info","src":"info-08-blockly-tutorial.html","title":"Webduino Blockly Basic Guide","banner":"info-08-01.jpg","img":"info-08-01s.jpg","date":20161003,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Blockly Basic Guide :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino Blockly is a visual programming editor, adopting the Google Blockly system. Webduino Blockly will help developers who are not familiar with Web programming language or those who wish to realize the ideas quickly.\">\n\n<meta itemprop=\"description\" content=\"Webduino Blockly is a visual programming editor, adopting the Google Blockly system. Webduino Blockly will help developers who are not familiar with Web programming language or those who wish to realize the ideas quickly.\">\n\n<meta property=\"og:description\" content=\"Webduino Blockly is a visual programming editor, adopting the Google Blockly system. Webduino Blockly will help developers who are not familiar with Web programming language or those who wish to realize the ideas quickly.\">\n\n<meta property=\"og:title\" content=\"Webduino Blockly Basic Guide\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-08-blockly-tutorial.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-08-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-08-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-blockly-basic-guide\">Webduino Blockly Basic Guide</h1>\n<p>Webduino Blockly is a visual programming editor, adopting the Google Blockly system. Webduino Blockly will help developers who are not familiar with Web programming language or those who wish to realize the ideas quickly. </p>\n<p>The following instructions are the basic functions you need while using the Webduino, if you are familiar with the interface and features, please check our practical online tutorials, &quot;<a href=\"https://blockly.webduino.io/index-tutorials.html\">Webduino Blockly Project Examples</a>&quot;.</p>\n<h2 id=\"introduction-to-the-interface\">Introduction to the Interface</h2>\n<p>Webduino Blockly has 3 main parts: The Block and Javascript tabs, which includes &quot;Blocks&quot; and the &quot;Code Generator&quot;. The buttons on the upper right of the workspace include the &quot;Open Code Editor&quot;, &quot;Check Device Status&quot;, &quot;Web Demo Area&quot;, &quot;Discard All Blocks&quot;, and &quot;Run Blocks&quot; buttons. Finally, the Side Menu consists all the &quot;Blocks&quot;, and the white space in the middle is the &quot;Workspace&quot;.</p>\n<p><img src=\"../../img/tutorials/en/info-08-02.jpg\" alt=\"Webduino Blockly Introduction to the Interface\"></p>\n<h2 id=\"webduino-blocks\">Webduino Blocks</h2>\n<p>Webduino Blockly uses a variety of Blocks. All of the Blocks are located in the Side Menu on the left-hand side of the workspace. Here are the categories:</p>\n<p><strong>Variables</strong>: Variables are commonly used in programming. You can name and use the variables. \n<strong>Functions</strong>: A function is a group of statements that is given a name, and which can be called. \n<strong>Standard</strong>: Standard blocks include Logic, Loops, Math, Text, Lists, and Color blocks.<br><strong>Advanced</strong>: Advanced blocks include Console, Delay, Math Conversion, Repeat, Keyboard, Voice Control, Speech, and Mobile Device blocks.<br><strong>Board</strong>: You can use these blocks in the Webdino Private Cloud to detect the pins and status of Webduino Boards.<br><strong>Components</strong>: These are blocks for electronic components, e.g. LED, Buzzer, Relay, Servo Motor… and so on. \n<strong>Sensors</strong>: Blocks for different sensors, e.g Ultra Sonic, DHT, PIR Detection, Sound Detection, Photocells… and so on. \n<strong>Gadgets</strong>: Blocks for Gadgets. \n<strong>Database</strong>: Blocks for connecting with Firebase.\n<strong>Web Demo</strong>: Blocks for interacting with the Web Demo Area.  </p>\n<p><img src=\"../../img/tutorials/en/info-08-03.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<h2 id=\"create-a-pop-up-window-on-screen\">Create a Pop-up Window on Screen</h2>\n<p>Click &quot;Text&quot; under &quot;Basic Function&quot;. Combine the &quot;Print&quot; and &quot;[blank text]&quot; blocks in the workspace. Then type in &quot;Hello World&quot; in the &quot;[blank text]&quot; block.</p>\n<p><img src=\"../../img/tutorials/en/info-08-04.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<p>Press &quot;Run Blocks&quot; button on the upper right-hand side, and you will see a window popup showing &quot;Hello World&quot;.</p>\n<p><img src=\"../../img/tutorials/en/info-08-05.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<h2 id=\"show-text-in-the-web-demo-area\">Show Text in the Web Demo Area</h2>\n<p>Now we are going to practice how to interact with the web browser, so that you can use this function to control electronic components and sensors through a web browser in other examples. Go to &quot;Web Demo&quot; on the side menu, click on &quot;Show Text&quot;, drag the &quot;Show&quot; block to the workspace, and then drag a &quot;Text&quot; block to the workspace and type in something in the block.</p>\n<p><img src=\"../../img/tutorials/en/info-08-06.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<p>Open &quot;Wed Demo Area&quot; on the upper right-hand menu, and press &quot;Run Blocks&quot;. Then you will see the text you entered on the &quot;Web Demo Area&quot;.</p>\n<p><img src=\"../../img/tutorials/en/info-08-07.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<h2 id=\"use-click-button-is-the-web-demo-to-create-a-pop-up-a-window\">Use &quot;Click Button&quot; is the Web Demo to Create a Pop-Up a Window</h2>\n<p>We can combine the functions mentioned above, interacting with the Web Demo Area in order to create a pop-up a window of text. First, from the &quot;Web Demo&quot; menu drag a &quot;Click Button&quot; block, a &quot;Print&quot; block, and a &quot;[blank text]&quot; block to the workspace. Type in some text in the &quot;[blank text]&quot; block and choose the button as shown in figure.</p>\n<p><img src=\"../../img/tutorials/en/info-08-08.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<p>Click &quot;Run Blocks&quot;, and a window of text will pop-up on screen.</p>\n<p><img src=\"../../img/tutorials/en/info-08-09.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<h2 id=\"control-the-webduino-board\">Control the Webduino Board</h2>\n<p>Finally, we get to use the Webduino board. Drag a &quot;Board&quot; block to the workspace. You can choose to connect by WiFi, serial port, or Bluetooth. Note that, if you wish to connect by serial port or Bluetooth, you must first install the Chrome Proxy API. (Check the &quot;<a href=\"info-05-chrome-api-proxy.html\">Chrome API Proxy Installation Guide</a>&quot; and &quot;<a href=\"info-07-arduino-ino.html\">Arduino Firmware Download / Burn</a>&quot;)</p>\n<p><img src=\"../../img/tutorials/en/info-08-10.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<p>If you wish to connect to your board with WiFi. type in the name of your board then, click the tab &quot;Check Device Status&quot;. You should only use your board when the status shows a green light.</p>\n<p><img src=\"../../img/tutorials/en/info-08-11.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<p>Drag any of the Sensors or Electronic Components blocks to the workspace to combine them with the &quot;Board&quot; block. Now you can check out any of the other project examples using the Webduino board to learn about sensors and the electronic components and how they interact with each other. (more info please check our <a href=\"https://webduino.io/en/tutorials.html\">Tutorials</a> on Webduino website)</p>\n<p><img src=\"../../img/tutorials/en/info-08-12.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<h2 id=\"coder-generator\">Coder Generator</h2>\n<p>You can export all the blocks to JavaScript by clicking the &quot;JavaScript&quot; tab. (The output might fail, if the blocks are in the wrong order.)</p>\n<p><img src=\"../../img/tutorials/en/info-08-13.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<p>Click &quot;Copy to Clipboard&quot;, and you can use the codes in other editors.</p>\n<p><img src=\"../../img/tutorials/en/info-08-14.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<h2 id=\"open-code-editor\">Open Code Editor</h2>\n<p>If you don&#39;t have a code editor, you can use the default editor. The editor button is located in the upper right-hand side of Webduino Blockly. Once clicked, you will be taken to the Webduino Bin, which is a custom, open source code editor from JSBin. </p>\n<p><img src=\"../../img/tutorials/en/info-08-15.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<p>Once you open the code editor, you would find that all the codes are imported automatically in the JavaScript tab. Now you can do all of your editing in JavaScript.  </p>\n<p><img src=\"../../img/tutorials/info-08-16.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<p>The Webduino Bin editor offers you a convenient way to edit codes, so even the figures will be imported automatically.</p>\n<p><img src=\"../../img/tutorials/en/info-08-17.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<h2 id=\"save-file\">Save File</h2>\n<p>Never worry about losing your files. No matter if you are finished or not, just click the tab &quot;Save and Link to Blocks&quot; and then save the link to your bookmarks/favorite folder. You would see the saved page next time you open your browser. </p>\n<p><img src=\"../../img/tutorials/en/info-08-18.jpg\" alt=\"Webduino Blockly Basic Guide\"></p>\n<h2 id=\"now-you-can-start-playing-with-your-webduino-blockly-\">Now you can start playing with your Webduino Blockly!</h2>\n<p>Practice these steps with your Webduino  and it will help you develop your knowledge of the Internet of Things!</p>\n<p>Tutorials on Webduino&#39;s Official Website: <a href=\"https://webduino.io/en/tutorials.html\">https://webduino.io/en/tutorials.html</a> \nProject Examples for the Webduino Blockly: <a href=\"https://blockly.webduino.io/index-tutorials.html\">https://blockly.webduino.io/index-tutorials.html</a></p>\n<!-- @@close-->"},"info-09-multi-webduino-board":{"tag":"info","src":"info-09-multi-webduino-board.html","title":"Interaction with Multiple Webduino Boards","banner":"info-09-01.jpg","img":"info-09-01s.jpg","date":20160120,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Interaction with Multiple Webduino Boards :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"It is really simple to interact with multiple Webduino boards. In the Web programming logic, Webduino boards can be seen as “functions”, and the components or sensors can be seen as “variables”. So when the boards go online, all the functions will be executed,\nYou will need to use Webduino Blockly to do the exercises:\">\n\n<meta itemprop=\"description\" content=\"It is really simple to interact with multiple Webduino boards. In the Web programming logic, Webduino boards can be seen as “functions”, and the components or sensors can be seen as “variables”. So when the boards go online, all the functions will be executed,\nYou will need to use Webduino Blockly to do the exercises:\">\n\n<meta property=\"og:description\" content=\"It is really simple to interact with multiple Webduino boards. In the Web programming logic, Webduino boards can be seen as “functions”, and the components or sensors can be seen as “variables”. So when the boards go online, all the functions will be executed,\nYou will need to use Webduino Blockly to do the exercises:\">\n\n<meta property=\"og:title\" content=\"Interaction with Multiple Webduino Boards\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-09-multi-webduino-board.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-09-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-09-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"interaction-with-multiple-webduino-boards\">Interaction with Multiple Webduino Boards</h1>\n<p>It is really simple to interact with multiple Webduino boards. In the Web programming logic, Webduino boards can be seen as &quot;functions&quot;, and the components or sensors can be seen as &quot;variables&quot;. So when the boards go online, all the functions will be executed,\nYou will need to use <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly Editor</a> to do the exercises.</p>\n<p>In this tutorial, you will be using an LED and an Ultrasonic sensor. If you want to learn more about their applications, check out the tutorials:</p>\n<p>1) <a href=\"tutorial-01-led.html\">Project Example 1: Project Example 1: Control a Single LED</a><br>2) <a href=\"tutorial-05-ultrasonic.html\">Project Example 5: Project Example 5: Use An Ultrasonic Sensor</a></p>\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>First, place the &quot;Board&quot; blocks in the workspace, and mark the &quot;<strong>Series</strong>&quot; checkboxes  on the boards that you want to be connected.</p>\n<p><img src=\"../../img/tutorials/en/info-09-02.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>Place LED blocks in each stack, and rename them. Make sure to differentiate their names, since they are different items.</p>\n<p><img src=\"../../img/tutorials/en/info-09-03.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>Add a &quot;<strong>When in a series circuit, do</strong>&quot; block to the workspace. Place all of the events within the slot of this block. This is to make sure that all of the events execute after the boards go online.</p>\n<p><img src=\"../../img/tutorials/en/info-09-04.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>To make the LEDs blink add &quot;LED set state&quot; blocks and &quot;Delay # seconds&quot; blocks to the stack.</p>\n<p><img src=\"../../img/tutorials/en/info-09-05.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>When you&#39;ve done all the previous steps, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. You will see the two LEDs blinking. (Check your stack setup with this example here: <a href=\"https://blockly.webduino.io/?lang=en#-KZuPowxRuAFQd9EmjeR\">https://blockly.webduino.io/?lang=en#-KZuPowxRuAFQd9EmjeR</a>).</p>\n<p><img src=\"../../img/tutorials/en/info-09-06.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>You can also make LED interact with ultrasonic sensor, just connect one of the boards to an ultrasonic sensor. Here we connect board B to an ultrasonic sensor. The distance detected by the ultrasonic sensor on board B will control the LED on board A.</p>\n<p><img src=\"../../img/tutorials/en/info-09-07.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>Then create an event within a &quot;When in a series circuit, do&quot; board. Set up a stack so that when the sensor detects a distance less than 10 centimeters the LED will turn off.</p>\n<p><img src=\"../../img/tutorials/en/info-09-08.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>Again, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. You will see the LED light up when there is an obstacle in front of ultrasonic sensor! (Check your stack setup with this example here: <a href=\"https://blockly.webduino.io/?lang=en#-KZuJMsjp5KPXiJBlG6m\">https://blockly.webduino.io/?lang=en#-KZuJMsjp5KPXiJBlG6m</a>).</p>\n<!-- @@close-->"},"info-10-pin":{"tag":"info","src":"info-10-pin.html","title":"Webduino Board Pin Manipulation","banner":"info-10-01.jpg","img":"info-10-01s.jpg","date":20160331,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Board Pin Manipulation :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino boards can detect and set pin states just like any other board. When using the “I/O pins” blocks in Blockly, by default, all of the pins (2~13) are set to be “digital output”. All of the analog pins (A0~A5) are set to “analog input”. For modularized blocks, such as LED and RGB LED, some pins correspond to their PWM (pulse-width modulated) outputs. We can change the pin mode ourselves, but if you set a pin to PWM mode on an unsupported pin it will not work. (PWM pin numbers have the suffix “~”).\">\n\n<meta itemprop=\"description\" content=\"Webduino boards can detect and set pin states just like any other board. When using the “I/O pins” blocks in Blockly, by default, all of the pins (2~13) are set to be “digital output”. All of the analog pins (A0~A5) are set to “analog input”. For modularized blocks, such as LED and RGB LED, some pins correspond to their PWM (pulse-width modulated) outputs. We can change the pin mode ourselves, but if you set a pin to PWM mode on an unsupported pin it will not work. (PWM pin numbers have the suffix “~”).\">\n\n<meta property=\"og:description\" content=\"Webduino boards can detect and set pin states just like any other board. When using the “I/O pins” blocks in Blockly, by default, all of the pins (2~13) are set to be “digital output”. All of the analog pins (A0~A5) are set to “analog input”. For modularized blocks, such as LED and RGB LED, some pins correspond to their PWM (pulse-width modulated) outputs. We can change the pin mode ourselves, but if you set a pin to PWM mode on an unsupported pin it will not work. (PWM pin numbers have the suffix “~”).\">\n\n<meta property=\"og:title\" content=\"Webduino Board Pin Manipulation\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-10-pin.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-10-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-10-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-board-pin-manipulation\">Webduino Board Pin Manipulation</h1>\n<p>Webduino boards can detect and set pin states just like any other board. <strong>When using the &quot;I/O pins&quot; blocks in Blockly, by default, all of the pins (2~13) are set to be &quot;digital output&quot;. All of the analog pins (A0~A5) are set to &quot;analog input&quot;.</strong> For modularized blocks, such as LED and RGB LED, some pins correspond to their PWM (pulse-width modulated) outputs. We can change the pin mode ourselves, but if you set a pin to PWM mode on an unsupported pin it will not work. (PWM pin numbers have the suffix &quot;~&quot;).</p>\n<h2 id=\"how-to-use-\">How to use?</h2>\n<p>Heading to <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly</a>, you will see &quot;I/O pins&quot; on the side menu. We can assign a pin to a variable, or a variable to pin on another board that is also on the workspace. The mode, output, and input can also be set with these blocks.</p>\n<p><img src=\"../../img/tutorials/en/info-10-02.jpg\" alt=\"\"></p>\n<p>Let&#39;s start with a simple example. Plug an LED on Webduino board. Connect the long leg to pin 11 and the short one to GND. Then, set the pin to 11 and output to 1. Click the red &quot;Run blocks&quot; button  on the top-right. Once you finish all the steps, if the board is online, the LED will light up.</p>\n<p><img src=\"../../img/tutorials/en/info-10-03.jpg\" alt=\"\"></p>\n<p>With PWM we can adjust the brightness to whatever you desire, not just on and off. In this tutorial we set the pin output to 0.01, after running the stack we should see the LED light up with faint light. If we use PWM without the correct settings it will result in the output always being 1 or 0.</p>\n<p><img src=\"../../img/tutorials/en/info-10-04.jpg\" alt=\"\"></p>\n<p>For input, we usually use a photocell or a potentiometer to test analog signals, and a switch button to test digital signals. However, we tend to use blocks residing in the &quot;Components&quot; or &quot;Sensors&quot; categories that have encapsulated all of the functions we need. For that, some values may have to be adjusted before we can use them.</p>\n<h2 id=\"applications-for-pin-setting\">Applications for pin setting</h2>\n<p>We can see low electric potential as GND and high electric potential as a 5V output, since we can set digital output to 1 or 0. For example, if we just plug an LED into pin 11 and GND, with pin 11 being output 1, the LED will light up. And if we plug LED&#39;s long leg into 11 and the short one into 12, then set the output for pin 12 to 0, and pin 11 to 1, the LED will still light up when we run the stack by clicking the red &quot;Run Blocks&quot; button.</p>\n<p><img src=\"../../img/tutorials/en/info-10-05.jpg\" alt=\"\"></p>\n<p>What if we want to know value of a pin? This time we use an &quot;LED&quot; block,which is different from &quot;I/O Pins&quot; block. The &quot;LED&quot; block is a encapsulated block whereas the &quot;I/O Pins&quot; block controls a pin directly. If we try to make it blink and show us the value of a pin, plug the LED into pin 11 just like before and run the stack. We&#39;ll see that the value change between 0 and 1.</p>\n<p><img src=\"../../img/tutorials/en/info-10-06.jpg\" alt=\"\"></p>\n<p>Once we understand input and output, we can create and play with much more creative applications!</p>\n<!-- @@close-->"},"info-11-feature":{"tag":"info","src":"info-11-feature.html","title":"The 10 Most Useful Features of Webduino Blockly","banner":"info-11-01.jpg","img":"info-11-01s.jpg","date":20161004,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>The 10 Most Useful Features of Webduino Blockly :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino has been popular and widely enjoyed by all users since it's launch. Therefore, we are introducing the most useful features that we have yet to mention in the tutorials. This article will help you use the functions of Webduino Blockly better.\">\n\n<meta itemprop=\"description\" content=\"Webduino has been popular and widely enjoyed by all users since it's launch. Therefore, we are introducing the most useful features that we have yet to mention in the tutorials. This article will help you use the functions of Webduino Blockly better.\">\n\n<meta property=\"og:description\" content=\"Webduino has been popular and widely enjoyed by all users since it's launch. Therefore, we are introducing the most useful features that we have yet to mention in the tutorials. This article will help you use the functions of Webduino Blockly better.\">\n\n<meta property=\"og:title\" content=\"The 10 Most Useful Features of Webduino Blockly\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-11-feature.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-11-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-11-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"the-10-most-useful-features-of-webduino-blockly\">The 10 Most Useful Features of Webduino Blockly</h1>\n<p>Webduino has been popular and widely enjoyed by all users since it&#39;s launch. Therefore, we are introducing the most useful features that we have yet to mention in the tutorials. This article will help you use the functions of Webduino Blockly better.</p>\n<h2 id=\"1-shortcut-keys\">1. Shortcut Keys</h2>\n<p><strong>Ctrl+Z (Undo)</strong>: Undo the previous command.\n<strong>Ctrl+Shift+Z (Redo)</strong>: Reverse the undo command.\n<strong>Ctrl+X (Cut)</strong> : Remove the selected item and copy it to the clipboard.\n<strong>Ctrl+C (Copy)</strong>: Copy the selected item to the clipboard.\n<strong>Ctrl+V (Paste)</strong>: Paste the contents of the clipboard into the current page.\nNote, if you are using a Mac operating system, you should replace Ctrl with Command.</p>\n<p><img src=\"../../img/tutorials/en/info-11-02.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/en/info-11-03.jpg\" alt=\"\"></p>\n<h2 id=\"2-pause-blocks\">2. Pause Blocks</h2>\n<p>You can pause some of the blocks on the current page without deleting them. While in development sometimes you need to delete blocks before testing. However, you can choose not to delete them but to right-click them and select &quot;<strong>Disable Block</strong>&quot;. Just right-click and select &quot;Enable block&quot; to resume the block&#39;s function.</p>\n<p><img src=\"../../img/tutorials/en/info-11-04.jpg\" alt=\"\"></p>\n<h2 id=\"3-save-and-share-file\">3. Save and Share File</h2>\n<p>Click the tab &quot;Save and Link to Blocks&quot; on the up-right hand side of the workspace and <strong>the site URL will generate automatically</strong>. Save the link to your bookmarks/favorite folder or share it with others. You will see the current page next time you open the browser. </p>\n<p><img src=\"../../img/tutorials/en/info-11-05.jpg\" alt=\"\"></p>\n<h2 id=\"4-convert-blocks-to-png\">4. Convert Blocks to .PNG</h2>\n<p>You can <strong>convert blocks to .PNG</strong> by right-clicking in the workspace and choose &quot;Download Image&quot;.</p>\n<p><img src=\"../../img/tutorials/en/info-11-06.jpg\" alt=\"\"></p>\n<h2 id=\"5-copy-all-codes\">5. Copy All Codes</h2>\n<p>You can <strong>export all of your blocks to JavaScript</strong> by clicking the tab &quot;JavaScript&quot;. This is one of the most practical features of Webduino Blockly. And if you wish to edit codes in other editors, click &quot;Copy to Clipboard&quot;. It is that easy to transport your work.</p>\n<p><img src=\"../../img/tutorials/en/info-11-07.jpg\" alt=\"\"></p>\n<h2 id=\"6-web-demo-features\">6. Web Demo Features</h2>\n<p>Click &quot;<strong>Web Demo Area</strong>&quot; on the up-right hand side of the workspace, and you can interact with your web browser. Each feature in the &quot;Web Demo Area&quot; drop-down list refers to a distinct block on the side menu. You can also find other examples for using remotes in the &quot;Web Demo Area&quot;.</p>\n<p><img src=\"../../img/tutorials/en/info-11-08.jpg\" alt=\"\"></p>\n<h2 id=\"7-check-device-status\">7. Check Device Status</h2>\n<p>There is a simple way to check the status of your device. Type in the name of your device in the upper right-hand button, and it will show it&#39;s status. Green means that device is online. Red means device is offline. </p>\n<p><img src=\"../../img/tutorials/info-11-09.jpg\" alt=\"\"></p>\n<h2 id=\"8-open-code-editor\">8. Open Code Editor</h2>\n<p>Click &quot;Open Code Editor&quot; on the upper right-hand side of the workspace, and you can edit the code directly in the default code editor. This feature benefits advanced developers for editing codes easily.</p>\n<p><img src=\"../../img/tutorials/en/info-11-10.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/info-11-11.jpg\" alt=\"\"></p>\n<h2 id=\"9-seamlessly-connect-to-your-mobile-devices\">9. Seamlessly Connect to Your Mobile Devices</h2>\n<p>Open the code editor, click &quot;Share&quot; on the upper left-hand side of the workspace, and choose &quot;Output&quot;. (If you can&#39;t see &quot;Share&quot; on the menu, press Ctrl+S to make it appear.) Then scan the QRcode with your mobile device, and your device will become a remote control.</p>\n<p><img src=\"../../img/tutorials/en/info-11-12.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/info-11-13.jpg\" alt=\"\"></p>\n<h2 id=\"10-support-node-js\">10. Support Node JS</h2>\n<p>Webduino Blockly is not only support by front-end operation but also by the NodeJS envirnment. You can also run Webduino Blockly in back-end operation by including the respective packages. </p>\n<p><img src=\"../../img/tutorials/info-11-14.jpg\" alt=\"\"></p>\n<p>Once you are familiar with all these features and the &quot;Webduino Blockly Practice Examples&quot;, you will be an IoT expert!</p>\n<!-- @@close-->"},"info-12-bluetooth":{"tag":"info","src":"info-12-bluetooth.html","title":"Webduino Bluetooth Control","banner":"info-12-01.jpg","img":"info-12-01s.jpg","date":20160707,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Bluetooth Control :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"The Webduino development boards have been known for their “Wi-Fi control”, but they can also be connected via Bluetooth or Serial Port and still be operated by Webduino Blockly or JavaScript.  This tutorial demonstrates how to connect bluetooth modules (HC05, HC06) to the Webduino, and each of their individual setup and operation processes.\">\n\n<meta itemprop=\"description\" content=\"The Webduino development boards have been known for their “Wi-Fi control”, but they can also be connected via Bluetooth or Serial Port and still be operated by Webduino Blockly or JavaScript.  This tutorial demonstrates how to connect bluetooth modules (HC05, HC06) to the Webduino, and each of their individual setup and operation processes.\">\n\n<meta property=\"og:description\" content=\"The Webduino development boards have been known for their “Wi-Fi control”, but they can also be connected via Bluetooth or Serial Port and still be operated by Webduino Blockly or JavaScript.  This tutorial demonstrates how to connect bluetooth modules (HC05, HC06) to the Webduino, and each of their individual setup and operation processes.\">\n\n<meta property=\"og:title\" content=\"Webduino Bluetooth Control\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-12-bluetooth.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-12-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-12-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-bluetooth-control\">Webduino Bluetooth Control</h1>\n<p>The Webduino development boards have been known for their &quot;Wi-Fi control&quot;, but they can also be connected via Bluetooth or Serial Port and still be operated by Webduino Blockly or JavaScript. This tutorial demonstrates how to connect bluetooth modules (HC05, HC06) to the Webduino, and each of their individual setup and operation processes.</p>\n<p>Once you realize how to use it, you will experience the convenience and wonderful uses of Webduino, even without Wi-Fi, or with only the Arduino UNO on hand!</p>\n<h2 id=\"step-1-the-circuit\">Step 1. The Circuit</h2>\n<p>If we were to switch the Mark 1 board from using Wi-Fi to Bluetooth, first we would remove the esp8266 chip. Then you will see an 8-pin connector socket on the board, where the bluetooth module should be connected.</p>\n<p><img src=\"../../img/tutorials/info-12-17.jpg\" alt=\"\"></p>\n<p>Using Dupont Lines, <strong>connect VCC to the upper-left pin, GND to the lower-right one, TXD to the upper-right one, and RXD to the lower-left one</strong>; do not connect the remaining 4 pins in the middle. Each pin is labeled for a particular function at the back of the bluetooth module.</p>\n<p><img src=\"../../img/tutorials/info-12-02.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/info-12-06.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/info-12-07.jpg\" alt=\"\"></p>\n<p>If you only have the Arduino UNO board, <strong>connect VCC on the bluetooth module to 3.3V on UNO, then connect GND to GND, RXD to TX (pin 1), and TXD to RX (pin 0).</strong></p>\n<p><img src=\"../../img/tutorials/en/info-12-05.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/info-12-09.jpg\" alt=\"\"></p>\n<p>If you place the Webduino Fly onto the UNO, you need to <strong>switch Webduino Fly to STA mode.</strong></p>\n<p><img src=\"../../img/tutorials/en/info-12-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/info-12-12.jpg\" alt=\"\"></p>\n<h2 id=\"step-2-bluetooth-setup\">Step 2. Bluetooth Setup</h2>\n<p>After the bluetooth module connection is established, connect the power supply to a development board. To get started using Bluetooth, you&#39;ll <strong>need to pair your bluetooth module with your Bluetooh-compatible computer</strong>. Whether you are using the Mark 1, Arduino UNO, or Webduino Fly+UNO, connect the power supply and click the Bluetooth icon on the screen for detecting devices. If everything is setup correctly, you&#39;ll see a Bluetooth device name on the screen. For instance, the Bluetooth device name on my computer is &quot;class3&quot;.</p>\n<p>Bluetooth Pairing on Windows:</p>\n<p><img src=\"../../img/tutorials/en/info-12-18.jpg\" alt=\"\"></p>\n<p>Bluetooth Pairing on Mac:</p>\n<p><img src=\"../../img/tutorials/en/info-12-19.jpg\" alt=\"\"></p>\n<h2 id=\"step-3-changing-baud-rates\">Step 3. Changing Baud Rates</h2>\n<p>If this is the first time you are using the Bluetooth module, you will need to <strong>set the baud rate of the module to 57600</strong> (because the firmware of the Arduino is 57600).</p>\n<h2 id=\"step-4-using-chrome-proxy-api\">Step 4. Using Chrome Proxy API</h2>\n<p>We are going to connect bluetooth modules and manipulate development boards through Webduino Blockly. These are delivered via Chrome Browser, so we will need to convert programming commands by means of Chrome Proxy API. Refer to the previous tutorial for setup: <a href=\"info-05-chrome-api-proxy.html\">Chrome API Proxy Installation Guide</a></p>\n<p>After finishing the setup, you&#39;ll see two activated programs in your Chrome Extensions.</p>\n<p><img src=\"../../img/tutorials/en/info-12-13.jpg\" alt=\"\"></p>\n<p>Then, go to Chrome Apps and click the icon &quot;API Proxy for Google Chrome&quot;.</p>\n<p><img src=\"../../img/tutorials/info-12-14.jpg\" alt=\"\"></p>\n<p>You&#39;ll see the corresponding bluetooth address. Copy the address, which will be helpful for Bluetooth control later. Do not close API Proxy for Google Chrome, because it supports the communication conversion code.</p>\n<p><img src=\"../../img/tutorials/info-12-15.jpg\" alt=\"\"></p>\n<h2 id=\"step-5-opening-and-testing-webduino-blockly\">Step 5. Opening and Testing Webduino Blockly</h2>\n<p>Make sure API Proxy for Google Chrome is open, then connect the long leg of an LED to pin 13, the short leg to GND (for the Mark 1 you can use pin 10 and GND). Then, open Webduino Blockly, and drop a development board into the work area. <strong>Select &quot;Bluetooth&quot; in the drop-down menu</strong>, paste the bluetooth address you copied earlier, and put LED blocks inside set to LED. Run the Blocks. After one or two seconds of bluetooth pairing, you&#39;ll see LED start to flash.</p>\n<p><img src=\"../../img/tutorials/en/info-12-16.jpg\" alt=\"\"></p>\n<p>This tutorial has described how the Webduino board is controlled using bluetooth modules.  If you don&#39;t have Wi-Fi, or if you are only using the Arduino UNO, using this tutorial you can immediately experience the convenience and ease of Webduino!</p>\n<!-- @@close-->"},"smart-01-information":{"tag":"smart","src":"smart-01-information.html","title":"Introduction to Webduino Smart","banner":"smart-01-information.jpg","img":"smart-01-information-s.jpg","date":20161001,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Introduction to Webduino Smart :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino Smart is a ground-breaking development board. Unlike Webduino Mark 1 and Webduino Fly, which need to combine with Arduino boards, Webduino Smart can function with the Internet and WebSocket independently. It will be a path to lead an efficient and effective development of IoT.\">\n\n<meta itemprop=\"description\" content=\"Webduino Smart is a ground-breaking development board. Unlike Webduino Mark 1 and Webduino Fly, which need to combine with Arduino boards, Webduino Smart can function with the Internet and WebSocket independently. It will be a path to lead an efficient and effective development of IoT.\">\n\n<meta property=\"og:description\" content=\"Webduino Smart is a ground-breaking development board. Unlike Webduino Mark 1 and Webduino Fly, which need to combine with Arduino boards, Webduino Smart can function with the Internet and WebSocket independently. It will be a path to lead an efficient and effective development of IoT.\">\n\n<meta property=\"og:title\" content=\"Introduction to Webduino Smart\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-01-information.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-01-information-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-01-information-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"introduction-to-webduino-smart\">Introduction to Webduino Smart</h1>\n<p>Webduino Smart is a ground-breaking development board. Unlike Webduino Mark 1 and Webduino Fly, which need to combine with Arduino boards, Webduino Smart can function with the Internet and WebSocket independently. It will be a path to lead an efficient and effective development of IoT.</p>\n<h2 id=\"on-board-components-and-pins\">On-board Components and Pins</h2>\n<p>Webduino Smart has a photocell sensor, an RGB LED, and a micro switch button onboard. The photocell is connected to the AD pin, and the RGB (Red, Geen, Blue) LED is connected to pins 15, 12, and 13 respectively <strong>(The LED is a common cathode, whereas most of the examples on this site use common anode RGB LED.)</strong> And the micro switch button is connected to pin 4. Please take note when you use these pins.</p>\n<p><img src=\"../../img/tutorials/en/smart-01-05.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"the-appearence\">The Appearence</h2>\n<p>Board dimensions: 3cm in length, 2.5cm in width, 1.3cm in height, and a weight of 85 grams. Digital pins: 0, 2, 4, 5, 14, and 16. \nPWM pins: 12, 13, 15. Analog Pin: AD (A0). \nOther pins: TX, RX, 3.3V, VCC, RST, and GRD.</p>\n<p>The front and back images:</p>\n<p><img src=\"../../img/tutorials/smart-01-02.jpg\" alt=\"\"></p>\n<p>360 degree overview:</p>\n<p><img src=\"../../img/tutorials/smart-01-03.gif\" alt=\"\"></p>\n<p>Reference with AA &amp; AAA batteries:</p>\n<p><img src=\"../../img/tutorials/en/smart-01-04.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"replace-the-stickers\">Replace the stickers</h2>\n<p>You can replace the original stickers on the board. Just cut the stickers that included in the package, and paste it on both sides. Please note that there are 4 stickers, <strong>L-out(outside on the left)</strong>, <strong>L-in(inside on the left)</strong>, <strong>R-out(outside on the right)</strong>, and <strong>R-in(inside on the right)</strong> each.</p>\n<p><img src=\"../../img/tutorials/en/smart-01-09.jpg\" alt=\"\"></p>\n<p>You could refer to the 360 degree overview for pasting them correctly.</p>\n<p><img src=\"../../img/tutorials/en/smart-01-10.jpg\" alt=\"\"></p>\n<h2 id=\"webduino-series\">Webduino Series</h2>\n<p>From the left, Webduino Smart, Webduino Mark 1, and Webduino Fly.</p>\n<p><img src=\"../../img/tutorials/smart-01-06.jpg\" alt=\"\"></p>\n<!-- @@close-->"},"smart-02-setup":{"tag":"smart","src":"smart-02-setup.html","title":"Webduino Smart Wi-Fi Setup","banner":"smart-02-setup.jpg","img":"smart-02-setup-s.jpg","date":20161001,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Smart Wi-Fi Setup :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Before you start using your Webduino Smart, you must set up your WiFi. The main purpose of this setup is to enable Webduino Smart to connect to the Internet or WebSocket. Using this setup, you can define the board's name and password, and update it through the Internet.\">\n\n<meta itemprop=\"description\" content=\"Before you start using your Webduino Smart, you must set up your WiFi. The main purpose of this setup is to enable Webduino Smart to connect to the Internet or WebSocket. Using this setup, you can define the board's name and password, and update it through the Internet.\">\n\n<meta property=\"og:description\" content=\"Before you start using your Webduino Smart, you must set up your WiFi. The main purpose of this setup is to enable Webduino Smart to connect to the Internet or WebSocket. Using this setup, you can define the board's name and password, and update it through the Internet.\">\n\n<meta property=\"og:title\" content=\"Webduino Smart Wi-Fi Setup\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-02-setup.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-02-setup-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-02-setup-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-smart-wi-fi-setup\">Webduino Smart Wi-Fi Setup</h1>\n<p>Before you start using your Webduino Smart, you must set up your WiFi. The main purpose of this setup is to enable Webduino Smart to connect to the Internet or WebSocket. Using this setup, you can define the board&#39;s name and password, and update it through the Internet.</p>\n<h2 id=\"step-1-plug-in-and-enter-the-ssid-password\">Step 1: Plug In, and Enter the SSID &amp; Password</h2>\n<p>Like the Webduino Mark 1 &amp; Webduino Fly, Webduino Smart has to connect to Wi-Fi by setting up an SSID &amp; password. However, Webduino Smart can be used in both Internet Protocol and WebSocket Protocol, which means that the devices can be used with LAN.</p>\n<p>Provide power to your Webduino Smart so the board can be found on your PC, laptop, or mobile device. (At first the red light on the board will blink, then it will stay on once it is ready.)</p>\n<p><img src=\"../../img/tutorials/en/smart-02-02.jpg\" alt=\"\"></p>\n<p>Connect to &quot;Smart&quot; by Wi-Fi, and type in the <strong>default password of 12345678</strong>. Now the board will be connected. </p>\n<p><img src=\"../../img/tutorials/en/smart-02-03.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"step-2-set-up-ssid-password-for-wi-fi-and-device-id\">Step 2: Set Up SSID &amp; Password for Wi-Fi, and Device ID</h2>\n<p>Open your internet browser (we recomend you use Chrome) and <strong>type 192.168.4.1 into the address bar</strong>. You will be directed to the setup page for the Webduino Smart. Fill in the Wi-Fi information and router ID. <strong>Here the SSID &amp; PW is referring to your AP&#39;s Wi-Fi.</strong></p>\n<p><img src=\"../../img/tutorials/en/smart-02-04.jpg\" alt=\"\"></p>\n<p>Press the &quot;Submit&quot; button, and the setup is successful when &quot;Save OK&quot; is showed on the screen.</p>\n<p><img src=\"../../img/tutorials/smart-02-05.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"step-3-connect-to-lan\">Step 3: Connect to LAN</h2>\n<p>After you have a successfully competed Steps 1 &amp; 2 and Wi-Fi is setup, remove the power to your Webduino Smart, then plug it in again. The red light on your board will not stop blinking until your board has connected to LAN. Once it connects to LAN, the green light will flash. Now you can find <strong>Smart_your device ID_192.168.XXX.XXX</strong> under your Wi-Fi access points. Please take note of the IP address, which is the IP you need to use WebSocket. If the red light does not stop blinking, you need to restart the setup from Step 1.</p>\n<p><img src=\"../../img/tutorials/en/smart-02-06.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"step-4-test-webduino-blockly\">Step 4: Test Webduino Blockly</h2>\n<p>Open the page <a href=\"https://blockly.webduino.io/?lang=en\">https://blockly.webduino.io/?lang=en</a> to access Webduino Blockly. Drag a board block onto the workspace, choose &quot;WebSocket&quot; in the drop down list, and type in your IP. WebSocket has some limitions when using &quot;https&quot;; therefore, <strong>you have to link to &quot;http&quot; instead</strong>. </p>\n<p><img src=\"../../img/tutorials/en/smart-02-07.jpg\" alt=\"\"></p>\n<p>Next, combine an RGB LED <strong>(CATHODE)</strong> block, located under &quot;Components&quot;, set the red pin to 15, the green pin to 12, and blue pin to 13. Finally, set the RGB LED color to &quot;Red&quot;.</p>\n<p><img src=\"../../img/tutorials/en/smart-02-08.jpg\" alt=\"\"></p>\n<p>Press &quot;Run Blocks&quot; and then the LED will light on in red. \nCheck your stack setup with this example here: <a href=\"https://goo.gl/y3TgqI\">https://goo.gl/y3TgqI</a></p>\n<p><img src=\"../../img/tutorials/smart-02-09.gif\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"step-5-update-firmware-through-the-internet\">Step 5: Update Firmware Through the Internet</h2>\n<p>Once you&#39;ve successfully completed Step 3, which means your Webduino Smart is able to connect to Internet, you can easily update the firmware on your Webduino Smart. While connected to power, <strong>PRESS and HOLD the Micro Switch button until the blue light comes on.</strong> This will update the firmware.</p>\n<p><img src=\"../../img/tutorials/en/smart-02-10.jpg\" alt=\"\"></p>\n<p>After finishing the update, the blue light will turn off and the red light will blink, showing that it is connecting. Finally, a burst of green light means you can start using your Webduino Smart with updated firmware.</p>\n<p><img src=\"../../img/tutorials/smart-02-11.jpg\" alt=\"\"></p>\n<!-- @@close-->"},"smart-03-rgbled":{"tag":"smart","src":"smart-03-rgbled.html","title":"Using RGB LED with the Webduino Smart","banner":"smart-03-rgbled.jpg","img":"smart-03-rgbled-s.jpg","date":20161005,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Using RGB LED with the Webduino Smart :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"The Webduino Smart development board has a built-in micro RGB (red, green and blue) LED (common cathode). The default pin numbers for red, green, and blue are 15, 12, and 13 respectively. Therefore, Webduino Smart is able to create lights with various colors directly.\">\n\n<meta itemprop=\"description\" content=\"The Webduino Smart development board has a built-in micro RGB (red, green and blue) LED (common cathode). The default pin numbers for red, green, and blue are 15, 12, and 13 respectively. Therefore, Webduino Smart is able to create lights with various colors directly.\">\n\n<meta property=\"og:description\" content=\"The Webduino Smart development board has a built-in micro RGB (red, green and blue) LED (common cathode). The default pin numbers for red, green, and blue are 15, 12, and 13 respectively. Therefore, Webduino Smart is able to create lights with various colors directly.\">\n\n<meta property=\"og:title\" content=\"Using RGB LED with the Webduino Smart\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-03-rgbled.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-03-rgbled-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-03-rgbled-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"using-rgb-led-with-the-webduino-smart\">Using RGB LED with the Webduino Smart</h1>\n<p>The Webduino Smart development board has a built-in micro RGB (red, green and blue) LED (common cathode). The default pin numbers for red, green, and blue are 15, 12, and 13 respectively. Therefore, Webduino Smart is able to create lights with various colors directly.</p>\n<div class=\"buy-this\">\n    <span>Kits with RGB LED: <a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino kit Plus (with support for the Mark 1 and Webduino Fly)</a></span>\n    <span>Webduino development board: <a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino Mark 1</a>, <a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>, <a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"instruction-of-webduino-blockly\">Instruction of Webduino Blockly</h2>\n<p>First, add a &quot;Smart&quot; block from the &quot;Board&quot; menu and select &quot;WebSocket&quot;. ( <strong>the web address of the webduino blockly must begin with http and not https</strong> )Then, key in the IP address of development board. (please refer to <a href=\"smart-02-setup.html\">Webduino Smart WiFi Setup</a> for the IP address) </p>\n<p><img src=\"../../img/tutorials/en/smart-03-02.jpg\" alt=\"\"></p>\n<p>Add a RGB LED (common cathode) block from the &quot;Components&quot; menu. Set the pin numbers to 15 for red, 12 for green, and 13 for blue.  </p>\n<p><img src=\"../../img/tutorials/en/smart-03-03.jpg\" alt=\"\"></p>\n<p>Under the Web Demo menu add &quot;Click Button, Do&quot; blocks to the stack. Then connect &quot;RGBLED Set Color&quot; blocks to those. Select different colors in the blocks for the buttons 1 through 5. </p>\n<p><img src=\"../../img/tutorials/en/smart-03-04.jpg\" alt=\"\"></p>\n<p>Click the red &quot;Run Blocks&quot; button when you want to run the stack. When you click different buttons in the Web Demo area, different colors will light up on your Webduino.\n(Check your stack setup with this example here: <a href=\"http://blockly.webduino.io/?lang=en#-KWG5MKjmhZhFnTOAEwj\">http://blockly.webduino.io/?lang=en#-KWG5MKjmhZhFnTOAEwj</a>)</p>\n<p><img src=\"../../img/tutorials/smart-03-05.gif\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"code-explanation\">Code Explanation</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of HTML. The purpose is to allow the browser to support all the components of Web Components and Webduino. If the JavaScript is created by Blockly editing tools, <code>webduino-blockly.js</code> should be included.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>JavaScript follows WebSocket mode: <code>{transport: &#39;websocket&#39;, url: &#39;192.168.8.115&#39;}</code> The rest of this part is selecting JavaScript for controlling colors through &quot;Click Button&quot;. </p>\n<pre><code>var rgbled;\n\nboardReady({transport: &#39;websocket&#39;, url: &#39;192.168.8.115&#39;}, function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  rgbled = getRGBLedCathode(board, 15, 12, 13);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#ff0000&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#009900&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#3333ff&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#ffcc33&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn5&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#000000&#39;);\n  });\n});\n</code></pre><p>That&#39;s it for Using RGB LED with the Webduino Smart<br>Webduino Bin: <a href=\"http://bin.webduino.io/nibux/edit?html,css,js,output\">http://bin.webduino.io/nibux/edit?html,css,js,output</a><br>Stack setup: <a href=\"http://blockly.webduino.io/?lang=en#-KWGDwZEkSfZmsV_hKny\">http://blockly.webduino.io/?lang=en#-KWGDwZEkSfZmsV_hKny</a></p>\n<div class=\"buy-this\">\n    <span>Kits with RGB LED: <a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino kit Plus (with support for the Mark 1 and Webduino Fly)</a></span>\n    <span>Webduino development board: <a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino Mark 1</a>, <a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>, <a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"smart-04-rgbled":{"tag":"smart","src":"smart-04-rgbled.html","title":"Dancing RGB LED with the Webduino Smart","banner":"smart-04-rgbled.jpg","img":"smart-04-rgbled-s.jpg","date":20161005,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Dancing RGB LED with the Webduino Smart :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"We have learned how to use the RGB LED with the Webduino Smart. In this tutorial, we will be using “Delay” and “Loop” blocks to have the RGB LED flash like a dance club light.\">\n\n<meta itemprop=\"description\" content=\"We have learned how to use the RGB LED with the Webduino Smart. In this tutorial, we will be using “Delay” and “Loop” blocks to have the RGB LED flash like a dance club light.\">\n\n<meta property=\"og:description\" content=\"We have learned how to use the RGB LED with the Webduino Smart. In this tutorial, we will be using “Delay” and “Loop” blocks to have the RGB LED flash like a dance club light.\">\n\n<meta property=\"og:title\" content=\"Dancing RGB LED with the Webduino Smart\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-04-rgbled.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-04-rgbled-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-04-rgbled-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"dancing-rgb-led-with-the-webduino-smart\">Dancing RGB LED with the Webduino Smart</h1>\n<p>We have learned <a href=\"smart-03-rgbled.html\">Using RGB LED with the Webduino Smart</a>. In this tutorial, we will be using &quot;Delay&quot; and &quot;Loop&quot; blocks to have the RGB LED flash like a dance club light. </p>\n<div class=\"buy-this\">\n    <span>Kits with RGB LED: <a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino kit Plus (with support for the Mark 1 and Webduino Fly)</a></span>\n    <span>Webduino development board: <a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino Mark 1</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"instructions-for-using-webduino-blockly\">Instructions for using Webduino Blockly</h2>\n<p>First, place a &quot;Board&quot; block onto the workspace, choose WebSocket in the drop-down list, and fill in the IP address of your board. <strong>Remember to use &quot;http&quot; protocol when you are using WebSocket, not &quot;https&quot;.</strong></p>\n<p>Add a RGB LED (common cathode) block from the &quot;Components&quot; menu to the stack. Set the pin numbers to 15 for red, 12 for green, and 13 for blue.</p>\n<p><img src=\"../../img/tutorials/smart-04-02.jpg\" alt=\"\"></p>\n<p>Add a &quot;Repeat / do&quot; block to the stack, and set the time of repeat to 10.</p>\n<p><img src=\"../../img/tutorials/smart-04-03.jpg\" alt=\"\"></p>\n<p>Add &quot;Delay seconds&quot; blocks in the loop, and set the delay times to 0.5 second, causing the RGB LED to change the color every 0.5 second. The loop will only run 10 times. We can turn off the LED by setting the color black once the loop finishes.</p>\n<p><img src=\"../../img/tutorials/smart-04-04.jpg\" alt=\"\"> </p>\n<p>Click the red &quot;Run Blocks&quot; button when you want to run the stack. Now the RGB LED will switch colors automatically. Check your stack setup with this example here: <a href=\"http://blockly.webduino.io/?lang=en#-KZtF0951DDGmhybbOHB\">http://blockly.webduino.io/?lang=en#-KZtF0951DDGmhybbOHB</a></p>\n<p><img src=\"../../img/tutorials/smart-03-05.gif\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of HTML. The purpose is to allow the browser to support all the components of Web Components and Webduino. If the JavaScript is created by Blockly editing tools, <code>webduino-blockly.js</code> should be included.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>JavaScript follows WebSocket mode: <code>{transport: &#39;websocket&#39;, url: &#39;192.168.8.115&#39;}</code> and we use <code>awit</code> to implement delay.</p>\n<pre><code>(async function () {\n\nvar rgbled;\n\nboardReady({transport: &#39;websocket&#39;, url: &#39;192.168.8.115&#39;}, async function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  rgbled = getRGBLedCathode(board, 15, 12, 13);\n  for (var count = 0; count &lt; 10; count++) {\n    rgbled.setColor(&#39;#ffcc33&#39;);\n    await delay(0.5);\n    rgbled.setColor(&#39;#ff0000&#39;);\n    await delay(0.5);\n    rgbled.setColor(&#39;#3333ff&#39;);\n    await delay(0.5);\n    rgbled.setColor(&#39;#009900&#39;);\n    await delay(0.5);\n  }\n  rgbled.setColor(&#39;#000000&#39;);\n});\n\n}());\n</code></pre><p>That&#39;s it for changing RGB LED colors with the Webduino Smart.\nWebduino Bin: <a href=\"http://bin.webduino.io/qivuj/edit?html,css,js,output\">http://bin.webduino.io/qivuj/edit?html,css,js,output</a>\nStack setup: <a href=\"http://blockly.webduino.io/?lang=en#-KZtFRWrm6B2sJqRZ94Y\">http://blockly.webduino.io/?lang=en#-KZtFRWrm6B2sJqRZ94Y</a></p>\n<div class=\"buy-this\">\n    <span>Kits with RGB LED: <a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino kit Plus (with support for the Mark 1 and Webduino Fly)</a></span>\n    <span>Webduino development board: <a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino Mark 1</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"smart-05-photocell":{"tag":"smart","src":"smart-05-photocell.html","title":"Photocell of the Webduino Smart","banner":"smart-05-photocell.jpg","img":"smart-05-photocell-s.jpg","date":20161006,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Photocell of the Webduino Smart :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"The Webduino Smart has a few built-in sensors and components, and photocell is one of them. The photocell can be used to detect the light surrounding it. The photocell is connected to A0, which is the AD pin on the board. Therefore, when the photocell is in use, the AD pin is taken.\">\n\n<meta itemprop=\"description\" content=\"The Webduino Smart has a few built-in sensors and components, and photocell is one of them. The photocell can be used to detect the light surrounding it. The photocell is connected to A0, which is the AD pin on the board. Therefore, when the photocell is in use, the AD pin is taken.\">\n\n<meta property=\"og:description\" content=\"The Webduino Smart has a few built-in sensors and components, and photocell is one of them. The photocell can be used to detect the light surrounding it. The photocell is connected to A0, which is the AD pin on the board. Therefore, when the photocell is in use, the AD pin is taken.\">\n\n<meta property=\"og:title\" content=\"Photocell of the Webduino Smart\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-05-photocell.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-05-photocell-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-05-photocell-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"photocell-of-the-webduino-smart\">Photocell of the Webduino Smart</h1>\n<p>The Webduino Smart has a few built-in sensors and components, and photocell is one of them. The photocell can be used to detect the light surrounding it. The photocell is connected to A0, which is the AD pin on the board. Therefore, when the photocell is in use, the AD pin is taken.</p>\n<!-- <div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-webduino-blockly\">Instructions for using Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/index.html?lang=en\">Webduino Blockly editor</a>, place a &quot;Board&quot; block onto the workspace, choose WebSocket in the drop-down list, and fill in the IP address of your board. <strong>Remember to use the &quot;http&quot; protocol when you are using WebSocket, not &quot;https&quot;.</strong></p>\n<p>Add a &quot;Photocell&quot; block and set the pin to A0.</p>\n<p><img src=\"../../img/tutorials/en/smart-05-02.jpg\" alt=\"\"></p>\n<p>Connect a &quot;Photocell detect / do&quot; block to the stack. Use the Web Demo method to show the values that the sensor detects. Click the red &quot;Run blocks&quot; button to run the stack, and you will see the value in Web Demo Area.\nCheck your stack setup with this example here: <a href=\"http://blockly.webduino.io/?lang=en#-KZsp_mWaBz_VrhJMRk4\">http://blockly.webduino.io/?lang=en#-KZsp_mWaBz_VrhJMRk4</a></p>\n<p><img src=\"../../img/tutorials/en/smart-05-03-1.jpg\" alt=\"\">\n<img src=\"../../img/tutorials/en/smart-05-03-2.jpg\" alt=\"\"></p>\n<p>You can convert the scale by using the &quot;Scale conversion&quot; block under the &quot;Math Conversion&quot; menu. Choose &quot;round to decimal 2&quot; for rounding the value to second decimal place. Fill in both the &quot;original&quot; and &quot;conversion&quot; values, so that you can convert the scale of value. \nCheck your stack setup with this example here: <a href=\"http://blockly.webduino.io/?lang=en#-KZsprNLjTKYohAy8M-g\">http://blockly.webduino.io/?lang=en#-KZsprNLjTKYohAy8M-g</a></p>\n<p><img src=\"../../img/tutorials/en/smart-05-04.jpg\" alt=\"\"> </p>\n<p><img src=\"../../img/tutorials/en/smart-05-05.jpg\" alt=\"\"></p>\n<p>We can also apply the method we introduced in the past tutorial: &quot;<a href=\"smart-03-rgbled.html\">Using an RGB LED with the Webduino Smart</a>&quot;. By simply using logic block to define a decision-making process you can make the RGB LED shine red if the value is between 0~0.2, in green if the value is between 0.4~0.6, and in blue if the value is over 0.6. The Webduino Smart allows for multiple applications at one time. This is the great advantage of the Webduino Smart!</p>\n<p><img src=\"../../img/tutorials/en/smart-05-06.jpg\" alt=\"\"></p>\n<p>Click the red &quot;Run Blocks&quot; button when you want to run the stack. Now the board can detect the light around it and you can see the reaction on the RGB LED. (Check your stack setup with this example here: <a href=\"http://blockly.webduino.io/?lang=en#-KZsqOgRlPNHzfwWfw0H\">http://blockly.webduino.io/?lang=en#-KZsqOgRlPNHzfwWfw0H</a></p>\n<p><img src=\"../../img/tutorials/smart-05-07.gif\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"code-explanation\">Code Explanation</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of HTML. The purpose is to allow the browser to support all the components of Web Components and Webduino. If the JavaScript is created by Blockly editing tools, <code>webduino-blockly.js</code> should be included.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>We use WebSocket transport:  <code>{transport: &#39;websocket&#39;, url: &#39;192.168.8.115&#39;}</code> here, with <code>.on()</code> to start detecting, and the property <code>.detectedVal</code> to get its detected value.</p>\n<pre><code>var photocell;\n\nboardReady({transport: &#39;websocket&#39;, url: &#39;192.168.8.115&#39;}, function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  photocell = getPhotocell(board, 0);\n  photocell.on(function(val){\n    photocell.detectedVal = val;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = photocell.detectedVal;\n  });\n});\n</code></pre><p>That&#39;s it for using the photocell with the Webduino Smart.\nWebduino Bin: <a href=\"http://bin.webduino.io/luxu/edit?html,css,js,output\">http://bin.webduino.io/luxu/edit?html,css,js,output</a>\nStack setup: <a href=\"http://blockly.webduino.io/?lang=en#-KZsqyEhaMB-2RMNi2B2\">http://blockly.webduino.io/?lang=en#-KZsqyEhaMB-2RMNi2B2</a></p>\n<!-- <div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"smart-06-button":{"tag":"smart","src":"smart-06-button.html","title":"Button Switch of the Webduino Smart","banner":"smart-06-button.jpg","img":"smart-06-button-s.jpg","date":20161120,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Button Switch of the Webduino Smart\n :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"There is a built-in Micro button switch on the side of the Webduino Smart. We can use this button switch to execute “Pressed”, “Released”, or “Long-pressed” actions to further control electronic components or HTML elements.\">\n\n<meta itemprop=\"description\" content=\"There is a built-in Micro button switch on the side of the Webduino Smart. We can use this button switch to execute “Pressed”, “Released”, or “Long-pressed” actions to further control electronic components or HTML elements.\">\n\n<meta property=\"og:description\" content=\"There is a built-in Micro button switch on the side of the Webduino Smart. We can use this button switch to execute “Pressed”, “Released”, or “Long-pressed” actions to further control electronic components or HTML elements.\">\n\n<meta property=\"og:title\" content=\"Button Switch of the Webduino Smart\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-06-button.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-06-button-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-06-button-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"button-switch-of-the-webduino-smart\">Button Switch of the Webduino Smart</h1>\n<p>There is a built-in Micro button switch on the side of the Webduino Smart. We can use this button switch to execute &quot;Pressed&quot;, &quot;Released&quot;, or &quot;Long-pressed&quot; actions to further control electronic components or HTML elements.</p>\n<p>The button switch is connected to pin 4 by default. Pin 4 can be used for signal output when the button switch is not in use.</p>\n<p><img src=\"../../img/tutorials/smart-06-02.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/index.html?lang=en\">Webduino Blockly editor</a>. First, place a &quot;Board&quot; block onto the workspace, choose WebSocket in the drop-down list, and fill in the IP address of your board. <strong>Remember to use the &quot;http&quot; protocol when you are using WebSocket, not &quot;https&quot;.</strong></p>\n<p>Add a &quot;Button switch&quot; block to the stack and set the pin to 4. The button switch on Smart is a pull-up button switch. </p>\n<p><img src=\"../../img/tutorials/en/smart-06-03.jpg\" alt=\"\"></p>\n<p>Place three &quot;When button / do&quot; blocks into the stack. Then set three situations for when the button is &quot;Pressed&quot;, &quot;Released&quot;, and &quot;Long Pressed&quot;. The corresponding text will show in the Web Demo Area.    </p>\n<p><img src=\"../../img/tutorials/en/smart-06-04.jpg\" alt=\"\"></p>\n<p>Click the red &quot;Run Blocks&quot; button to run the stack. When you long press the button switch, you will see the number in Web Demo Area change. (Check your stack setup with this example here: <a href=\"http://blockly.webduino.io/?lang=en&amp;tags=smart#-KZtXIhS8ixkzhWZ12qW\">http://blockly.webduino.io/?lang=en&amp;tags=smart#-KZtXIhS8ixkzhWZ12qW</a>)</p>\n<p><br/></p>\n<h2 id=\"code-explanation\">Code Explanation</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of HTML. The purpose is to allow the browser to support all the components of Web Components and Webduino. If the JavaScript is created by Blockly editing tools, <code>webduino-blockly.js</code> should be included.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>We use WebSocket transport: <code>{transport: &#39;websocket&#39;, url: &#39;192.168.8.115&#39;}</code> here, with <code>.on()</code> to start listening to events. When it receives <code>pressed</code>, it means the button is pressed; When it receives <code>released</code>, it means the button is released; and when it receives <code>longPress</code>, it means the button is long-pressed. The function parameter after the event name is the callback that will be executed.</p>\n<pre><code>var button;\n\nboardReady({board: &#39;Smart&#39;, transport: &#39;websocket&#39;, url: &#39;192.168.8.115&#39;}, function (board) {\n  board.systemReset();\n  board.samplingInterval = 50;\n  button = getPullupButton(board, 4);\n  button.on(&quot;pressed&quot;, function(){\n    console.log(&quot;pressed&quot;);\n      document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = &#39;pressed&#39;;\n\n  });\n  button.on(&quot;released&quot;, function(){\n    console.log(&quot;released&quot;);\n      document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = &#39;released&#39;;\n\n  });\n  button.on(&quot;longPress&quot;, function(){\n    console.log(&quot;longPress&quot;);\n      document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = &#39;longPress&#39;;\n\n  });\n});\n</code></pre><p>That&#39;s it for using button saitchl with the Webduino Smart.\nWebduino Bin: <a href=\"http://bin.webduino.io/zuyug/edit?html,js,output\">http://bin.webduino.io/zuyug/edit?html,js,output</a>\nStack setup: <a href=\"http://blockly.webduino.io/?lang=en&amp;tags=smart#-KZtXIhS8ixkzhWZ12qW\">http://blockly.webduino.io/?lang=en&amp;tags=smart#-KZtXIhS8ixkzhWZ12qW</a></p>\n<!-- <div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"smart-07-button-youtube":{"tag":"smart","src":"smart-07-button-youtube.html","title":"Using a Button Switch for Playing Youtube Videos","banner":"smart-07-button-youtube.jpg","img":"smart-07-button-youtube-s.jpg","date":20161120,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Using a Button Switch for Playing Youtube Videos :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"In the previous tutorial, we learned the basic functions of the button switch with Webduino Smart. In this tutorial, we are going to learn an advanced application for the button switch, playing Youtube videos.\">\n\n<meta itemprop=\"description\" content=\"In the previous tutorial, we learned the basic functions of the button switch with Webduino Smart. In this tutorial, we are going to learn an advanced application for the button switch, playing Youtube videos.\">\n\n<meta property=\"og:description\" content=\"In the previous tutorial, we learned the basic functions of the button switch with Webduino Smart. In this tutorial, we are going to learn an advanced application for the button switch, playing Youtube videos.\">\n\n<meta property=\"og:title\" content=\"Using a Button Switch for Playing Youtube Videos\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-07-button-youtube.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-07-button-youtube-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-07-button-youtube-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"using-a-button-switch-for-playing-youtube-videos\">Using a Button Switch for Playing Youtube Videos</h1>\n<p>In the previous tutorial, we learned the basic functions of the button switch with Webduino Smart. In this tutorial, we are going to learn an advanced application for the button switch, playing Youtube videos.</p>\n<!-- <div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/index.html?lang=en\">Webduino Blockly editor</a>. First, place a &quot;Board&quot; block onto the workspace, choose WebSocket in the drop-down list, and fill in the IP address of your board. <strong>Remember to use the &quot;http&quot; protocol when you are using WebSocket, not &quot;https&quot;.</strong></p>\n<p>Add a &quot;Button switch&quot; block to the stack and set the pin to 4. Because the button switch on the Smart is a &quot;pull-up&quot; button switch, use the &quot;Pull-up button switch&quot; block.</p>\n<p><img src=\"../../img/tutorials/en/smart-07-02.jpg\" alt=\"\"></p>\n<p>Since we will need to import a Youtube video, add the &quot;Set youtube&quot; block from the &quot;Web Demo&quot; menu into the stack.  </p>\n<p><img src=\"../../img/tutorials/en/smart-07-03.jpg\" alt=\"\"></p>\n<p>To import the video, we need to know its ID. Open a Youtube video, and copy the text after &quot;?v=&quot;, this is the video&#39;s ID. The &quot;?v=&quot; should not be included in the ID.</p>\n<p><img src=\"../../img/tutorials/smart-07-04.jpg\" alt=\"\"> </p>\n<p>Paste the ID into the ID box in the Youtube block.</p>\n<p><img src=\"../../img/tutorials/en/smart-07-05.jpg\" alt=\"\"></p>\n<p>Add two &quot;When button&quot; blocks in the stack. We only need to set up two different situations, one is for when the button is &quot;pressed&quot;, and the other is when it is &quot;long pressed&quot;.</p>\n<p><img src=\"../../img/tutorials/en/smart-07-06.jpg\" alt=\"\"></p>\n<p>To create a logic process, add &quot;Set youtube status&quot; and &quot;Youtube status&quot; blocks to the stack.</p>\n<p><img src=\"../../img/tutorials/en/smart-07-07.jpg\" alt=\"\"></p>\n<p>It is a simple logic process; when the button is pressed, the video will play if it is not playing. And it will pause if the video if it is playing.</p>\n<p><img src=\"../../img/tutorials/en/smart-07-08.jpg\" alt=\"\"></p>\n<p>Open the Web Demo Area, and choose Youtube in the drop-down list. Click the red &quot;Run Blocks&quot; button to run the stack, and you will see the Youtube video imported and start to play. Then you can control the video by pressing the button. (Check your stack setup with this example here: <a href=\"http://blockly.webduino.io/?lang=en&amp;tags=smart#-KZtiB8OL4LxIj6wSLoP\">http://blockly.webduino.io/?lang=en&amp;tags=smart#-KZtiB8OL4LxIj6wSLoP</a>)</p>\n<p><img src=\"../../img/tutorials/en/smart-07-09.jpg\" alt=\"\">\n<img src=\"../../img/tutorials/en/smart-07-10.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of HTML. The purpose is to allow the browser to support all the components of Web Components and Webduino. If the JavaScript is created by Blockly editing tools, <code>webduino-blockly.js</code> should be included.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>First of all, in HTML, we use a div with id=&quot;youtube&quot; as the placeholder for the video that we will embed later on.</p>\n<pre><code>&lt;div id=&quot;player&quot;&gt;&lt;/div&gt;\n</code></pre><p>JavaScript codes starting with <code>boardReady</code> are basically the same, so we will start with the key parts that can be divided into sections.</p>\n<p>In the first section, we load the Youtube module with the official JavaScript API, including parameters for width, height, autoPlay, and player control. The <code>events</code> object handles which video to play when the module is ready (with function <code>onReady()</code>), or what we want to do when the player&#39;s state is changed. (with function <code>onPlayerStateChange()</code>)</p>\n<pre><code>var youtubePlay, youtubeStop, youtubePause;\nawait new Promise(function (resolve) {\n  var tag = document.createElement(&quot;script&quot;);\n  tag.src = &quot;https://www.youtube.com/iframe_api&quot;;\n  var scptTag = document.getElementsByTagName(&quot;script&quot;)[0];\n  scptTag.parentNode.insertBefore(tag, scptTag);\n  window.onYouTubeIframeAPIReady = function () {\n    youtube = new YT.Player(&quot;player&quot;, {\n      height: &quot;240&quot;,\n      width: &quot;96%&quot;,\n      playerVars: {\n        autoplay: 1,\n        controls: 1\n      },\n      events: {\n        onReady: function (evt) {\n          youtube.loadVideoById({\n            videoId:&quot;UKcTJeXjOmw&quot;\n          });\n          resolve();\n        },\n        onStateChange: onPlayerStateChange\n      }\n    });\n  };\n});\n\nfunction onPlayerStateChange(event) {\n  if(event.data == youtubeStop) {\n    youtubeStopCallback();\n  }else if(event.data == youtubePlay){\n    youtubePlayCallback();\n  }else if(event.data == youtubePause){\n    youtubePauseCallback();\n  }\n};\n</code></pre><p>When a button is pressed, video will react the corresponding event, which is set in the <code>youtube.getPlayerState()</code>.</p>\n<pre><code>button.on(&quot;pressed&quot;, async function(){\n  console.log(&quot;pressed&quot;);\n    if (youtube.getPlayerState() == 1) {\n    youtube.pauseVideo();\n  } else {\n    youtube.playVideo();\n  }\n\n});\nbutton.on(&quot;longPress&quot;, async function(){\n  console.log(&quot;longPress&quot;);\n    youtube.seekTo(0);\n  youtube.stopVideo();\n\n});\n</code></pre><p>This is for playing Youtube video with a micro button switch of Webduino Smart. \nWebduino Bin: <a href=\"http://bin.webduino.io/cute/edit?html,js,output\">http://bin.webduino.io/cute/edit?html,js,output</a>\nStack Setup: <a href=\"http://blockly.webduino.io/?lang=en&amp;tags=smart#-KZtjXkX58sVSg4PhI9Q\">http://blockly.webduino.io/?lang=en&amp;tags=smart#-KZtjXkX58sVSg4PhI9Q</a></p>\n<!-- <div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-01-led":{"tag":"tutorial","src":"tutorial-01-led.html","title":"Control a Single LED","banner":"tutorial-01-01.jpg","img":"tutorial-01-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 1: Control a Single LED :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Controlling a single LED is easy and also useful for observing any programming mistakes. Therefore, we use the LED as our first Webduino tutorial.\">\n\n<meta itemprop=\"description\" content=\"Controlling a single LED is easy and also useful for observing any programming mistakes. Therefore, we use the LED as our first Webduino tutorial.\">\n\n<meta property=\"og:description\" content=\"Controlling a single LED is easy and also useful for observing any programming mistakes. Therefore, we use the LED as our first Webduino tutorial.\">\n\n<meta property=\"og:title\" content=\"Project Example 1: Control a Single LED\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-01-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-01-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-01-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-1-control-a-single-led\">Project Example 1: Control a Single LED</h1>\n<p>Controlling a single LED is easy and also useful for observing any programming mistakes. Therefore, we use the LED as our first Webduino tutorial. </p>\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- Open the Webduino Blockly for exclusive use of Project Example: [Webduino Blockly Chapter 1-2 : Click the image control LED](https://blockly.webduino.io/?lang=en&&page=tutorials/led-2#-KTOLwx9N81L7ng_37l4)   -->\n<p>Watch the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/8k6Lqu-aqVM\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>There are long and short legs on an LED. The long leg should be connected to a &quot;high potential&quot; (a position with a number) and the short leg should be connect to a &quot;low potential&quot; (the GND or Ground). The only setup needed is to plug the LED legs into their positions on the Webduino board or with a breadboard or breadline. <strong>Here the long leg goes into 10 and the short leg goes into GND.</strong></p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-01-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-01-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-01-03.jpg\" alt=\"\"></p>\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open Webdunio Blockly: <a href=\"https://blockly.webduino.io/?lang=en\">https://blockly.webduino.io/?lang=en</a> For this tutorial, we will use a picture of a light bulb to control the LED. First, click the &quot;Web Demo Area&quot; button on the upper right side of the workspace. Then, select &quot;Click Bulb&quot; from the drop-down menu. A webpage with choices of light bulbs will appear.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-01-04.jpg\" alt=\"\"></p>\n<p>Drag a &quot;Board&quot; block from the side menu into the workspace. Then type in the name of your Webduino board. Next, find the &quot;Set LED&quot; block under the &quot;Components&quot; menu and drop the block into the blank connection of &quot;Board&quot; block. Then set the &quot;pin&quot; to 10 (because the LED&#39;s long leg was connected to pin 10)  </p>\n<p><img src=\"../../img/tutorials/en/tutorial-01-05.jpg\" alt=\"\"></p>\n<p>The LED has to interact with a web page, so select &quot;Click Bulb&quot; under the &quot;Web Demo Area&quot; menu in the sidebar and drag the &quot;Click Bulb&quot;, do block to the workspace. This is so you can switch the LED light on and off when you click the picture of the light bulb.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-01-06.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/en/tutorial-01-07.jpg\" alt=\"\"></p>\n<p>Now, find an &quot;If / Do&quot; logic block under the &quot;Standard&quot; menu and add it to the stack. This will create an &quot;If / then&quot; action for when the &quot;Light Bulb&quot; is clicked. You can edit the &quot;Logic&quot; options clicking the blue gear on the &quot;If / Do&quot; logic block.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-01-08.jpg\" alt=\"\"></p>\n<p>If you use the setup shown below, when the &quot;Bulb&quot; is &quot;on&quot;, the &quot;Click Bulb&quot; will turn off. When the &quot;Bulb&quot; is off, the &quot;Click Bulb&quot; will turn on. </p>\n<p><img src=\"../../img/tutorials/en/tutorial-01-09.jpg\" alt=\"\"></p>\n<p>After you finish creating the block stack, check your device&#39;s status (Check <a href=\"https://webduino.io/device.html\">device&#39;s Status</a>) before you press the button &quot;Run Blocks&quot; on the upper right hand side.</p>\n<p><img src=\"../../img/tutorials/tutorial-01-10.jpg\" alt=\"\"></p>\n<p>You can easily control the intensity of the LED by clicking the picture of the light bulb in the &quot;Web Demo Area&quot;. You can also select the &quot;JavaScript&quot; tab to review the original codes. Copy the codes and paste them to your own code editor and you can do the same exercise. \nCheck your stack setup with this example here: <a href=\"https://blockly.webduino.io/?lang=en#-KTONX73Xz695wEu03DI\">https://blockly.webduino.io/?lang=en#-KTONX73Xz695wEu03DI</a></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/nixad/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>In the body of HTML, insert a div for placing images with the ID: &quot;demo-area-02-light&quot;. In order to show the light bulb changing, there are 2 images of light bulbs; one with the light on and the other on with the light off.</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>We use the CSS rule <code>display:none</code> to control the light-on and light-off images. Below are the CSS codes.</p>\n<pre><code>#demo-area-02-light img{\n  height:200px;\n  display:none;\n}\n#demo-area-02-light.on #demo-area-02-on{\n  display:inline-block;\n}\n#demo-area-02-light.off #demo-area-02-off{\n  display:inline-block;\n}\n</code></pre><p>For the most critical JavaScript step we start by using <code>boardReady()</code>. The callback function will be executed when the board goes on-line. Then, you must set up a variable named led and use <code>getLed()</code> to set the pin number to 10. Finally, bind the event by clicking the images to control the LED with its API.</p>\n<pre><code>var led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  led = getLed(board, 10);\n  document.getElementById(&quot;demo-area-02-light&quot;).addEventListener(&quot;click&quot;,function(){\n    if (document.getElementById(&quot;demo-area-02-light&quot;).className == &quot;on&quot;) {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n      led.off();\n    } else {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n      led.on();\n    }\n  });\n});\n</code></pre><p>Because codes are automatically generated by Webduino Blockly, there might be some duplicated and superfluous codes. To simplify the codes, we replaced <code>document.getElementById(&quot;demo­area­02­light&quot;)</code> with one single variable: light.</p>\n<pre><code>var led;\nvar light;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  led = getLed(board, 10);\n    light = document.getElementById(&quot;demo-area-02-light&quot;);\n  light.addEventListener(&quot;click&quot;,function(){\n    if (light.className == &quot;on&quot;) {\n      light.className = &quot;off&quot;;\n      led.off();\n    } else {\n      light.className = &quot;on&quot;;\n      led.on();\n    }\n  });\n});\n</code></pre><p>This was the example of how to control an LED by clicking the picture of a light bulb. We hope you enjoyed it!\nWebduino Bin: <a href=\"http://bin.webduino.io/nixad/edit?html,css,js,output\">http://bin.webduino.io/nixad/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KTOMwa9xRlCNapn4VUe\">https://blockly.webduino.io/?lang=en#-KTOMwa9xRlCNapn4VUe</a></p>\n<!-- ## Extension Tutorials of LED\n\n[Webduino Blockly Chapter 1-1: LED ON](https://blockly.webduino.io/?lang=en&page=tutorials/led-1#-KTOMd8SXBiiJ21hoifg)  \n[Webduino Blockly Chapter 1-2: Click the image control LED](https://blockly.webduino.io/?lang=en&page=tutorials/led-2#-KTOMnwjhojfCNNtlYue) -->\n<!-- @@close-->"},"tutorial-03-rgbled":{"tag":"tutorial","src":"tutorial-03-rgbled.html","title":"Controlling an RGB LED","banner":"tutorial-03-01.jpg","img":"tutorial-03-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 3: Controlling an RGB LED :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"RGB LEDs are made of three LEDs, one red, one green and one blue, so they can produce at least three colors. Within the three LED lights of an RGB LED, there are 4 pins; VCC, R(red), G(green), and B(blue). We can control the strength of each of these colors, allowing for a wide range of colors. This tutorial will walk you through how to set up and use a RGB LED, and the next chapter will expand on ways to use the RGB LED as a palette to create any color you wish.\">\n\n<meta itemprop=\"description\" content=\"RGB LEDs are made of three LEDs, one red, one green and one blue, so they can produce at least three colors. Within the three LED lights of an RGB LED, there are 4 pins; VCC, R(red), G(green), and B(blue). We can control the strength of each of these colors, allowing for a wide range of colors. This tutorial will walk you through how to set up and use a RGB LED, and the next chapter will expand on ways to use the RGB LED as a palette to create any color you wish.\">\n\n<meta property=\"og:description\" content=\"RGB LEDs are made of three LEDs, one red, one green and one blue, so they can produce at least three colors. Within the three LED lights of an RGB LED, there are 4 pins; VCC, R(red), G(green), and B(blue). We can control the strength of each of these colors, allowing for a wide range of colors. This tutorial will walk you through how to set up and use a RGB LED, and the next chapter will expand on ways to use the RGB LED as a palette to create any color you wish.\">\n\n<meta property=\"og:title\" content=\"Project Example 3: Controlling an RGB LED \" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-03-rgbled.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-03-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-03-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-3-controlling-an-rgb-led\">Project Example 3: Controlling an RGB LED</h1>\n<p>RGB LEDs are made of three LEDs, one red, one green and one blue, so they can produce at least three colors. Within the three LED lights of an RGB LED, there are 4 pins; VCC, R(red), G(green), and B(blue). We can control the strength of each of these colors, allowing for a wide range of colors. This tutorial will walk you through how to set up and use a RGB LED, and the next chapter will expand on ways to use the RGB LED as a palette to create any color you wish.</p>\n<!-- <div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?page=tutorials/rgbled-2](https://blockly.webduino.io/?page=tutorials/rgbled-2)  --> \n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/VN4sKngbiGI\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>We use the PWM (Pulse Width Modulation) pin to control the RGB LED. This gives us analog results from digital means, thus allowing us to control the output of the signal, resulting in different color combinations. The PWM pins on the Webduino are 3, 5, 6, 9, 10, 11, but since you might be using a different development board, always remember to check first. (Most Arduino boards will have a &quot;~&quot; sign to show where the PWM pins are.)</p>\n<p>We use jumper wires, or Dupont lines (male to female), to connect the LEDs, connecting V to 3.3v (thus preventing high voltage and causing the RGB LED to emit a dim light), R connects to 10, B connects to 6, and G to 9. If these pins are already in use, you can also use the other PWM pins (3, 5, 11).</p>\n<p>Webduino Mark 1 Circuit diagram: </p>\n<p><img src=\"../../img/tutorials/tutorial-03-02.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>Webduino Fly Circuit diagram: </p>\n<p><img src=\"../../img/tutorials/tutorial-03-02-fly.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-03-04.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p><img src=\"../../img/tutorials/tutorial-03-03.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<!-- <div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Begin by opening the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>. We will be using the &quot;Click button&quot; for control. Click on the &quot;Web Demo Area&quot; button on the top right, and click the &quot;Click Button&quot; from the pull-down menu. You will see 5 buttons that we will be clicking to create 5 different colors.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-03-05.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>To control these buttons, use the &quot;Click button do&quot; block from &quot;Web Demo&quot; on the left side menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-03-06.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>First we place a &quot;Board&quot; into the workspace, choose the correct Board name, place an &quot;RGB LED&quot; block into the stack, set the name to rgbled, and set the Red pin to 10, Green to 9, and Blue to 6. (RGB LED blocks only allow PWM pins to be chosen)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-03-07.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>Then you can set which color maps to which button, by adding multiple &quot;Click button do&quot; blocks with a &quot;rgbled set color&quot; block connected to each. If you set the color to &quot;black&quot;, the RGB LED will not produce a color, basically turning it off.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-03-08.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>After you&#39;ve finished these steps, check your <a href=\"https://webduino.io/device.html\">device&#39;s status</a> to see that the board is online. To do this, you can click the &quot;Check Device Status&quot; button on the upper-right. When you click on the red &quot;Run Blocks&quot; button, you can click the different buttons on the screen and you will see the RGB LED produce different colors. You can also click on the JavaScript tab, and see the full code. Copy and paste the code to your own editor and you&#39;ll be able to control RGBLEDs!  </p>\n<p>Check your stack setup with this example here: <a href=\"https://blockly.webduino.io/?lang=en#-KYD5Dnd5-rEY7UAcvkn\">https://blockly.webduino.io/?lang=en#-KYD5Dnd5-rEY7UAcvkn</a> </p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/hugos/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>There are five different buttons inside the body of the HTML file, the names of the buttons are 1 to 5, each button is set to a unique ID, allowing us to control the button class with each ID in JavaScript. If you&#39;re using the default settings, then you won&#39;t need to spend time on CSS.</p>\n<pre><code>&lt;button id=&quot;demo-area-05-btn1&quot; class=&quot;db5&quot;&gt;按鈕 1&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn2&quot; class=&quot;db5&quot;&gt;按鈕 2&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn3&quot; class=&quot;db5&quot;&gt;按鈕 3&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn4&quot; class=&quot;db5&quot;&gt;按鈕 4&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn5&quot; class=&quot;db5&quot;&gt;按鈕 5&lt;/button&gt;\n</code></pre><p>We use <code>addEventListener</code> in Javascript to listen (and respond) to <code>click</code>, and using <code>setColor</code> to set the RGB LED. Inside we use 16 bit color (decimals are also supported), this way we can create colors easily.</p>\n<pre><code>var rgbled;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  rgbled = getRGBLed(board, 10, 9, 6);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#ff0000&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#3333ff&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#009900&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#ffcc66&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn5&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#000000&#39;);\n  });\n});\n</code></pre><p>Now you know how to control a RGB LED when you click on different buttons! \nWebduino Bin: <a href=\"http://bin.webduino.io/cibit/edit?html,css,js,output\">http://bin.webduino.io/cibit/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KYD7W3h54sepEzzQUFA\">https://blockly.webduino.io/?lang=en#-KYD7W3h54sepEzzQUFA</a></p>\n<!-- ## 三色 LED 的延伸教學：\n\n[Webduino Blockly 課程 2-1：三色 LED 燈](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/rgbled-1#-JvMrEKwwqW2P607oFz2)  \n[Webduino Blockly 課程 2-2：三色 LED 燈切換顏色](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/rgbled-2#-JvMroBFx1XYaMemJmOm)\n\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-04-rgbled-palette":{"tag":"tutorial","src":"tutorial-04-rgbled-palette.html","title":"Creating colors with an RGB LED","banner":"tutorial-04-01.jpg","img":"tutorial-04-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 4: Creating colors with an RGB LED  :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"In our last tutorial we explained how an RGB LED works, in this tutorial we will use HTML5's new input type “color” to control the color of an RGB LED and also how to show the selected color on a device’s screen.\">\n\n<meta itemprop=\"description\" content=\"In our last tutorial we explained how an RGB LED works, in this tutorial we will use HTML5's new input type “color” to control the color of an RGB LED and also how to show the selected color on a device’s screen.\">\n\n<meta property=\"og:description\" content=\"In our last tutorial we explained how an RGB LED works, in this tutorial we will use HTML5's new input type “color” to control the color of an RGB LED and also how to show the selected color on a device’s screen.\">\n\n<meta property=\"og:title\" content=\"Project Example 4: Creating colors with an RGB LED \" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-04-rgbled-palette.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-04-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-04-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-4-creating-colors-with-an-rgb-led\">Project Example 4: Creating colors with an RGB LED</h1>\n<p>In our <a href=\"tutorial-03-rgbled.html\">last tutorial</a> we explained how an RGB LED works, in this tutorial we will use HTML5&#39;s new input type &quot;color&quot; to control the color of an RGB LED and also how to show the selected color on a device&#39;s screen. (In the video tutorial we show how to use the &quot;range&quot; input.)</p>\n<!-- <div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?lang=en&&page=tutorials/rgbled-3#-KYDD9HAolfWTnqQGkin](https://blockly.webduino.io/?lang=en&&page=tutorials/rgbled-3#-KYDD9HAolfWTnqQGkin)  -->\n<p>Watch the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/uSfBbvd4ViE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>As in the last tutorial, we will use jumper wires (male to female) to connect the LEDs. Connect V to 3.3v (thus preventing high voltage causing the RGB LED to emit a dim light), R (red) to 10, B (blue) to 6 and G (green) to 9. If these pins are already in use, you can also use the other PWM pins 3, 5, and 11.</p>\n<p>Webduino Mark 1 Circuit Diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-04-02.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p>Webduino Fly Circuit Diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-04-02-fly.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-04-04.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p><img src=\"../../img/tutorials/tutorial-04-03.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<!-- <div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>, where we will also be using the &quot;Area Color&quot; to control the color. Start by clicking on the &quot;Ｗeb Demo Area&quot; button, then click the &quot;Area Color&quot; from the drop-down menu. This will show a popup window with a color picker and an area that shows the current color. When our stack is completed you will see the same color on the RGB LED that shows here.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-04-05.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p>First, place a &quot;Board&quot; block into the workspace, select your Board&#39;s name, and place an &quot;RGB LED&quot; block into the stack. Set the &quot;RGB LED&quot; block to rgbled, and set Red to 10, Green to 9, and Blue to 6. Next place a &quot;Chose color, do:&quot;&quot; block from the &quot;Web Demo; Area Color&quot; menu so we can set the color of the area and the color of the RGB LED. Inside the &quot;Choose color, do:&quot;&quot; block add a &quot;Set area&#39;s color&quot; block with a &quot;Color&quot; block connected to that, and also a &quot;rgbled set color&quot; block with another &quot;Color&quot; block attached.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-04-07.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p>After you&#39;ve finished the previous steps, check your <a href=\"https://webduino.io/device.html\">device&#39;s status</a> to see if the board is online by clicking &quot;Check Device Status&quot;. When you click on the red &quot;Run Blocks&quot; button, you can click on the different buttons on your screen and you will see the RGB LED produce different colors. \nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KYDGA3tzgXHKNVDlqL-\">https://blockly.webduino.io/?lang=en#-KYDGA3tzgXHKNVDlqL-</a></p>\n<p><img src=\"../../img/tutorials/en/tutorial-04-08.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/vigib/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a> )</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>There are only two things inside the body of our HTML file. One is the input &quot;type&quot; set to &quot;color&quot;, the other is a div that shows the color.</p>\n<pre><code>choose color: &lt;input id=&quot;demo-area-04-color&quot; type=&quot;color&quot;&gt;\n&lt;div id=&quot;demo-area-04-area&quot;&gt;&lt;/div&gt;\n</code></pre><p>As for JavaScript, we use &quot;oninput&quot; to send the color value to area color and the RGB LED.</p>\n<pre><code>var rgbled;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  rgbled = getRGBLed(board, 10, 9, 6);\n  document.getElementById(&quot;demo-area-04-color&quot;).oninput = function(_color){\n  _color = this.value;\n    document.getElementById(&quot;demo-area-04-area&quot;).style.background = _color;\n    rgbled.setColor(_color);\n  };\n});\n</code></pre><p>Now you know how to create colors with an RGB LED and set a webpage to show the same color!\nWebduino Bin: <a href=\"http://bin.webduino.io/yuje/edit?html,css,js,output\">http://bin.webduino.io/yuje/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KYIF4mKW6zCYQHOMmsm\">https://blockly.webduino.io/?lang=en#-KYIF4mKW6zCYQHOMmsm</a></p>\n<!-- ## 三色 LED 的延伸教學：\n\n[Webduino Blockly 課程 2-3：三色 LED 燈調色盤](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/rgbled-3#-JvMsJupKMuIUdAJs_RK)  \n[Webduino Blockly 課程 2-4：轉吧七彩霓虹燈](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/rgbled-4#-JvMswgK2Q1h4GjAPx7u)\n\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-05-ultrasonic":{"tag":"tutorial","src":"tutorial-05-ultrasonic.html","title":"Use An Ultrasonic Sensor","banner":"tutorial-05-01.jpg","img":"tutorial-05-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 5: Use An Ultrasonic Sensor :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"In this example, we will use a HC-SR04 ultrasonic sensor. A HC-SR04 sensor emits an ultrasonic sound that travels through the air and  will bounce off the nearest object and travel back to the module. If you calculate the travel time and the speed of the sound you can calculate the distance of the object. HC-SR04 has 4 pins, GND, VCC, Trig, and Echo. Using the Tirg pin will send out a sonic burst which will then be received by the Echo pin. The Echo pin will output a value in centimeters for the distance of the object. There is a possibility of some inaccuracy, which occurs if the sound is bounced in other directions or it is partially absorbed by the object.\">\n\n<meta itemprop=\"description\" content=\"In this example, we will use a HC-SR04 ultrasonic sensor. A HC-SR04 sensor emits an ultrasonic sound that travels through the air and  will bounce off the nearest object and travel back to the module. If you calculate the travel time and the speed of the sound you can calculate the distance of the object. HC-SR04 has 4 pins, GND, VCC, Trig, and Echo. Using the Tirg pin will send out a sonic burst which will then be received by the Echo pin. The Echo pin will output a value in centimeters for the distance of the object. There is a possibility of some inaccuracy, which occurs if the sound is bounced in other directions or it is partially absorbed by the object.\">\n\n<meta property=\"og:description\" content=\"In this example, we will use a HC-SR04 ultrasonic sensor. A HC-SR04 sensor emits an ultrasonic sound that travels through the air and  will bounce off the nearest object and travel back to the module. If you calculate the travel time and the speed of the sound you can calculate the distance of the object. HC-SR04 has 4 pins, GND, VCC, Trig, and Echo. Using the Tirg pin will send out a sonic burst which will then be received by the Echo pin. The Echo pin will output a value in centimeters for the distance of the object. There is a possibility of some inaccuracy, which occurs if the sound is bounced in other directions or it is partially absorbed by the object.\">\n\n<meta property=\"og:title\" content=\"Project Example 5: Use An Ultrasonic Sensor\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-05-ultrasonic.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-05-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-05-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-5-use-an-ultrasonic-sensor\">Project Example 5: Use An Ultrasonic Sensor</h1>\n<p>In this example, we will use a HC-SR04 ultrasonic sensor. A HC-SR04 sensor emits an ultrasonic sound that travels through the air and  will bounce off the nearest object and travel back to the module. If you calculate the travel time and the speed of the sound you can calculate the distance of the object. HC-SR04 has 4 pins, GND, VCC, Trig, and Echo. Using the Tirg pin will send out a sonic burst which will then be received by the Echo pin. The Echo pin will output a value in centimeters for the distance of the object. There is a possibility of some inaccuracy, which occurs if the  sound is bounced in other directions or it is partially absorbed by the object. </p>\n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>You can watch the video tutorial for more information. Next will give you step by step instructions for setting up and using the HC-SR04.\n<!-- Open the Webduino Blockly for exclusive use of Project Example Use An Ultrasonic Sensor [Webduino Blockly Chapter 3-1: UltraSonic](https://blockly.webduino.io/?lang=en&page=tutorials/ultrasonic-1#-KTO8RBnea4ru18uOmVD)   --></p>\n<p>Watch the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/e6gbwMUzSZ8\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"the-circuit\">The Circuit</h2>\n<p>The HC-SR04 Ultrasonic Module has 4 pins, GND, VCC, Trig and Echo. The VCC pin needs to be connected to the 3.3v or VCC pins on the Webduino board.The GND pin needs to be connected to its corresponding postition. The Tri and Echo pins can be connected to any I/O on the Webduino board. (Here we connect Trig and Echo pins to 11 and 10 respectively.)</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-05-02.jpg\" alt=\"Project Example 5: Use An Ultrasonic Sensor\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-05-02-fly.jpg\" alt=\"Project Example 5: Use An Ultrasonic Sensor\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-05-03.jpg\" alt=\"Project Example 5: Use An Ultrasonic Sensor\"></p>\n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the Webduino Blockly page by typing the address: <a href=\"https://blockly.webduino.io/?lang=en\">https://blockly.webduino.io/?lang=en</a> into your web browser. First, you will need to use the &quot;Web Demo Area&quot; to show the distance of the object. So click &quot;Web Demo Area&quot; and choose &quot;Show Text&quot; in the drop-down list.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-05-04.jpg\" alt=\"Project Example 5: Use An Ultrasonic Sensor\"></p>\n<p>You can also drag the blocks from the side menu, to adjust the text size, line height, and color in the web demo area.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-05-05.jpg\" alt=\"Project Example 5: Use An Ultrasonic Sensor\"></p>\n<p>Next, drag a &quot;Board&quot; block to the workspace and type in the name of your Webduino board. Click &quot;Sensors&quot; and combine the first two blocks from the Ultrasonic list. Make sure it is set to &quot;ultrasonic&quot;, Trig to &quot;11&quot;, Echo to &quot;10&quot;, and get distance every &quot;500&quot; ms (1/1000s). We suggest you set detect distance at least over 200 ms (1/1000s).</p>\n<p><img src=\"../../img/tutorials/en/tutorial-05-06.jpg\" alt=\"Project Example 5: Use An Ultrasonic Sensor\"></p>\n<p>Finally, add the last block by connecting the &quot;Show&quot; block from the &quot;Web Demo&quot; drop-down menu and the distance mesurment block from &quot;Ultra Sonic&quot; menu. Once you run the clocks, you will see the value of result show on web demo area.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-05-07.jpg\" alt=\"Project Example 5: Use An Ultrasonic Sensor\"></p>\n<p>Of course you can make the setup more complex. Using the &quot;If/Do&quot; logic block you can make the results to show in red if the ultra sonic burst bounces off and object from a distance further than 30 centimeters away. To do this, you can create the stack as seen below.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-05-08.jpg\" alt=\"Project Example 5: Use An Ultrasonic Sensor\"></p>\n<p>After you finish creating the block stack, check your &quot;<a href=\"https://webduino.io/device.html\">device&#39;s status</a>&quot; before you &quot;Run&quot; all the blocks. Then you can start checking the results of your ultrasonic sensor on web demo area!\nCheck your stack setup with this example here: <a href=\"https://blockly.webduino.io/?lang=en#-KTOCRJoAlOAcckHodj1\">https://blockly.webduino.io/?lang=en#-KTOCRJoAlOAcckHodj1</a></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/xinax/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header ofyour html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>We simply use a span tag to display the sensing result in text.</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;distance to display&lt;/span&gt;\n</code></pre><p>Here we use the JavaScript method <code>ping()</code>. Ping() takes one parameter, which points to the callback function that will be called when sensing the distance. (The result will also be stored in the <code>.distance</code> property.) Then we use an <strong>if else</strong> statement to display text in different colors, at different levels of distance.</p>\n<pre><code>var ultrasonic;\n\nboardReady(&#39;Webduino Board Name&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 11, 10);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ultrasonic.distance;\n    if (ultrasonic.distance &gt; 30) {\n      document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#ff0000&#39;;\n    } else {\n      document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#000000&#39;;\n    }\n  }, 500);\n});\n</code></pre><p>There are some codes that overlap Google Blockly. Therefore, we could use variables to do code cleanups. Check the following figure:</p>\n<pre><code>var ultrasonic;\nvar show;\n\nboardReady(&#39;Webduino Board Name&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 11, 10);\n  show = document.getElementById(&quot;demo-area-01-show&quot;);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    show.innerHTML = ultrasonic.distance;\n    if (ultrasonic.distance &gt; 30) {\n      show.style.color = &#39;#ff0000&#39;;\n    } else {\n      show.style.color = &#39;#000000&#39;;\n    }\n  }, 500);\n});\n</code></pre><p>This was the example of how to use an ultrasonic sensor to detect the distance of objects, we hope you enjoyed it!<br>Webduino Bin: <a href=\"http://bin.webduino.io/xinax/edit?html,css,js,output\">http://bin.webduino.io/xinax/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KTOOaAzodA1tSGy0riB\">https://blockly.webduino.io/?lang=en#-KTOOaAzodA1tSGy0riB</a></p>\n<!-- ## Tutorial Extension of Ultrasonic Sensor:\n\n[Webduino Blockly Chapter 3-1: UltraSonic](https://blockly.webduino.io/?lang=en&page=tutorials/ultrasonic-1#-KTOH8GVCpXt1STgTB2h) --> \n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-06-ultrasonic-imagesize":{"tag":"tutorial","src":"tutorial-06-ultrasonic-imagesize.html","title":"Manipulating image size with an Ultrasonic sensor","banner":"tutorial-06-01.jpg","img":"tutorial-06-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 6: Manipulating image size with an Ultrasonic sensor :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"By sending a distance value from an sensor and mapping it to the width of an image on a webpage, we can easily control the size of an image with an Ultrasonic sensor.\">\n\n<meta itemprop=\"description\" content=\"By sending a distance value from an sensor and mapping it to the width of an image on a webpage, we can easily control the size of an image with an Ultrasonic sensor.\">\n\n<meta property=\"og:description\" content=\"By sending a distance value from an sensor and mapping it to the width of an image on a webpage, we can easily control the size of an image with an Ultrasonic sensor.\">\n\n<meta property=\"og:title\" content=\"Project Example 6: Manipulating image size with an Ultrasonic sensor\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-06-ultrasonic-imagesize.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-06-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-06-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-6-manipulating-image-size-with-an-ultrasonic-sensor\">Project Example 6: Manipulating image size with an Ultrasonic sensor</h1>\n<p>In our <a href=\"tutorial-05-ultrasonic.html\">last tutorial</a> ,we learned how an Ultrasonic sensor works, now we will be able to apply that knowledge in this tutorial. By sending a distance value from an sensor and mapping it to the width of an image on a webpage, we can easily control the size of an image with an Ultrasonic sensor.</p>\n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?page=tutorials/ultrasonic-2](https://blockly.webduino.io/?page=tutorials/ultrasonic-2)  --> \n<p>Watch the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/NXJ3xmqHm8o\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>Just as we did in the last tutorial, connect the VCC pin on your board to 3.3v, Trig to 11, Echo to 10, and GND to GND. You can connect the Ultrasonic sensor directly to the Webduino board or use a breadboard to connect them with jumper wires.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-06-02.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-06-02-fly.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-06-03.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/index.html?lang=en\">Webduino Blockly editor</a> and click on the &quot;Web Demo Area&quot; button. Click on &quot;control image&quot; from the drop down menu, and you will see an image. We will control the image&#39;s size using the values that are measured by the Ultrasonic sensor.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-06-04.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>Place a &quot;Board&quot; block into the workspace, select your board&#39;s name. Place a &quot;Set Ultrasonic&quot; block in the stack, set name to ultrasonic, set Trig to 11, and Echo to 10. Then place a &quot;Get distance&quot; block under that and set it to sense every 500 ms (milliseconds). Place an &quot;Image Rotate&quot; block from &quot;Web Demo&quot; menu, which will control the angle of the image using the distance measured by the sensor. Make sure to replace the original &quot;0 value&quot; block with a &quot;Distance&quot; measure block.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-06-05.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>You can also control the width of the image with the distance measured from the Ultrasonic sensor by adding an &quot;Image width / height&quot; block into the &quot;Ultrasonic distance&quot; block. Replace the two number value block with &quot;Ultrasonic&#39;s Distance&quot; blocks.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-06-06.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>If you don&#39;t want a 1:1 ratio, create your own set of rules to map a relationship between the distance measured and the image. To make this change, add a function block found in the &quot;Math&quot; menu, adding an &quot;Ultrasonic&#39;s distance&quot; block and multiplying it by a certain number.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-06-07.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>After you&#39;re done with the previous steps, make sure the board is online by clicking &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;. Then click on the red &quot;Run Blocks&quot; button, wave your hands in front of the Ultrasonic sensor and you&#39;ll see the image to start to rotate or change in size!\n( Solution：<a href=\"https://blockly.webduino.io/?lang=en#-KYIEc-U7nGdDGduUMgj\">https://blockly.webduino.io/?lang=en#-KYIEc-U7nGdDGduUMgj</a> )</p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/zuxof/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>We have an image inside a div of the HTML file, both the image and the div have ids, allowing us to control with CSS or JavaScript.</p>\n<pre><code>&lt;div id=&quot;demo-area-03-container&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/webduino-logo.jpg&quot; id=&quot;demo-area-03-image&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>With CSS we define the width and length with the div. Do take note when we set <code>position: relative;</code> and the image inside is set to <code>position: absolute</code>, we can use <code>top</code> and <code>left</code> to set the image position from the location of the div. We also use <code>transform-origin</code> to define the center of the image, and we use <code>transition</code> to set how the image changes, in this case, we&#39;ve set it to 0.3 seconds.</p>\n<pre><code>#demo-area-03-container {\n  position: relative;\n  width: 150px;\n  height: 150px;\n}\n\n#demo-area-03-image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 150px;\n  height: 150px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  transform-origin: 75px 75px;\n  -webkit-transform-origin: 75px 75px;\n  -moz-transform-origin: 75px 75px;\n}\n</code></pre><p>As for JavaScript, all we&#39;ve done is take the value from <code>ping</code> (measured in cm) and maped it to the size of the image, just simple calculations.</p>\n<pre><code>var ultrasonic;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 11, 10);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    var imageWidth = ultrasonic.distance;\n    var imageHeight = (ultrasonic.distance * 1.5);\n    document.getElementById(&quot;demo-area-03-image&quot;).style.width = imageWidth+&quot;px&quot;;\n    document.getElementById(&quot;demo-area-03-image&quot;).style.height = imageHeight+&quot;px&quot;;\n  }, 500);\n});\n</code></pre><p>Now you&#39;ve learned how to use an Ultrasonic sensor to sense distances and change the size or angle of an image from that data!<br>Webduino Bin: <a href=\"http://bin.webduino.io/xoco/edit?html,css,js,output\">http://bin.webduino.io/xoco/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KYIBv4DWz3PaefLCJU4\">https://blockly.webduino.io/?lang=en#-KYIBv4DWz3PaefLCJU4</a></p>\n<!-- ## 超音波傳感器的延伸教學：\n\n[Webduino Blockly 課程 3-2：超音波傳感器改變圖片大小](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/ultrasonic-2#-JvS-qZVOxcFtjlMhYlP)  \n[Webduino Blockly 課程 3-3：超音波傳感器改變音量大小](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/ultrasonic-3#-JvS09LhPCGEY4M1-juO)  -->\n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-07-ultrasonic-led":{"tag":"tutorial","src":"tutorial-07-ultrasonic-led.html","title":"Controlling LEDs with an Ultrasonic sensor","banner":"tutorial-07-01.jpg","img":"tutorial-07-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 7: Controlling LEDs with an Ultrasonic sensor :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"For anyone writing C/C++ on Arduino, controlling an LED with an Ultrasonic sensor would be a no brainer, but connecting it to web? That's another story!If you've followed through the previous tutorials and have a good grasp on how the sensors work, you should be able to manipulate an LED with an Ultrasonic sensor pretty easily. Since everything is connected through the internet, whenever there is an action, the webpage you are interacting with will react such as changing the size of an image. This creates many possibilities  for future projects!\">\n\n<meta itemprop=\"description\" content=\"For anyone writing C/C++ on Arduino, controlling an LED with an Ultrasonic sensor would be a no brainer, but connecting it to web? That's another story!If you've followed through the previous tutorials and have a good grasp on how the sensors work, you should be able to manipulate an LED with an Ultrasonic sensor pretty easily. Since everything is connected through the internet, whenever there is an action, the webpage you are interacting with will react such as changing the size of an image. This creates many possibilities  for future projects!\">\n\n<meta property=\"og:description\" content=\"For anyone writing C/C++ on Arduino, controlling an LED with an Ultrasonic sensor would be a no brainer, but connecting it to web? That's another story!If you've followed through the previous tutorials and have a good grasp on how the sensors work, you should be able to manipulate an LED with an Ultrasonic sensor pretty easily. Since everything is connected through the internet, whenever there is an action, the webpage you are interacting with will react such as changing the size of an image. This creates many possibilities  for future projects!\">\n\n<meta property=\"og:title\" content=\"Project Example 7: Controlling LEDs with an Ultrasonic sensor\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-07-ultrasonic-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-07-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-07-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<p>#Project Example 7: Controlling LEDs with an Ultrasonic sensor</p>\n<p>For anyone writing C/C++ on Arduino, controlling an LED with an Ultrasonic sensor would be a no brainer, but connecting it to web? That&#39;s another story!</p>\n<p>If you&#39;ve followed through the previous tutorials and have a good grasp on how the sensors work, you should be able to manipulate an LED with an Ultrasonic sensor pretty easily. Since everything is connected through the internet, whenever there is an action, the webpage you are interacting with will react such as changing the size of an image. This creates many possibilities  for future projects!</p>\n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器與 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/pRMjbzPXWvw\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>We will be using the GND pin for both the Ultrasonic sensor and an LED, so grab a breadboard and some wires! Connect the VCC pin from the Ultrasonic sensor to 3.3v, Trig to 11, Echo to 10, GND to GND. Take another wire and connect the long leg of the LED to pin 9 and the short leg to GND. (Be very careful with this step and check your pins, since your Ultrasonic sensor may look different from the schematic shown here.)</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/en/tutorial-07-02-new.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/en/tutorial-07-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-07-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-07-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器與 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>We will be using &quot;Click Bulb&quot;, so that when the LED on the webpage lights up the actual LED will also light up. Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a> and click the &quot;Web Demo Area&quot; button on the top-right, then choose &quot;Click Bulb&quot; from the drop-down menu and you will see an image of a light bulb. We will be manipulating this photo with the distance measured from the Ultrasonic sensor.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-07-05.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block into the workspace, and select you Webduino board&#39;s name. Place a &quot;Set Ultrasonic&quot; block into the stack and set the name to ultrasonic, set Trig to 11 and Echo to 10. Then place a &quot;Set LED&quot; block under that, and set it to &quot;led&quot; and pin to 9.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-07-06.jpg\" alt=\"\"></p>\n<p>Add an &quot;Ultrasonic get distance&quot; block to calculate the distance every 500 ms (milliseconds). Now add the &quot;If do&quot; &quot;Logic&quot; block and set it to &quot;If do, else&quot;. Attach a &quot;Logic&quot; equation block to that and put in an &quot;Ultrasonic&#39;s distance&quot; block and  a number block set to 15. Make sure to set the logic equation to &quot;Less than&quot;. Last, add &quot;LED set state&quot; blocks and &quot;Set bulb&#39;s state&quot; blocks to the &quot;Do&quot; and &quot;Else&quot; sections of the logic block. Set each block to &quot;On&quot; and &quot;Off&quot; respectively. This will make it so that when the distance measured is less than 15 cm the LED will light up, as will the light bulb photo on the screen.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-07-07.jpg\" alt=\"\"></p>\n<p>After you&#39;re done building the stack make sure the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;), then click on the red execute button &quot;Run Blocks&quot;, wave your hands in front of the Ultrasonic sensor and you&#39;ll see the LED light up!\nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KYIQsWOluLmCzc7Mr7Q\">https://blockly.webduino.io/?lang=en#-KYIQsWOluLmCzc7Mr7Q</a> </p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/jezuh/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>Inside the HTML code you will find two light bulb images, one on and one off, we will control them with CSS. </p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>CSS sets the light bulb to light up when we set on, and vice versa.</p>\n<pre><code>#demo-area-02-light img {\n  height: 200px;\n  display: none;\n}\n\n#demo-area-02-light.on #demo-area-02-on {\n  display: inline-block;\n}\n\n#demo-area-02-light.off #demo-area-02-off {\n  display: inline-block;\n}\n</code></pre><p>With JavaScript we have an <code>if-else</code> statement inside the main function <code>ping</code>, which sets <code>led.on()</code> when &lt; 15.</p>\n<pre><code>var ultrasonic;\nvar led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 11, 10);\n  led = getLed(board, 9);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    if (ultrasonic.distance &lt; 15) {\n      led.on();\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n    } else {\n      led.off();\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n    }\n  }, 500);\n});\n</code></pre><p>There you have it, using Ultrasonic sensor to control LEDs to light up when a certain distance is sensed.<br>Webduino Bin: <a href=\"http://bin.webduino.io/suyey/edit?html,css,js,output\">http://bin.webduino.io/suyey/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KYITizP-S9nNVnCOudj\">https://blockly.webduino.io/?lang=en#-KYITizP-S9nNVnCOudj</a></p>\n<!-- ## 超音波傳感器的延伸教學：\n\n[Webduino Blockly 課程 3-2：超音波傳感器改變圖片大小](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/ultrasonic-2#-JvS-qZVOxcFtjlMhYlP)  \n[Webduino Blockly 課程 3-3：超音波傳感器改變音量大小](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/ultrasonic-3#-JvS09LhPCGEY4M1-juO) \n\n<div class=\"buy-this\">\n    <span>超音波傳感器與 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-08-ultrasonic-rgbled":{"tag":"tutorial","src":"tutorial-08-ultrasonic-rgbled.html","title":"Controlling RGB LEDs with an Ultrasonic Sensor","banner":"tutorial-08-01.jpg","img":"tutorial-08-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 8: Controlling RGB LEDs with an Ultrasonic Sensor :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"This project example should be a piece of cake after we learned how to control an LED with an Ultrasonic sensor in project example #7. This project uses an RGB LED to show different colors to represent the distance measured by the Ultrasonic sensor.\">\n\n<meta itemprop=\"description\" content=\"This project example should be a piece of cake after we learned how to control an LED with an Ultrasonic sensor in project example #7. This project uses an RGB LED to show different colors to represent the distance measured by the Ultrasonic sensor.\">\n\n<meta property=\"og:description\" content=\"This project example should be a piece of cake after we learned how to control an LED with an Ultrasonic sensor in project example #7. This project uses an RGB LED to show different colors to represent the distance measured by the Ultrasonic sensor.\">\n\n<meta property=\"og:title\" content=\"Project Example 8: Controlling RGB LEDs with an Ultrasonic Sensor\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-08-ultrasonic-rgbled.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-08-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-08-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-8-controlling-rgb-leds-with-an-ultrasonic-sensor\">Project Example 8: Controlling RGB LEDs with an Ultrasonic Sensor</h1>\n<p>This project example should be a piece of cake after we learned how to control an LED with an Ultrasonic sensor in project example #7. This project uses an RGB LED to show different colors to represent the distance measured by the Ultrasonic sensor.</p>\n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器與三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?page=tutorials/ultrasonic-4](https://blockly.webduino.io/?page=tutorials/ultrasonic-4)  -->\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/8lDL6_2io1Y\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>It seems as if we could plug the Ultrasonic sensor and RGB LED directly into the Webduino board, but the RGB LED needs to use the PWM pin, so it cannot connect to pin 7 or 8. Therefore, we will use a breadboard and jumper wires to connect our components. Connect the VCC pin on the Ultrasonic sensor to VCC, Trig to pin 7, Echo to pin8, and GND to GND. As for the RGB LED, connect the VCC to 3.3v, R(red) to pin 10, B(blue) to pin 6, and G(green) to pin 9.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-08-02.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-08-02-fly.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-08-03.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p><img src=\"../../img/tutorials/tutorial-08-04.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p><img src=\"../../img/tutorials/tutorial-08-05.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<!-- <div class=\"buy-this\">\n    <span>超音波傳感器與三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>. Click on &quot;Web Demo Area&quot; on the upper right hand corner and click &quot;Area Color&quot; from the drop-down menu. So later, when the Ultrasonic sensor measures different distances a color will show on screen and the RGB LED will also show the same color.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-08-06.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>Place the &quot;Board&quot; block inside the editor and fill in the name of your Webduino board. Place an &quot;UltraSonic&quot; board in the stack and set the name to &quot;ultrasonic&quot;, set the Trig pin to 7, and Echo to 8. Then place an &quot;RGB LED&quot; block in the stack and set the name to rgbled, red to 10, green to 9 and blue to 6.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-08-07.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>Place a &quot;get distance over every / do&quot; block in the stack and set to take measurements every 500 milliseconds, and place an &quot;if/do&quot; block from the &quot;Logic&quot; menu inside that. Since we will have many conditional statements when different distances are measured, place a couple of &quot;else if&quot; and &quot;else&quot; blocks inside that stack.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-08-08.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>We will use another 2 &quot;logic&quot; blocks, the &quot;and&quot; block, which will only run when both conditions are met.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-08-09.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>This way we can make four different combinations of ranges; &quot;0 to 10&quot;, &quot;10 to 20&quot;, &quot;20 to 30&quot;, and &quot;greater than 30&quot;.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-08-10.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>After you are done setting up the stack, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;), then click on the red execute button &quot;Run Blocks&quot;, wave your hand in front of the Ultrasonic sensor and you&#39;ll see the the Web Demo area and the RGB LED show different colors that correspond with the different distances of your hand! (Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZuAa5uJJaJa6y_0rrD\">https://blockly.webduino.io/?lang=en#-KZuAa5uJJaJa6y_0rrD</a>)</p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/noje/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a> )</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>The div inside of the HTML file displays the color on screen.</p>\n<pre><code>&lt;div id=&quot;demo-area-04-area&quot;&gt;&lt;/div&gt;\n</code></pre><p>The CSS code controls the size and default color of the div.</p>\n<pre><code>#demo-area-04-area {\n  width: 90%;\n  height: 150px;\n  background: #ccc;\n}\n</code></pre><p>Our JavaScript code uses a lot of <code>if</code>, <code>elseif</code>, and <code>else</code>, with &quot;and&quot; represented as <code>&amp;&amp;</code>. Using these conditional statements we show different colors at different distances.</p>\n<pre><code>var ultrasonic;\nvar rgbled;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 7, 8);\n  rgbled = getRGBLed(board, 10, 9, 6);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    if (ultrasonic.distance &gt; 0 &amp;&amp; ultrasonic.distance &lt;= 10) {\n      rgbled.setColor(&#39;#ff0000&#39;);\n      document.getElementById(&quot;demo-area-04-area&quot;).style.background = &#39;#ff0000&#39;;\n    } else if (ultrasonic.distance &gt; 10 &amp;&amp; ultrasonic.distance &lt;= 20) {\n      rgbled.setColor(&#39;#3333ff&#39;);\n      document.getElementById(&quot;demo-area-04-area&quot;).style.background = &#39;#3333ff&#39;;\n    } else if (ultrasonic.distance &gt; 20 &amp;&amp; ultrasonic.distance &lt;= 30) {\n      rgbled.setColor(&#39;#ffcc33&#39;);\n      document.getElementById(&quot;demo-area-04-area&quot;).style.background = &#39;#ffcc33&#39;;\n    } else {\n      rgbled.setColor(&#39;#000000&#39;);\n      document.getElementById(&quot;demo-area-04-area&quot;).style.background = &#39;#000000&#39;;\n    }\n  }, 500);\n});\n</code></pre><p>Now you&#39;ve learned how to use an Ultrasonic sensor to measure the distance and to display a color on your screen and with an RGB LED.<br>Webduino Bin: <a href=\"http://bin.webduino.io/noje/edit?html,css,js,output\">http://bin.webduino.io/noje/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZuAa5uJJaJa6y_0rrD\">https://blockly.webduino.io/?lang=en#-KZuAa5uJJaJa6y_0rrD</a></p>\n<!-- ## 超音波傳感器的延伸教學：\n\n[Webduino Blockly 課程 3-4：超音波傳感器控制三色 LED 燈顏色](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/ultrasonic-4#-JvS1HjBSLU7wbtmLxKB)  \n[Webduino Blockly 課程 3-6：超音波傳感器控制 Youtube 播放速度](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/ultrasonic-6#-JxEs_Z0dmBi0nu3Pylw)  \n[Webduino Blockly 課程 3-5：超音波傳感器控制 youtube 的音量](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/ultrasonic-5#-JwgqGd0PtGFPC8GNcfY) \n\n<div class=\"buy-this\">\n    <span>超音波傳感器與三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-09-button-led":{"tag":"tutorial","src":"tutorial-09-button-led.html","title":"Button Switch","banner":"tutorial-09-01.jpg","img":"tutorial-09-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 9: Button Switch :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Switches are common electronic components in our daily life. Using an on / off signal, we control different house appliances. This project example will show how to read the signal from a button switch and control an image on screen or turn on/off an LED.\">\n\n<meta itemprop=\"description\" content=\"Switches are common electronic components in our daily life. Using an on / off signal, we control different house appliances. This project example will show how to read the signal from a button switch and control an image on screen or turn on/off an LED.\">\n\n<meta property=\"og:description\" content=\"Switches are common electronic components in our daily life. Using an on / off signal, we control different house appliances. This project example will show how to read the signal from a button switch and control an image on screen or turn on/off an LED.\">\n\n<meta property=\"og:title\" content=\"Project Example 9: Button Switch\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-09-button-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-09-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-09-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-9-button-switch\">Project Example 9: Button Switch</h1>\n<p>Switches are common electronic components in our daily life. Using an on / off signal, we control different house appliances. This project example will show how to read the signal from a button switch and control an image on screen or turn on/off an LED.</p>\n<!-- <div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?page=tutorials/button-1](https://blockly.webduino.io/?page=tutorials/button-1)  -->\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Y2I42DsAov8\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>The Button Switch is a common component. When we press it, all 4 legs connect on the switch. To prevent shorting the circuit, connect a resistor to the circuit. Below we have a simple diagram showing how a button switch works.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-09-02.jpg\" alt=\"\"></p>\n<p>We can use the middle of a breadboard to connect our button switch. Place two legs on each side of the bread board. Then, connect a resistor on the side that connects to GND. This setup is called a pull-down resistor. If it is connected on the other side it’s a pull-up resistor.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-09-03.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-09-03-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-09-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-09-05.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>. We will use &quot;Show Text&quot; to display text when the switch button is on and off. So, click on &quot;Web Demo Area&quot; and choose &quot;Show Text&quot; from the drop-down menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-09-06.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block onto the workspace and fill in the name of your Webduino board. Place a &quot;Button Switch&quot; block in the stack, set name to button, and the pin to 11. Then place three &quot;When Button Is Pressed&quot; blocks inside that. Set one to &quot;Pressed&quot;, another to &quot;Released&quot;, and the last one to &quot;Long Pressed&quot;, this allows different actions to show different text.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-09-07.jpg\" alt=\"\"></p>\n<p>After you are done setting up the stack, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot; and see the text on the screen change! (Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZttZvcooB45E405Uyy\">https://blockly.webduino.io/?lang=en#-KZttZvcooB45E405Uyy</a>)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-09-08.jpg\" alt=\"\"></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/gujoy/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>In our HTML file the span controls the display of text.</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>In our JavaScript code we can see an &quot;on&quot; event for &quot;button&quot;. The first parameter is the action of a button, pressed, released and long pressed. The second parameter is a call function, write the actions you wish to perform inside this.</p>\n<pre><code>var button;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  button = getButton(board, 11);\n  button.on(&quot;pressed&quot;,function(){\n    console.log(&quot;pressed&quot;);\n      window.alert(&#39;AAA&#39;);\n  });\n  button.on(&quot;released&quot;,function(){\n    console.log(&quot;released&quot;);\n      window.alert(&#39;BBB&#39;);\n  });\n  button.on(&quot;longPress&quot;,function(){\n    console.log(&quot;longPress&quot;);\n      window.alert(&#39;CCC&#39;);\n  });\n});\n</code></pre><p>Now, this is how you change the text on screen by pressing, releasing, and long pressing a switch button.<br>Webduino Bin: <a href=\"http://bin.webduino.io/gujoy/edit?html,css,js,output\">http://bin.webduino.io/gujoy/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZtu6biVaOMkVAXRzTt\">https://blockly.webduino.io/?lang=en#-KZtu6biVaOMkVAXRzTt</a></p>\n<!-- ## 按鈕開關的延伸教學：\n\n[Webduino Blockly 課程 4-2：點擊按鈕開關增加數字](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/button-2#-JvWu7mS_OoeRvE-m6mD)  \n[Webduino Blockly 課程 4-3：點擊按鈕開關改變圖片位置](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/button-3#-JvWuaeLK-rrGi66lVIM)  \n[Webduino Blockly 課程 4-4：點擊按鈕開關玩賽跑小遊戲](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/button-4#-JvY90I0qUoJR2yi34lj)  \n[Webduino Blockly 課程 4-4：點擊按鈕開關玩賽跑小遊戲](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/button-4#-JvY90I0qUoJR2yi34lj) \n[Webduino Blockly 課程 4-5：點擊按鈕開關控制 Youtube](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/button-5#-JxJpqetsCxULbi4Iier) \n\n<div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-10-temperature-humidity-sensor":{"tag":"tutorial","src":"tutorial-10-temperature-humidity-sensor.html","title":"DHT Sensor","banner":"tutorial-10-01.jpg","img":"tutorial-10-01s.jpg","date":20150601,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 10: DHT Sensor :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"The DHT sensor is a basic digital temperature and humidity sensor. It uses a capacitive humidity sensor and a thermistor to measure the surrounding air, and generates a digital signal. The signal can be converted for practical and useful real-time analysis when connected to CSS, D3.js, Google Chart, or a databse. Let's see how it works!\">\n\n<meta itemprop=\"description\" content=\"The DHT sensor is a basic digital temperature and humidity sensor. It uses a capacitive humidity sensor and a thermistor to measure the surrounding air, and generates a digital signal. The signal can be converted for practical and useful real-time analysis when connected to CSS, D3.js, Google Chart, or a databse. Let's see how it works!\">\n\n<meta property=\"og:description\" content=\"The DHT sensor is a basic digital temperature and humidity sensor. It uses a capacitive humidity sensor and a thermistor to measure the surrounding air, and generates a digital signal. The signal can be converted for practical and useful real-time analysis when connected to CSS, D3.js, Google Chart, or a databse. Let's see how it works!\">\n\n<meta property=\"og:title\" content=\"Project Example 10: DHT Sensor\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-10-temperature-humidity-sensor.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-10-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-10-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-10-dht-sensor\">Project Example 10: DHT Sensor</h1>\n<p>The DHT sensor is a basic digital temperature and humidity sensor. It uses a capacitive humidity sensor and a thermistor to measure the surrounding air, and generates a digital signal. The signal can be converted for practical and useful real-time analysis when connected to CSS, D3.js, Google Chart, or a databse. Let&#39;s see how it works!</p>\n<!-- <div class=\"buy-this\">\n    <span>溫濕度傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- Open the Webduino Blockly for exclusive use of Project Example [Webduino Blockly Chapter 5-1: DHT](https://blockly.webduino.io/?lang=en&page=tutorials/dht-1#-KTOEE2WAS9owD92je8e) --> \n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/T8sZL-UaUP0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"the-circuit\">The Circuit</h2>\n<p>The DHT sensor has 4 pins, and the connections are simple. Connect the first pin to  the 3.3V power, the second pin to the IO 11 data input pin, and the right most pin to ground. Note that the third pin is N/C.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-10-02.jpg\" alt=\"\"></p>\n<p>You can connect the DHT sensor to either the Webduino Mark 1 or to a breadboard.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-10-03.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-10-03-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-10-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>溫濕度傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instruction-of-webduino-blockly\">Instruction of Webduino Blockly</h2>\n<p>Open the page: <a href=\"https://blockly.webduino.io/?lang=en\">https://blockly.webduino.io/?lang=en</a> to acces Webduino Blockly. First, you will need to use the &quot;Web Demo Area&quot; to demonstrate the value of temperature or humidity. So click &quot;Web Demo Area&quot; and choose &quot;Show Text&quot; in the drop-down list.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-10-05.jpg\" alt=\"\"></p>\n<p>Drag a &quot;board&quot; block into the workspace, and type in the name of your Webduino board. Combine a &quot;DHT sensor&quot; block, set the name as DHT, and set the &quot;pin&quot; to 11. Finally, set the DHT to detect temperature and humidity evey 1000ms.  </p>\n<p><img src=\"../../img/tutorials/en/tutorial-10-06.jpg\" alt=\"\"></p>\n<p>Each &quot;Show Text&quot; block has only one blank connection point; however, you need to create more blank connectors if you want to show both humidity and temperature values at the same time. Find the &quot;Create Text With&quot; block in the &quot;Standard&quot; drop down menu under &quot;Text&quot;, click the blue gear, and select the amount of blank connectors you&#39;ll need.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-10-07.jpg\" alt=\"\"></p>\n<p>Key in all the boxes as shown below.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-10-08.jpg\" alt=\"\"></p>\n<p>You can also adjust the text size and line height by using blocks. Here we set both values to 20.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-10-09.jpg\" alt=\"\"></p>\n<p>After you finish creating the block stack, check your &quot;<a href=\"https://webduino.io/device.html\">device&#39;s status</a>&quot; before you &quot;Run&quot; all of the blocks. Then you can start checking the results of your DHT sensor in the web demo area!\nCheck your stack setup with this example here: <a href=\"https://blockly.webduino.io/?lang=en#-KTO4n5BTnHAOczEhG5Z\">https://blockly.webduino.io/?lang=en#-KTO4n5BTnHAOczEhG5Z</a> </p>\n<p><img src=\"../../img/tutorials/en/tutorial-10-10.jpg\" alt=\"\"></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/qagoz/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>In HTML, we use a span tag for showing the results.</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>Then we use the JavaScript method <code>read()</code> for measuring temperature and humidity. The first parameter of <code>read()</code> points to the callback function. The second parameter represents the time interval, which is 1000 ms, in this case. Finally we use innerHTML to display the text and <code>style</code> to change the line height and font size.  </p>\n<pre><code>var dht;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  dht = getDht(board, 11);\n  document.getElementById(&quot;demo-area-01-show&quot;).style.fontSize = 20+&quot;px&quot;;\n  document.getElementById(&quot;demo-area-01-show&quot;).style.lineHeight = 20+&quot;px&quot;;\n  dht.read(function(evt){\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ([&#39;temperature: &#39;,dht.temperature,&#39;degrees, &#39;,&#39;humidity: &#39;,dht.humidity,&#39;%&#39;].join(&#39;&#39;));\n  }, 1000);\n});\n</code></pre><p>This was the example of how to use DHT sensor to detect the humidity and temperature, we hope you enjoyed it!<br>Webduino Bin: <a href=\"http://bin.webduino.io/qagoz/edit?html,css,js,output\">http://bin.webduino.io/qagoz/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KTqnuEmMqhLVNMvGY5h\">https://blockly.webduino.io/?lang=en#-KTqnuEmMqhLVNMvGY5h</a></p>\n<!-- ## Tutorial Extension of DHT Sensor:\n\n[Webduino Blockly Chapter 5-2: Draw Area Chart](https://blockly.webduino.io/?lang=en&page=tutorials/dht-2#-KTOGoy4nuojm8tss-B5)  \n[Webduino Blockly Chapter 5-3: Use Firebase to Read and write dht data](https://blockly.webduino.io/?lang=en&page=tutorials/dht-3#-KTOGkah404mi0_Jower) -->\n<!-- <div class=\"buy-this\">\n    <span>溫濕度傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-11-shock-button":{"tag":"tutorial","src":"tutorial-11-shock-button.html","title":"Using a Shake Switch to change values","banner":"tutorial-11-01.jpg","img":"tutorial-11-01s.jpg","date":20150602,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 11: Using a Shake Switch to change values :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"The components of a Shake Switch, shown below, are a metal conductive spring, a metal conductive leg, and the outer case. The spring is a thin metal wire extending outside of the case, so when you shake it the insides short-circuit and it works like a button switch. Only the Shake Switch closes its circuit through movement.\">\n\n<meta itemprop=\"description\" content=\"The components of a Shake Switch, shown below, are a metal conductive spring, a metal conductive leg, and the outer case. The spring is a thin metal wire extending outside of the case, so when you shake it the insides short-circuit and it works like a button switch. Only the Shake Switch closes its circuit through movement.\">\n\n<meta property=\"og:description\" content=\"The components of a Shake Switch, shown below, are a metal conductive spring, a metal conductive leg, and the outer case. The spring is a thin metal wire extending outside of the case, so when you shake it the insides short-circuit and it works like a button switch. Only the Shake Switch closes its circuit through movement.\">\n\n<meta property=\"og:title\" content=\"Project Example 11: Using a Shake Switch to change values\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/ttutorial-11-shock-button.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-11-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-11-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-11-using-a-shake-switch-to-change-values\">Project Example 11: Using a Shake Switch to change values</h1>\n<p>The components of a Shake Switch, shown below, are a metal conductive spring, a metal conductive leg, and the outer case. The spring is a thin metal wire extending outside of the case, so when you shake it the insides short-circuit and it works like a button switch. Only the Shake Switch closes its circuit through movement.</p>\n<!-- <div class=\"buy-this\">\n    <span>震動開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<p><img src=\"../../img/tutorials/en/tutorial-11-07.jpg\" alt=\"\"></p>\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?page=tutorials/shock-1](https://blockly.webduino.io/?page=tutorials/shock-1)  -->\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Xv85frAw4uI\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>The Shake Switch has a thick leg and a thin leg. Connect the thick leg to pin 11 and the thin leg to 3.3V. As always, to prevent a short circuit, add a resistor to the circuit, following the image below make the connection to GND. When the Shake Switch is connected to a breadboard you might worry that the thin leg isn&#39;t properly connected, simply place the switch&#39;s legs into the breadboard and it will connect.</p>\n<p>Webduino Mark 1 Circuit diagram:\n<img src=\"../../img/tutorials/tutorial-11-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:\n<img src=\"../../img/tutorials/tutorial-11-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-11-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-11-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>震動開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blocky editor</a>. This project example will use &quot;Show Text&quot; to show a value when the Shake Switch is moved and the values will continue to display while the switch is activated. Click on the &quot;Web Demo Area&quot; on the upper right hand corner and choose &quot;Show Text&quot; from the drop down menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-11-09.jpg\" alt=\"\"></p>\n<p>Place the board inside the editor, fill in the name of the Webduino board you are using, place a &quot;Shake Switch&quot; block inside the workspace. Set name to &quot;shock&quot; and set the pin to 11.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-11-06.jpg\" alt=\"\"></p>\n<p>Place a &quot;Variables&quot; block into the stack, select &quot;New Variable&quot; to set a new variable, and set it to 0 by adding a &quot;Math&quot; block.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-11-08.jpg\" alt=\"\"></p>\n<p>Place a &quot;When status is / do&quot; block from &quot;Shake Switch&quot; menu and place a math formula &quot;a = a+1&quot; into that stack. This means that every time the Shake Switch is activated, 1 will be added to the current value of A. The  value of A will be shown on screen if a &quot;Show&quot; block is added to the stack.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-11-10.jpg\" alt=\"\"></p>\n<p>Once you&#39;re done, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;&quot;) and click on the red execution button &quot;Run Blocks&quot;, shake the &quot;Shake Switch&quot; and you will see the value go up on screen. (Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZZJZL2sUmk0rfVbuXK\">https://blockly.webduino.io/?lang=en#-KZZJZL2sUmk0rfVbuXK</a>)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-11-11.jpg\" alt=\"\"></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/pozik/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>The span inside the HTML file prints the text on screen.</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript is similar to what we saw in the Button Switch example, they all use <code>on</code>, but when it shows <code>high</code> the switch is on and <code>low</code> the switch is off. When the switch is on, a = a+1 and is displayed by <code>innerHTML</code>.</p>\n<pre><code>var shock;\nvar a;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  shock = getShock(board, 11);\n  a = 0;\n  document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = a;\n  shock.on(&quot;high&quot;,function(){\n    console.log(&quot;high&quot;);\n      a = a + 1;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = a;\n\n  });\n});\n</code></pre><p>This is how you use a Shake Switch to show how many times it is activated on screen.\nWebduino Bin: <a href=\"http://bin.webduino.io/pozik/edit?html,css,js,output\">http://bin.webduino.io/pozik/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZZKNQYFJuPT4Q8IxTF\">https://blockly.webduino.io/?lang=en#-KZZKNQYFJuPT4Q8IxTF</a></p>\n<!-- ## 震動開關的延伸教學：\n\n[Webduino Blockly 課程 10-2：震動按鈕開關改變圖片位置](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/shock-2#-Jw1KUKUyvZIS_b4pQJ9)\n\n<div class=\"buy-this\">\n    <span>震動開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-12-sound-sensor":{"tag":"tutorial","src":"tutorial-12-sound-sensor.html","title":"Controlling an LED and web page image with a Sound Sensor","banner":"tutorial-12-01.jpg","img":"tutorial-12-01s.jpg","date":20150603,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 12: Controlling an LED and web page image with a Sound Sensor :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"A Sound Sensor is like a small microphone, but not as powerful. It is mostly used to detect if any noise is made near it. On the sound sensor there is a cross knob, you can adjust the sensitivity with a screwdriver. If the sensitivity is too high even a light breeze might be detected and with the sensitivity too low loud clapping might not be recognized. The sound sensor also has a time difference when transferring signals, so there might be a delay from the time the sound is made to when it is received. In this project example we will use a sound sensor to light up an LED and our Web Demo light bulb image when a sound is detected.\n\">\n\n<meta itemprop=\"description\" content=\"A Sound Sensor is like a small microphone, but not as powerful. It is mostly used to detect if any noise is made near it. On the sound sensor there is a cross knob, you can adjust the sensitivity with a screwdriver. If the sensitivity is too high even a light breeze might be detected and with the sensitivity too low loud clapping might not be recognized. The sound sensor also has a time difference when transferring signals, so there might be a delay from the time the sound is made to when it is received. In this project example we will use a sound sensor to light up an LED and our Web Demo light bulb image when a sound is detected.\n\">\n\n<meta property=\"og:description\" content=\"A Sound Sensor is like a small microphone, but not as powerful. It is mostly used to detect if any noise is made near it. On the sound sensor there is a cross knob, you can adjust the sensitivity with a screwdriver. If the sensitivity is too high even a light breeze might be detected and with the sensitivity too low loud clapping might not be recognized. The sound sensor also has a time difference when transferring signals, so there might be a delay from the time the sound is made to when it is received. In this project example we will use a sound sensor to light up an LED and our Web Demo light bulb image when a sound is detected.\n\">\n\n<meta property=\"og:title\" content=\"Project Example 12: Controlling an LED and web page image with a Sound Sensor\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-12-sound-sensor.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-12-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-12-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-12-controlling-an-led-and-web-page-image-with-a-sound-sensor\">Project Example 12: Controlling an LED and web page image with a Sound Sensor</h1>\n<p>A Sound Sensor is like a small microphone, but not as powerful. It is mostly used to detect if any noise is made near it. On the sound sensor there is a cross knob, you can adjust the sensitivity with a screwdriver. If the sensitivity is too high even a light breeze might be detected and with the sensitivity too low loud clapping might not be recognized. The sound sensor also has a time difference when transferring signals, so there might be a delay from the time the sound is made to when it is received. In this project example we will use a sound sensor to light up an LED and our Web Demo light bulb image when a sound is detected.</p>\n<!-- <div class=\"buy-this\">\n    <span>聲音偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?page=tutorials/sound-2](https://blockly.webduino.io/?page=tutorials/sound-2)  -->\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/0NFEsS-FvMw\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>First connect the sound sensor and LED to a breadboard. Connect the +5V from the sound sensor to VCC, GND to GND, and OUT to pin 10. Then connect GND to the shorter leg of the LED and finally connect the long leg to pin 9.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-12-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-12-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-12-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-12-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>聲音偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blocky editor</a>. This example will use the &quot;Click Bulb&quot; to control the LED so open the Webduino Blocky Editor and click on the &quot;Web Demo Area&quot; button. Then choose &quot;Click Bulb&quot; from the drop down menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-12-06.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block into workspace, fill in the name of your Webduino, place a &quot;Sound Sensor&quot; block into the stack ,and set name to sound and pin to 10. Then place an &quot;LED&quot; block in the stack and set the name to led and pin to 9.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-12-07.jpg\" alt=\"\"></p>\n<p>Place a &quot;When Sound&#39;s Change / do&quot; block next in the stack, and add blocks so the LED turns on and the light bulb image changes, as well.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-12-08.jpg\" alt=\"\"></p>\n<p>It is possible for the sensor to detect sound and then detect nothing, at the same time (you might only clap once and then there is silence right after). So place another &quot;When Sound&#39;s Change / do&quot; block into the stack to , Set it to &quot;no detect&quot; with a delay of 1 second. So if there is no sound detected after 1 second, the LED will turn off and the lightbulb will go off on the screen.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-12-09.jpg\" alt=\"\"></p>\n<p>After all this is done, check to see if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. Make some noise and you will see the LED and light bulb on screen light up!\nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KZdTn-FkODZKDjCu7P-\">https://blockly.webduino.io/?lang=en#-KZdTn-FkODZKDjCu7P-</a></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/bitur/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include<code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>Inside the body of the HTML file, where there is an image section with the ID, demo-area-o2-light, there is a part where there are two different light bulb images, one on and one off, so when we click on the images they will change from one state to another.</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>We use CSS to control the light bulb image, here we use display:none; to control the changing of images, below is the CSS code.</p>\n<pre><code>#demo-area-02-light img{\n  height:200px;\n  display:none;\n}\n#demo-area-02-light.on #demo-area-02-on{\n  display:inline-block;\n}\n#demo-area-02-light.off #demo-area-02-off{\n  display:inline-block;\n}\n</code></pre><p>With JavaScript we use &quot;on&quot; to detect, with the first parameter <code>detected</code> meaning a sound is detected, then do the action below, if <code>ended</code> then turn the LED off and change the image to the unlit light bulb. The light bulb image on screen uses <code>className</code> to change between states.</p>\n<pre><code>var sound;\nvar led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  sound = getSound(board, 10);\n  led = getLed(board, 9);\n  sound.on(&quot;detected&quot;,function(){\n      led.on();\n    document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n\n  });\n  sound.on(&quot;ended&quot;,function(){\n    setTimeout(function(){\n      setTimeout(function () {\n      led.off();\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n    }, 1000);\n\n    },300);\n  });\n});\n</code></pre><p>This is how you control an LED and web page image with a Sound Sensor!<br>Webduino Bin: <a href=\"http://bin.webduino.io/bitur/edit?html,css,js,output\">http://bin.webduino.io/bitur/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZdXIYmALZE7Zg_UWNH\">https://blockly.webduino.io/?lang=en#-KZdXIYmALZE7Zg_UWNH</a></p>\n<!-- ## 聲音偵測傳感器的延伸教學：\n\n[Webduino Blockly 課程 7-1：偵測聲音](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/sound-1#-JvxeaQ60xcOYLuXKCke)\n\n<div class=\"buy-this\">\n    <span>聲音偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-13-buzzer":{"tag":"tutorial","src":"tutorial-13-buzzer.html","title":"Make Music with a Buzzer","banner":"tutorial-13-01.jpg","img":"tutorial-13-01s.jpg","date":20150604,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 13: Make Music with a Buzzer :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"The buzzer is an audio singalling device that can be applied to many fields. It works based on the principle of electromechanical theory. When a DC voltage is applied, the audio signal current goes through a solenoid coil, creating a magnetic field and then causes the vibration of a diaphragm that in turn generates sounds. You can only use HTML attributes to make a piece of music on the Webduino Blockly to make the buzzer play music for you.\">\n\n<meta itemprop=\"description\" content=\"The buzzer is an audio singalling device that can be applied to many fields. It works based on the principle of electromechanical theory. When a DC voltage is applied, the audio signal current goes through a solenoid coil, creating a magnetic field and then causes the vibration of a diaphragm that in turn generates sounds. You can only use HTML attributes to make a piece of music on the Webduino Blockly to make the buzzer play music for you.\">\n\n<meta property=\"og:description\" content=\"The buzzer is an audio singalling device that can be applied to many fields. It works based on the principle of electromechanical theory. When a DC voltage is applied, the audio signal current goes through a solenoid coil, creating a magnetic field and then causes the vibration of a diaphragm that in turn generates sounds. You can only use HTML attributes to make a piece of music on the Webduino Blockly to make the buzzer play music for you.\">\n\n<meta property=\"og:title\" content=\"Project Example 13: Make Music with a Buzzer\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-13-buzzer.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-13-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-13-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-13-make-music-with-a-buzzer\">Project Example 13: Make Music with a Buzzer</h1>\n<p>The buzzer is an audio singalling device that can be applied to many fields. It works based on the principle of electromechanical theory. When a DC voltage is applied, the audio signal current goes through a solenoid coil, creating a magnetic field and then causes the vibration of a diaphragm that in turn generates sounds. \nYou can only use HTML attributes to make a piece of music on the Webduino Blockly to make the buzzer play music for you.</p>\n<!-- <div class=\"buy-this\">\n    <span>蜂鳴器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial-\">Video Tutorial:</h2>\n<!-- Open the Webduino Blockly for exclusive use of Project Example \"[Webduino Blockly Chapter 9-1: Buzzer](https://blockly.webduino.io/?lang=en&page=tutorials/buzzer-1#-KTOKUPXLe_nXqsOgWs-)\" -->\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/StNG2NHS240\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"the-circuit\">The Circuit</h2>\n<p>There are negative [-] and positive [+] connectors on the buzzer. You have to connect the negative line to GND on the board, and positive line to 1 on board.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-13-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-13-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-13-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-13-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>蜂鳴器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instruction-of-webduino-blockly\">Instruction of Webduino Blockly</h2>\n<p>Open the page: <a href=\"https://blockly.webduino.io/?lang=en\">https://blockly.webduino.io/?lang=en</a> to acces Webduino Blockly. First, you will need to use the &quot;Web Demo Area&quot; to click buttons to play music. Click &quot;Web Demo Area&quot; and choose &quot;Click Button&quot; in the drop-down list. Note that, the button here is referring to the virtual button on &quot;Web Demo Area&quot;, not the real button switch.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-13-05.jpg\" alt=\"\"></p>\n<p>Drag a &quot;board&quot; block into the workspace, and type in the name of your Webduino board. Combine a &quot;Buzzer&quot; block, from the &quot;Buzzer&quot; list located under the &quot;Components&quot; dropdown menu. Set the name as buzzer, and set the &quot;pin&quot; to 11. </p>\n<p><img src=\"../../img/tutorials/en/tutorial-13-06.jpg\" alt=\"\"></p>\n<p>Add an &quot;Add music&quot; block from under &quot;Buzzer&quot; to the stack, name this piece of music &quot;M1&quot;. Now connect the &quot;Note &amp; Tempo&quot; block to that. The musical scale of notes are C, CS(C sharp), D, DS(D sharp), E, ES(E sharp), F, FS(F sharp), G, GS(G sharp), A, AS(A sharp), and B. The numbers after the notes represent the octaves. The tempos are represented by a specified fraction of second. For example, setting 3 means that the amount of time between successive beats is ⅓ second.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-13-07.jpg\" alt=\"\"></p>\n<p>After setting the notes and tempos, drag a block from the &quot;Web Demo&quot; menu under &quot;Click Button&quot; to the workspace. When clicked the button, run music &quot;M1&quot; with the buzzer.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-13-08.jpg\" alt=\"\"></p>\n<p>You can also compose in the same tempo with the similar steps mentioned above. Drag another &quot;Add music&quot; block to the stack and name this piece of music &quot;M2&quot;. Then add another &quot;Notes &amp; Tempo&quot; block to the stack, add the notes and tempo. Finally, use &quot;Button 2&quot; from the &quot;Web Demo Area&quot; to play this piece of music.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-13-09.jpg\" alt=\"\"></p>\n<p>The buzzer can also play selected music. Just replace the &quot;Notes &amp; Tempo&quot; block with a &quot;Choose Music&quot; block, and selecting a song from the database. If you want to stop music with a button, combine a &quot;Let Buzzer Stop...&quot; block with the &quot;Click Button, Do&quot; block.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-13-10.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/en/tutorial-13-11.jpg\" alt=\"\"></p>\n<p>By repeating the last step, you can make a button play and pause every piece of music.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-13-12.jpg\" alt=\"\"></p>\n<p>After you finish creating the block stack, check your &quot;<a href=\"https://webduino.io/device.html\">device&#39;s status</a>&quot; before you &quot;Run&quot; all of the blocks. Then you can hear the buzzer play music for you! \nCheck your stack setup with this example here: <a href=\"https://blockly.webduino.io/?lang=en#-KTOLSVERLP8SHXKg4Gh\">https://blockly.webduino.io/#-KDEaW-S-kRRaEkkyRGH</a></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"https://bin.webduino.io/lihov/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>There are five buttons in the html with their repective IDs, by which we can determine which one is pressed.</p>\n<pre><code>&lt;button id=&quot;demo-area-05-btn1&quot; class=&quot;db5&quot;&gt;按鈕 1&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn2&quot; class=&quot;db5&quot;&gt;按鈕 2&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn3&quot; class=&quot;db5&quot;&gt;按鈕 3&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn4&quot; class=&quot;db5&quot;&gt;按鈕 4&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn5&quot; class=&quot;db5&quot;&gt;按鈕 5&lt;/button&gt;\n</code></pre><p>The code looks lengthy but simple. The main function &quot;buzzer_music&quot; is used to create the music. First we create an object &quot;musicNotes&quot; to represent the whole melody. Then we create two arrays, &quot;notes&quot; and &quot;tempos&quot;, for storing the notes and tempos.</p>\n<pre><code>var buzzer;\nvar m1;\nvar m2;\nvar m3;\n\nfunction buzzer_music(m) {\n  var musicNotes = {};\n  musicNotes.notes = [];\n  musicNotes.tempos = [];\n  if(m.length&gt;1){\n    for(var i=0; i&lt;m.length; i++){\n      if(Array.isArray(m[i].notes)){\n        var cn = musicNotes.notes.concat(m[i].notes);\n        musicNotes.notes = cn;\n      }else{\n        musicNotes.notes.push(m[i].notes);\n      }\n      if(Array.isArray(m[i].tempos)){\n        var ct = musicNotes.tempos.concat(m[i].tempos);\n        musicNotes.tempos = ct;\n      }else{\n        musicNotes.tempos.push(m[i].tempos);\n      }\n    }\n  }else{\n    musicNotes.notes = [m[0].notes];\n    musicNotes.tempos = [m[0].tempos];\n  }\n  return musicNotes;\n}\n</code></pre><p>Finally, we use play() to play the notes we have created. With this, the buzzer will play the melody accordingly.</p>\n<pre><code>boardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  buzzer = getBuzzer(board, 11);\n  m1 = buzzer_music([  {notes:&quot;C6&quot;,tempos:&quot;3&quot;},{notes:&quot;D6&quot;,tempos:&quot;7&quot;},{notes:&quot;E6&quot;,tempos:&quot;3&quot;},{notes:&quot;F6&quot;,tempos:&quot;7&quot;}]);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    buzzer.stop();\n    buzzer.play(m1.notes, m1.tempos);\n  });\n  m2 = buzzer_music([  {notes : [&quot;C6&quot;,&quot;D6&quot;,&quot;E6&quot;,&quot;F6&quot;,&quot;G6&quot;,&quot;A6&quot;,&quot;B6&quot;] , tempos : [&quot;8&quot;,&quot;8&quot;,&quot;8&quot;,&quot;8&quot;,&quot;8&quot;,&quot;8&quot;,&quot;8&quot;] }]);\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    buzzer.stop();\n    buzzer.play(m2.notes, m2.tempos);\n  });\n  m3 = buzzer_music([  {notes:[&quot;E7&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;G7&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;0&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;E6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;A6&quot;,&quot;0&quot;,&quot;B6&quot;,&quot;0&quot;,&quot;AS6&quot;,&quot;A6&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;G7&quot;,&quot;A7&quot;,&quot;0&quot;,&quot;F7&quot;,&quot;G7&quot;,&quot;0&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;D7&quot;,&quot;B6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;0&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;E6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;A6&quot;,&quot;0&quot;,&quot;B6&quot;,&quot;0&quot;,&quot;AS6&quot;,&quot;A6&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;G7&quot;,&quot;A7&quot;,&quot;0&quot;,&quot;F7&quot;,&quot;G7&quot;,&quot;0&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;D7&quot;,&quot;B6&quot;,&quot;0&quot;,&quot;0&quot;] , tempos:[&quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;]}]);\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    buzzer.stop();\n    buzzer.play(m3.notes, m3.tempos);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    buzzer.stop();\n  });\n});\n</code></pre><p>This was the example of how to use a buzzer to make a piece of music, we hope you enjoyed it! \nWebduino Bin: <a href=\"https://bin.webduino.io/lihov/edit?html,css,js,output\">https://bin.webduino.io/lihov/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KTOK67llD96tMoi2Qmz\">https://blockly.webduino.io/?lang=en#-KTOK67llD96tMoi2Qmz</a></p>\n<!-- ## Tutorial Extension of Buzzer:\n\n[Webduino Blockly Chapter 9-2: Buzzer](http://blockly.webduino.io/?lang=en&page=tutorials/buzzer-2#-KTOJaNA6gOTn6N3nkKj)  \n[Webduino Blockly Chapter 9-3: Buzzer and Change music](http://blockly.webduino.io/?lang=en&page=tutorials/buzzer-3#-KTOJh9f4A3KN-x9WTOH)  \n[Webduino Blockly Chapter 9-4: Buzzer (Play, Stop and Pause)](http://blockly.webduino.io/?lang=en&page=tutorials/buzzer-4#-KTOJtTg3RxufMb6r-GK) -->\n<!-- <div class=\"buy-this\">\n    <span>蜂鳴器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-14-relay":{"tag":"tutorial","src":"tutorial-14-relay.html","title":"Using a Relay to control a fan","banner":"tutorial-14-01.jpg","img":"tutorial-14-01s.jpg","date":20150604,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 14: Using a Relay to control a fan :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"A relay is an electronic device commonly seen in automated systems. It uses a current or signal to open or close another circuit. They are used in circuits for voltage balancing, preventing equipment damage, and as switches. When we use a relay with the Webduino, we can easily make a smart electric socket or an automatic switch.\">\n\n<meta itemprop=\"description\" content=\"A relay is an electronic device commonly seen in automated systems. It uses a current or signal to open or close another circuit. They are used in circuits for voltage balancing, preventing equipment damage, and as switches. When we use a relay with the Webduino, we can easily make a smart electric socket or an automatic switch.\">\n\n<meta property=\"og:description\" content=\"A relay is an electronic device commonly seen in automated systems. It uses a current or signal to open or close another circuit. They are used in circuits for voltage balancing, preventing equipment damage, and as switches. When we use a relay with the Webduino, we can easily make a smart electric socket or an automatic switch.\">\n\n<meta property=\"og:title\" content=\"Project Example 14: Using a Relay to control a fan\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-14-relay.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-14-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-14-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-14-using-a-relay-to-control-a-fan\">Project Example 14: Using a Relay to control a fan</h1>\n<p>A relay is an electronic device commonly seen in automated systems. It uses a current or signal to open or close another circuit. They are used in circuits for voltage balancing, preventing equipment damage, and as switches. When we use a relay with the Webduino, we can easily make a smart electric socket or an automatic switch.</p>\n<!-- <div class=\"buy-this\">\n    <span>繼電器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Z3x_qW7fXzM\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>Before we start to build anything, let&#39;s take a look at what a relay is. Inside a relay there is an electromagnet. When a relay is activated, the NO (Normally Open) contact connects to the COM (Common Connection) contact, and the circuit is connected; the circuit is disconnected when the relay is inactive.</p>\n<p>When a relay is activated, the NC (Normally Closed) contact disconnects the circuit; the circuit is connected when the relay is inactive. Through this system, we can easily turn on/off an electric device.</p>\n<p><img src=\"../../img/tutorials/tutorial-14-02.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/en/tutorial-14-03.jpg\" alt=\"\"></p>\n<p>Because we are using a low-power signal to control another circuit, we need to use two separate power outputs, one for our Webduino board and, the other for the relay. On one side of the relay we have 3 pins, connect VCC to 3.3V on the Webduino board, GND to GND, and IN to pin 9. The other side of the relay will require a screwdriver to connect the wires (normally this side is connected to electric devices with a higher current), we will connect one wire from the fan to the NO contact on the Relay and the other wire to the power output. Last, connect the power for the fan to the COM contact.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-14-04.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-14-04-fly.jpg\" alt=\"\"></p>\n<p>Use a screwdriver to screw in the wires securely.</p>\n<p><img src=\"../../img/tutorials/tutorial-14-05.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-14-08.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-14-06.jpg\" alt=\"\"></p>\n<p>The relay will turn on a red light when it is inactivated, and will turn on a green light when it is activated.</p>\n<p><img src=\"../../img/tutorials/tutorial-14-07.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>繼電器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blocky editor</a> and click on the &quot;Web Demo Area&quot; button. We will be using &quot;Click Bulb&quot; to control the relay, so, choose &quot;Click Bulb&quot; from the drop down menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-14-09.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block onto the workspace, fill in the name of your Webduino board and place a &quot;Set relay to&quot; block into the stack. Set the name to relay and the pin to 9.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-14-10.jpg\" alt=\"\"></p>\n<p>Next, place a &quot;Click bulb / do&quot; block in the stack and a &quot;if / do&quot; block inside of that. So when the light bulb is on, there is a command given. And if the light bulb is off, there is another command.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-14-11.jpg\" alt=\"\"></p>\n<p>Set up a logic equation so that if the light bulb is on and you click the image, the relay switches and the image of the light bulb turns off, and vise versa.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-14-12.jpg\" alt=\"\"></p>\n<p>After finishing all of the above, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. Then you can use the light bulb image on the screen to control the relay and in turn, the fan.\nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KZeIYu4eufJ_GjB9J2C\">https://blockly.webduino.io/?lang=en#-KZeIYu4eufJ_GjB9J2C</a></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/lukoh/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>Inside the body of the HTML file, where there is an image section with the ID, demo-area-o2-light, there is a part where there are two different light bulb images, one on and one off, so when we click on the images they will change from one state to another.</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>We use CSS to control the light bulb image, here we use display:none; to control the changing of images, below is the CSS code.</p>\n<pre><code>#demo-area-02-light img{\n  height:200px;\n  display:none;\n}\n#demo-area-02-light.on #demo-area-02-on{\n  display:inline-block;\n}\n#demo-area-02-light.off #demo-area-02-off{\n  display:inline-block;\n}\n</code></pre><p>We can see in the JavaScript code that a relay is similar to an LED because it uses &quot;on&quot; and &quot;off&quot; for control. The light bulb image uses <code>className</code> as a switch.</p>\n<pre><code>var relay;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  relay = getRelay(board, 9);\n  document.getElementById(&quot;demo-area-02-light&quot;).addEventListener(&quot;click&quot;,function(){\n    if (document.getElementById(&quot;demo-area-02-light&quot;).className == &quot;on&quot;) {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n      relay.off();\n    } else {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n      relay.on();\n    }\n  });\n});\n</code></pre><p>And that&#39;s how you use a relay to control a fan! \nWebduino Bin: <a href=\"http://bin.webduino.io/lukoh/edit?html,css,js,output\">http://bin.webduino.io/lukoh/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZeJOn7Z9s96DYU8jyn\">https://blockly.webduino.io/?lang=en#-KZeJOn7Z9s96DYU8jyn</a></p>\n<!-- ## 繼電器的延伸教學：\n\n[Webduino Blockly 課程 11-1：控制繼電器](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/relay-1#-K-WQYB34rMa4f2GgSam) \n\n<div class=\"buy-this\">\n    <span>繼電器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>  -->\n<!-- @@close-->"},"tutorial-15-pir-led":{"tag":"tutorial","src":"tutorial-15-pir-led.html","title":"PIR motion sensor","banner":"tutorial-15-01.jpg","img":"tutorial-15-01s.jpg","date":20150604,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 15: PIR motion sensor :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"The PIR (Passive Infrared Sensor) is an electronic sensor that measures infrared light radiating from objects. You can program it to perform certain actions when it senses infrared light radiating from the human body. In this example, using the Webduino, we will make an LED light up and show a lit light bulb on screen when the PIR sensor detects changes in infrared light.\">\n\n<meta itemprop=\"description\" content=\"The PIR (Passive Infrared Sensor) is an electronic sensor that measures infrared light radiating from objects. You can program it to perform certain actions when it senses infrared light radiating from the human body. In this example, using the Webduino, we will make an LED light up and show a lit light bulb on screen when the PIR sensor detects changes in infrared light.\">\n\n<meta property=\"og:description\" content=\"The PIR (Passive Infrared Sensor) is an electronic sensor that measures infrared light radiating from objects. You can program it to perform certain actions when it senses infrared light radiating from the human body. In this example, using the Webduino, we will make an LED light up and show a lit light bulb on screen when the PIR sensor detects changes in infrared light.\">\n\n<meta property=\"og:title\" content=\"Project Example 15: PIR motion sensor\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-15-pir-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-15-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-15-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-15-pir-motion-sensor\">Project Example 15: PIR motion sensor</h1>\n<p>The PIR (Passive Infrared Sensor) is an electronic sensor that measures infrared light radiating from objects. You can program it to perform certain actions when it senses infrared light radiating from the human body. In this example, using the Webduino, we will make an LED light up and show a lit light bulb on screen when the PIR sensor detects changes in infrared light.</p>\n<!-- <div class=\"buy-this\">\n    <span>人體紅外線偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?page=tutorials/pir-2](https://blockly.webduino.io/?page=tutorials/pir-2)  -->\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/3873nza-ywo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>Connect the VCC pin on the PIR sensor to VCC on the Webduino board, GND to GND, and OUT to pin 11. Our LED will share a GND with the PIR sensor, and connect the longer leg to pin 10. On the PIR sensor there are two knobs, SX is for sensitivity and the TX is for trigger delay time. Both can be adjusted by hand or with a screw driver.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-15-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-15-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-15-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-15-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-15-05.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-15-06.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>人體紅外線偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>We will be using &quot;Click Bulb&quot; in Webduino Blocky so, open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blocky editor</a> and click the &quot;Web Demo Area&quot; button and select &quot;Click Bulb&quot; from the drop down menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-15-07.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block into the workspace and fill in the name of your Webduino board. Then place a &quot;PIR motion&quot; block inside the stack and set the name to pir and the pin to 11. Set an &quot;LED&quot; block to led and the pin to 10.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-15-08.jpg\" alt=\"\"></p>\n<p>Place two &quot;When PIR&#39;s change / do&quot; blocks into the stack, then place blocks that will turn the LED on/off and blocks to change the state of the light bulb image on screen.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-15-09.jpg\" alt=\"\"></p>\n<p>Once you are done check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. Place your hand in front of the PIR sensor and you will see the LED and the light bulb image both light up.\nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KZeZFgLzSu54-AmdJ5R\">https://blockly.webduino.io/?lang=en#-KZeZFgLzSu54-AmdJ5R</a></p>\n<h2 id=\"code-explanation-check-webduino-bin-check-device-status-\">Code Explanation (<a href=\"http://bin.webduino.io/lofiv/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</h2>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>Inside the body of the HTML file, where an image section with the ID, demo-area-o2-light, there is a part where there are two different light bulb images, one on and one off, so when we click on the images they will change from one state to another.</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>We use CSS to control the light bulb image, here we use display:none; to control the changing of images, below is the CSS code.</p>\n<pre><code>#demo-area-02-light img{\n  height:200px;\n  display:none;\n}\n#demo-area-02-light.on #demo-area-02-on{\n  display:inline-block;\n}\n#demo-area-02-light.off #demo-area-02-off{\n  display:inline-block;\n}\n</code></pre><p>JavaScript uses two main APIs for the PIR sensor: <code>detected</code> and <code>ended</code>, each meaning detected infrared light and ending detection, place the actions you would like to happen with each one. </p>\n<pre><code>var pir;\nvar led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  pir = getPir(board, 11);\n  led = getLed(board, 10);\n  pir.on(&quot;detected&quot;,function(){\n    led.on();\n    document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n\n  });\n  pir.on(&quot;ended&quot;,function(){\n    led.off();\n    document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n\n  });\n});\n</code></pre><p>Now, you can use a PIR motion sensor to detect changes in infrared light and control other devices!<br>Webduino Bin: <a href=\"http://bin.webduino.io/lofiv/edit?html,css,js,output\">http://bin.webduino.io/lofiv/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZeZhhnvCierqZJv1wh\">https://blockly.webduino.io/?lang=en#-KZeZhhnvCierqZJv1wh</a></p>\n<!-- ## 人體紅外線偵測傳感器的延伸教學：\n\n[Webduino Blockly 課程 6-1：偵測人體紅外線](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/pir-1#-JvxRwAXj4ccyigeuI8o) \n\n<div class=\"buy-this\">\n    <span>人體紅外線偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>  -->\n<!-- @@close-->"},"tutorial-16-servo":{"tag":"tutorial","src":"tutorial-16-servo.html","title":"Setting the angle of a servo shaft","banner":"tutorial-16-01.jpg","img":"tutorial-16-01s.jpg","date":20150625,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 16: Setting the angle of a servo shaft :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"A servo or servo motor is an actuator that allows precise control of angular or linear position, velocity, and acceleration. It can be controlled by a program you are running. In this example we will use the Blockly Editor, HTML, and JavaScript to control a servo with a maximum of 180 degrees. It will not be extremely accurate, however, and 1 to 180 degrees might be -2 to 177 degrees. This will not affect our example, though.\">\n\n<meta itemprop=\"description\" content=\"A servo or servo motor is an actuator that allows precise control of angular or linear position, velocity, and acceleration. It can be controlled by a program you are running. In this example we will use the Blockly Editor, HTML, and JavaScript to control a servo with a maximum of 180 degrees. It will not be extremely accurate, however, and 1 to 180 degrees might be -2 to 177 degrees. This will not affect our example, though.\">\n\n<meta property=\"og:description\" content=\"A servo or servo motor is an actuator that allows precise control of angular or linear position, velocity, and acceleration. It can be controlled by a program you are running. In this example we will use the Blockly Editor, HTML, and JavaScript to control a servo with a maximum of 180 degrees. It will not be extremely accurate, however, and 1 to 180 degrees might be -2 to 177 degrees. This will not affect our example, though.\">\n\n<meta property=\"og:title\" content=\"Project Example 16: Setting the angle of a servo shaft\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-16-servo.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-16-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-16-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-16-setting-the-angle-of-a-servo-shaft\">Project Example 16: Setting the angle of a servo shaft</h1>\n<p>A servo or servo motor is an actuator that allows precise control of angular or linear position, velocity, and acceleration. It can be controlled by a program you are running. In this example we will use the Blockly Editor, HTML, and JavaScript to control a servo with a maximum of 180 degrees. It will not be extremely accurate, however, and 1 to 180 degrees might be -2 to 177 degrees. This will not affect our example, though.</p>\n<!-- <div class=\"buy-this\">\n    <span>伺服馬達相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?page=tutorials/servo-1](https://blockly.webduino.io/?page=tutorials/servo-1) \n -->\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Dar2pSWCSL8\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>A Servo requires a higher current so we will connect an independent power source to it. (We could also use a transistor to amplify the current, but it&#39;s a lot easier to just connect another power source.) The servo has three wires, the red one is for Power, the brown one connects to GND, and the orange one is the Signal. We can use a breadboard to connect an independent power source, the Webduino board, and the servo all to one GND. Also connect the orange line of the servo to pin 11.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-16-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-16-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-16-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-16-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-16-05.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>伺服馬達相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blocky editor</a>, this example will use the &quot;Slider&quot; to control the angle of the servo. Click on the &quot;Web Demo Area&quot; button and select &quot;Slider&quot; from the dropdown menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-16-06.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block onto the workspace, fill in the name of your Webduino board. Place a &quot;Servo Motor&quot; block inside the stack and set name to servo, and the pin to 11.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-16-07.jpg\" alt=\"\"></p>\n<p>Place a &quot;Slider range, do&quot; block into the stack, we can set the min, max, interval and default values. Since the servo won&#39;t go over 180 degrees the max and min will be set to 180 and 0. Last, place a &quot;Show&quot; block and &quot;Servo motor / angle&quot; block into the range block.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-16-08.jpg\" alt=\"\"></p>\n<p>After all this is done, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;, move the slider on the screen and you will see the servo move! \nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KZehy3_2Ka0Zpre6jpA\">https://blockly.webduino.io/?lang=en#-KZehy3_2Ka0Zpre6jpA</a></p>\n<p>##Code Explanation (<a href=\"http://bin.webduino.io/tipiv/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>HInclude <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>We have a span in the HTML file to show the current angle. Also an &quot;input&quot; with type as &quot;range&quot;, this is our slider. We can set max, min, step, and value.</p>\n<pre><code>數值：&lt;span id=&quot;demo-area-06-input-value&quot;&gt;90&lt;/span&gt;&lt;br&gt;\n拉霸：&lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;180&quot; step=&quot;5&quot; value=&quot;90&quot; id=&quot;demo-area-06-input&quot;&gt;\n</code></pre><p>JavaScript uses <code>oninput</code> to send the value change from the slider to servo &quot;n&quot; to change the &quot;angle&quot;, so whenever you change the slider, the angle on the servo will change.</p>\n<pre><code>var servo;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  servo = getServo(board, 11);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;min&quot;,0);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;max&quot;,180);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;step&quot;,5);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;value&quot;,90);\n  document.getElementById(&quot;demo-area-06-input&quot;).oninput = function(_value){\n    _value = this.value;\n    document.getElementById(&quot;demo-area-06-input-value&quot;).innerHTML = _value;\n    servo.angle = _value;\n  };\n});\n</code></pre><p>Now you&#39;ve learned the basics of setting the angle of a servo shaft.<br>Webduino Bin: <a href=\"http://bin.webduino.io/tipiv/edit?html,css,js,output\">http://bin.webduino.io/tipiv/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZehy3_2Ka0Zpre6jpA\">https://blockly.webduino.io/?lang=en#-KZehy3_2Ka0Zpre6jpA</a></p>\n<!-- ## 人體紅外線偵測傳感器的延伸教學：\n\n[Webduino Blockly 課程 8-2：使用按鈕開關控制伺服馬達](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/servo-2#-Jw01xYLefgu_1IvUaVM)\n\n<div class=\"buy-this\">\n    <span>伺服馬達相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>   -->\n<!-- @@close-->"},"tutorial-17-photocell":{"tag":"tutorial","src":"tutorial-17-photocell.html","title":"Determine light levels with a photocell","banner":"tutorial-17-01.jpg","img":"tutorial-17-01s.jpg","date":20160113,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 17: Determine light levels with a photocell :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Photocells can be found inside of automatic night lights. This special conductor uses a phenomenon called photoconductivity. When light is absorbed by the conductor the electrons of the semiconductor are delocalized, becoming free electrons. So when the light is stronger there are more free electrons, creating lower resistance. Using this changing value we can then show the strength of the signal.\">\n\n<meta itemprop=\"description\" content=\"Photocells can be found inside of automatic night lights. This special conductor uses a phenomenon called photoconductivity. When light is absorbed by the conductor the electrons of the semiconductor are delocalized, becoming free electrons. So when the light is stronger there are more free electrons, creating lower resistance. Using this changing value we can then show the strength of the signal.\">\n\n<meta property=\"og:description\" content=\"Photocells can be found inside of automatic night lights. This special conductor uses a phenomenon called photoconductivity. When light is absorbed by the conductor the electrons of the semiconductor are delocalized, becoming free electrons. So when the light is stronger there are more free electrons, creating lower resistance. Using this changing value we can then show the strength of the signal.\">\n\n<meta property=\"og:title\" content=\"Project Example 17: Determine light levels with a photocell\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-17-photocell.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-17-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-17-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-17-determine-light-levels-with-a-photocell\">Project Example 17: Determine light levels with a photocell</h1>\n<p>Photocells can be found inside of automatic night lights. This special conductor uses a phenomenon called photoconductivity. When light is absorbed by the conductor the electrons of the semiconductor are delocalized, becoming free electrons. So when the light is stronger there are more free electrons, creating lower resistance. Using this changing value we can then show the strength of the signal.</p>\n<!-- <div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/jSarWRDj7Gk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>Each photocell has a different range of resistance, some may be close to zero. So when wiring a photocell, we will need a simple resistor to prevent shorting the circuit. The photocell will be connected to an analog pin (any pin that starts with A), here we connect it to A3. Either leg on the photocell can be used as a signal pin and the other leg will be connect to VCC or GND. Here we connect the other leg to 3.3V (VCC) with the signal leg also connected to a resistor and then to GND. You can swap VCC and GND, but the readings will be reversed.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-17-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-17-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-17-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-17-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>. We will be using &quot;Show Text&quot; to show the values of our photocell, so click on &quot;Web Demo Area&quot; on the upper right of the screen and choose &quot;Show Text&quot; from the drop down menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-17-05.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block onto the workspace and fill in the name of your Webduino board. Place a &quot;photocell&quot; block in the stack and set the name to photocell and the pin to A3.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-17-06.jpg\" alt=\"\"></p>\n<p>Next place a &quot;photocell detects / do&quot; block in the stack, so when we start to measure light, the values will be shown.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-17-07.jpg\" alt=\"\"></p>\n<p>The speed of measurement is limited by the board&#39;s analog sampling rate (each board has only one analog sampling rate), we can choose this in the settings and set it to 100 milliseconds (0.1 seconds)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-17-08.jpg\" alt=\"\"></p>\n<p>We&#39;ve finished most of the hard work. Check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. You will see the light levels are shown as numbers and the numbers will change when you move your hand over the photocell. \nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KZKhagMppXlpckd-uUB\">https://blockly.webduino.io/?lang=en#-KZKhagMppXlpckd-uUB</a></p>\n<p><img src=\"../../img/tutorials/en/tutorial-17-09.jpg\" alt=\"\"></p>\n<p>Pure analog readings will show you numbers with multiple digits after the decimal point. The range might not be what we want (for instance, we might want numbers ranging from 0 to 100). We can use a &quot;Math Conversion&quot; block from the &quot;Advanced&quot; menu. Using these blocks we can round up numbers and perform scale conversion.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-17-10.jpg\" alt=\"\"></p>\n<p>Find the readings from the photocell, when it senses light and when it does not, and fill in the blocks with these minimum and maximum numbers, rounding up.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-17-11.jpg\" alt=\"\"></p>\n<p>Once you&#39;ve done this, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. You&#39;ll see the numbers are rounded to the second decimal point and the scale is converted to a number between 0 and 100. \nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KZKkEa6rLBTfhZBaTPi\">https://blockly.webduino.io/?lang=en#-KZKkEa6rLBTfhZBaTPi</a></p>\n<p><img src=\"../../img/tutorials/en/tutorial-17-12.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"http://bin.webduino.io/bupak/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code>.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>We will only need a span inside our HTML file to show the light values measured by the photocell.</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JYou can see inside the JavaScript area, the photocell has a <code>on</code> method, which represents the starting point of detection, after that when we function call for a &quot;val&quot;, that represents the value the photocell is receiving and we show it with <code>innerHTML</code>.</p>\n<pre><code>var photocell;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  photocell = getPhotocell(board, 3);\n  photocell.on(function(val){\n    photocell.detectedVal = val;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = photocell.detectedVal;\n  });\n});\n</code></pre><p>If you use a block from advanced, there you will find a bunch of mathematical functions, helping us to perform math conversions.</p>\n<pre><code>var photocell;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  photocell = getPhotocell(board, 3);\n  photocell.on(function(val){\n    photocell.detectedVal = val;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = Math.round(((photocell.detectedVal - (0.007)) * (1/((0.1407)-(0.007)))) * ((100)-(0)) + (0));\n  });\n});\n</code></pre><p>Now you know how to determine light levels with a photocell.\nWebduino Bin: <a href=\"http://bin.webduino.io/bupak/edit?html,css,js,output\">http://bin.webduino.io/bupak/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZKmHxSxWG2XYxym7GG\">https://blockly.webduino.io/?lang=en#-KZKmHxSxWG2XYxym7GG</a></p>\n<!-- ## 光敏電阻的延伸教學：\n\n[Webduino Blockly 課程 12-1：控制光敏電阻](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/photocell-1#-K0oVQzwFXfXTj5xmlrU)  \n[Webduino Blockly 課程 12-2：使用光敏電阻點亮 LED 燈](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/photocell-2#-K0objWF2mEVwsHYux8W)  \n[Webduino Blockly 課程 12-3：轉換光敏 ( 可變 ) 電阻數值](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/photocell-3#-K2kvxmwFHNiGl0P-_7S)  \n\n<div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-18-max7219":{"tag":"tutorial","src":"tutorial-18-max7219.html","title":"Using an LED Matrix","banner":"tutorial-18-01.jpg","img":"tutorial-18-01s.jpg","date":20160113,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 18: Using an LED Matrix :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"An LED matrix is basically a grid of LEDs. They are commonly seen on public transport, on train or bus station signs. Here we will be using an 8x8 LED matrix, model MAX7219, to create images and text.\">\n\n<meta itemprop=\"description\" content=\"An LED matrix is basically a grid of LEDs. They are commonly seen on public transport, on train or bus station signs. Here we will be using an 8x8 LED matrix, model MAX7219, to create images and text.\">\n\n<meta property=\"og:description\" content=\"An LED matrix is basically a grid of LEDs. They are commonly seen on public transport, on train or bus station signs. Here we will be using an 8x8 LED matrix, model MAX7219, to create images and text.\">\n\n<meta property=\"og:title\" content=\"Project Example 18: Using an LED Matrix\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-18-max7219.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-18-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-18-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-18-using-an-led-matrix\">Project Example 18: Using an LED Matrix</h1>\n<p>An LED matrix is basically a grid of LEDs. They are commonly seen on public transport, on train or bus station signs. Here we will be using an 8x8 LED matrix, model MAX7219, to create images and text.</p>\n<!-- <div class=\"buy-this\">\n    <span>LED 點矩陣相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/nY5zBP7BLdo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>The MAX7219 LED Matrix has 5 pins, VCC, GND, DIN (DOUT), CS (Chip Selection), and CLK (clock). For this tutorial, connect DIN to 7, CS to 8, CLK to 9, VCC to VCC (make sure it is not connected to 3.3V), and GND to GND.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-18-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-18-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-18-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-18-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>LED 點矩陣相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>. We will be using &quot;Click Button&quot; to show different images or animations using the LED Matrix. So, click on &quot;Web Demo Area&quot; on the upper right of the screen and choose &quot;Click button&quot; from the drop down menu. (Please check the <a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">Arduino Firmware Download / Burn</a> tutorial, and choose the driver with MaxMatrix)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-18-05.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; into the workspace and fill in the name of your Webduino board. Place an &quot;LED matrix&quot; block in the stack and set it to &quot;matrix&quot;, and set the pins to 7, 8 and 9.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-18-06.jpg\" alt=\"\"></p>\n<p>Next, place a &quot;Click button / do&quot; block from the &quot;Web Demo&quot; menu into the stack. When you click on button 1, the LED matrix will show an image encoded by <strong>8 sets of 2 hexadecimal digits. You can use more but they must come in pairs.</strong> If you are using an image to create a code, <strong>right click on the block and select &quot;help&quot;</strong>. This will bring you to the code generator ( <a href=\"http://webduinoio.github.io/demo/max7219/\">http://webduinoio.github.io/demo/max7219/</a> ).</p>\n<p><img src=\"../../img/tutorials/en/tutorial-18-07.jpg\" alt=\"\"></p>\n<p>In the LED matrix code generator, you can click on the image of an LED to draw an icon, or you can click on the drop-down menu to load pre-set text, numbers, or icons. Click &quot;Copy&quot; when you&#39;re done and paste it back into the image code block in the Blockly editor. You can also program the website to interact directly with your LED matrix. Just fill in your device&#39;s ID on the top of the page where it says &quot;Board:&quot;. Then the image you draw will show up on the LED matrix. ( Check out the video tutorial here: <a href=\"https://www.youtube.com/watch?v=U3jEqpWve8I\">https://www.youtube.com/watch?v=U3jEqpWve8I</a></p>\n<p><img src=\"../../img/tutorials/tutorial-18-08.jpg\" alt=\"\"></p>\n<p>Now we will set up the actions for button 2. We use the &quot;News ticker&quot; block to program the icon to go left or right. Because the code can be more than 16 hexadecimal letters or numbers <strong>(always in pairs of 2)</strong>, we can draw a very long line of icons and use the LED matrix to create a marquee. (Copy and paste this following code into the Blockly editor and run it, see what happens! : &quot;0c1e3e7c3e1e0c000c12224422120c00&quot;)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-18-09.jpg\" alt=\"\"></p>\n<p>Before we run our code we have an important step, since the marquee uses an animation like effect, we will need to stop the marquee from moving when we change buttons. So, in each &quot;Click button / do&quot; stack  place a &quot;Stop / animate&quot; block to stop the previous animation when we click the other button.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-18-10.jpg\" alt=\"\"></p>\n<p>The marquee we just made can only go left or right. If we try to make more complex animations, we will need to create a &quot;List&quot; using a &quot;Create list with&quot; block connected to button 3. Use the &quot;create list with&quot; block to play 3 different animations. The 4th button will turn the LED matrix off.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-18-11.jpg\" alt=\"\"></p>\n<p>Once you&#39;ve created this stack, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;, click on the different buttons and you will see the LED matrix light up, showing different icons or animations. \nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KZQR4lZyEsYPTKK1OYs\">https://blockly.webduino.io/?lang=en#-KZQR4lZyEsYPTKK1OYs</a></p>\n<p>##Code Explanation (<a href=\"http://bin.webduino.io/liqut/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>There are 5 different buttons inside the HTML code so you can control the size and the look of the buttons here.</p>\n<pre><code>&lt;button id=&quot;demo-area-05-btn1&quot; class=&quot;db5&quot;&gt;按鈕 1&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn2&quot; class=&quot;db5&quot;&gt;按鈕 2&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn3&quot; class=&quot;db5&quot;&gt;按鈕 3&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn4&quot; class=&quot;db5&quot;&gt;按鈕 4&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn5&quot; class=&quot;db5&quot;&gt;按鈕 5&lt;/button&gt;\n</code></pre><p>As for JavaScript, the method to stop the animation is <code>animateStop()</code> the way to show an image is <code>on</code>, and the animations are made by using <code>animate</code> to play a list, the list has all the codes we just filled in, such as <code>[&#39;080c0effff0e0c08&#39;, &#39;183c7eff18181818&#39;, &#39;103070ffff707010&#39;]</code>. As for the marquee, here we use <code>split</code>, <code>splice</code> and <code>push</code> to change them into a matrix and play with <code>animate</code> to achieve this effect. </p>\n<pre><code>var matrix;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  matrix = getMax7219(board, 7, 8, 9);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    matrix.animateStop();\n    matrix.on(&#39;1026464040462610&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    matrix.animateStop();\n    var a = &#39;0c1e3e7c3e1e0c000c12224422120c00&#39;;\n    var b = a.split(&quot;&quot;);\n    var d = [];\n    for(var i=0; i&lt;a.length/2; i++){\n      aa(i);\n    }\n    function aa(j){\n      var c=b.splice(0,2);\n      b.push(c[0],c[1]);\n      d[j] = b.join(&quot;&quot;);\n    }\n    console.log(d);\n    matrix.animate(d,100);\n  });\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    matrix.animateStop();\n    var varData = [&#39;080c0effff0e0c08&#39;, &#39;183c7eff18181818&#39;, &#39;103070ffff707010&#39;];\n    matrix.animate(varData,100);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    matrix.off();\n  });\n});\n</code></pre><p>This is how you use an LED matrix to create an icon or animation by clicking on different buttons.<br>Webduino Bin: <a href=\"http://bin.webduino.io/hajuv/edit?html,css,js,output\">http://bin.webduino.io/hajuv/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZQSIW_ewp3JaCWXlqE\">https://blockly.webduino.io/?lang=en#-KZQSIW_ewp3JaCWXlqE</a></p>\n<!-- ## LED 點矩陣的延伸教學：\n\n[Webduino Blockly 課程 13-1：點矩陣顯示圖形](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/max7219-1#-K0opTxaF_E2ncQkc6JC)  \n[Webduino Blockly 課程 13-2：點矩陣製作動畫](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/max7219-2#-K0os-k9zK8b2uN9iOMK)  \n[Webduino Blockly 課程 13-3：點矩陣跑馬燈效果](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/max7219-3#-K0ou2rmQYkM46jiooWV)    \n[Webduino Blockly 課程 13-4：點選按鈕切換點矩陣效果](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/max7219-4#-K0p0BGifwqYvndb35GK)    \n[Webduino Blockly 課程 13-5：利用超音波傳感器改變點矩陣圖形](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/max7219-5#-K0p4uO2W-zcVOU7FF0A) \n\n<div class=\"buy-this\">\n    <span>LED 點矩陣相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>  -->\n<!-- @@close-->"},"tutorial-19-rfid":{"tag":"tutorial","src":"tutorial-19-rfid.html","title":"RFID","banner":"tutorial-19-01.jpg","img":"tutorial-19-01s.jpg","date":20160113,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 19: RFID :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"RFID stands for Radio Frequency Identification,and is a commonly used wireless communication technology. A magnetic field from an RFID reader allows the “tag” to be activated and transmitted. RFID is present in warehouses for asset and personnel tracking and management, it is even used in anti-forgery and livestock handling.\">\n\n<meta itemprop=\"description\" content=\"RFID stands for Radio Frequency Identification,and is a commonly used wireless communication technology. A magnetic field from an RFID reader allows the “tag” to be activated and transmitted. RFID is present in warehouses for asset and personnel tracking and management, it is even used in anti-forgery and livestock handling.\">\n\n<meta property=\"og:description\" content=\"RFID stands for Radio Frequency Identification,and is a commonly used wireless communication technology. A magnetic field from an RFID reader allows the “tag” to be activated and transmitted. RFID is present in warehouses for asset and personnel tracking and management, it is even used in anti-forgery and livestock handling.\">\n\n<meta property=\"og:title\" content=\"Project Example 19: RFID\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-19-rfid.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-19-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-19-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-19-rfid\">Project Example 19: RFID</h1>\n<p>RFID stands for Radio Frequency Identification,and is a commonly used wireless communication technology. A magnetic field from an RFID reader allows the &quot;tag&quot; to be activated and transmitted. RFID is present in warehouses for asset and personnel tracking and management, it is even used in anti-forgery and livestock handling.</p>\n<!-- <div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/RrCAOgtPHdo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>We will be using the RC522 RFID reader in this tutorial. The RC522 runs on a 13.56MHZ radio frequency, it works on 3.3V with 8 different pins, SDA, SCK, MOSI, MISO, IRQ, GND, RST, and VCC. We will be using SDA, SCK, MOSI and MISO for signal I/O.</p>\n<p><img src=\"../../img/tutorials/tutorial-19-02.jpg\" alt=\"\"></p>\n<p>The Arduino UNO has different functions for each digital pin. 13 goes to Serial Clock (SCL), 12 to Master-in slave-out (MISO), 11 to Master-out slave-in (MOSI), and 10 for Slave Select (SS). So, we will be using SDA to connect to 10, SCK to 13, MOSI to 11, and MISO to 12.</p>\n<p>IRQ is the interrupt pin and RST is the reset pin, we won&#39;t be using either of them in this tutorial so don&#39;t connect them to anything. GND goes to GND and VCC is connected to 3.3V. Since there are a limited amount of ports on the Arduino, we will be using the <strong>Arduino UNO and Webduino Fly Wi-Fi extension board</strong> in this tutorial.</p>\n<p><img src=\"../../img/tutorials/tutorial-19-03.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-19-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-19-05.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-19-06.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>, click on the &quot;Web Demo Area&quot; on the upper-right hand side, and click on &quot;Select text&quot; from the drop-down menu. Also, don&#39;t forget to burn the RFID firmware before you continue. (Check out the tutorial: <a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">Arduino Firmware Download / burn</a> and choose the firmware with MFRC522 in the file name.)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-19-07.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block onto the workspace, fill in the name of your Webduino board, and place a &quot;Set RFID to&quot; block into the stack. Set the name to rfid. Since the legs are pre-set, the drop-down menu won’t be able to change the pins.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-19-08.jpg\" alt=\"\"></p>\n<p>Place an &quot;Rfid starts detecting / do&quot; block into the stack and a &quot;Show&quot; block with an &quot;Rfid&#39;s uid&quot; block connected to it. This makes it so when we place our RFID card in front of the RFID reader, the screen will show the matching ID.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-19-09.jpg\" alt=\"\"></p>\n<p>When you&#39;ve done all the previous steps, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. When you use a different RFID card with the RFID reader, a code will appear. If you find some can&#39;t be read, it’s possible that the cards don&#39;t have the same frequency as the RC522. (Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZU2zAVtTYT9ELVvs9b\">https://blockly.webduino.io/?lang=en#-KZU2zAVtTYT9ELVvs9b</a></p>\n<p><img src=\"../../img/tutorials/en/tutorial-19-10.jpg\" alt=\"\"></p>\n<p>If this seems a little dull, we could add a few more things to make it easier to see the readout. To change the word color if a different RFID card is used, add a &quot;Text Color&quot; block. Then  add a &quot;If / do&quot; block, so when the right ID card is used, the word color changes to red.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-19-11.jpg\" alt=\"\"></p>\n<p>Using this same method we could even change the word color to blue when another card is being read.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-19-12.jpg\" alt=\"\"></p>\n<p>Once you&#39;ve done this, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. Now you will see the words change color when different RFID cards are read.\nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KZU3d3JVP5RhwcW4Rc6\">https://blockly.webduino.io/?lang=en#-KZU3d3JVP5RhwcW4Rc6</a></p>\n<p><img src=\"../../img/tutorials/en/tutorial-19-13.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/yevog/1/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>There is only a span inside the HTML to show the ID of the RFID card.</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript used <code>on</code>, when the function is called, there is a variable that returns the ID of the RFID. Inside are codes that verifies if the action is correct and we use <code>innerHTML</code> to show different RFID cards and<code>style</code> to change color.</p>\n<pre><code>var rfid;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  rfid = getRFID(board);\n  rfid.read();\n  rfid.on(&quot;enter&quot;,function(_uid){\n    rfid._uid = _uid;\n    document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#000000&#39;;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = rfid._uid;\n    if(rfid._uid == &#39;679D4F55&#39;){\n      document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#ff0000&#39;;\n    }\n    if(rfid._uid == &#39;B4AE2E00&#39;){\n      document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#3333ff&#39;;\n    }\n  });\n});\n</code></pre><p>Now you&#39;ve learned how to use the RFID-RC522 to read different RFID cards and how to change the color of the text to show their ID on the screen.<br>Webduino Bin: <a href=\"https://bin.webduino.io/yevog/1/edit?html,css,js,output\">https://bin.webduino.io/yevog/1/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZU4bZZmmNetUTcefTT\">https://blockly.webduino.io/?lang=en#-KZU4bZZmmNetUTcefTT</a></p>\n<!-- ## RFID 的延伸教學：\n\n[Webduino Blockly 課程 16-1：偵測 RFID](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/rfid-1#-K45oDB4TmzOFSNMPGGG)  \n[Webduino Blockly 課程 16-2：RFID 紅綠燈](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/rfid-2#-K45qdjcmCYGz9YaNcUp)  \n[Webduino Blockly 課程 16-3：RFID 控制 Youtube](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/rfid-3#-K462IpY3cfK91yLDK3M) \n\n<div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>    --> \n<!-- @@close-->"},"tutorial-20-rfid-youtube":{"tag":"tutorial","src":"tutorial-20-rfid-youtube.html","title":"Switch Youtube Videos with RFID Keys","banner":"tutorial-20-01.jpg","img":"tutorial-20-01s.jpg","date":20160113,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 20: Switch Youtube Videos with RFID Keys :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"In the previous project tutorial, we introduced the basic theory of RFIDs. In this tutorial, we will demonstrate an advaced use for the RFID sensor - switching Youtube videos with RFID keys.\">\n\n<meta itemprop=\"description\" content=\"In the previous project tutorial, we introduced the basic theory of RFIDs. In this tutorial, we will demonstrate an advaced use for the RFID sensor - switching Youtube videos with RFID keys.\">\n\n<meta property=\"og:description\" content=\"In the previous project tutorial, we introduced the basic theory of RFIDs. In this tutorial, we will demonstrate an advaced use for the RFID sensor - switching Youtube videos with RFID keys.\">\n\n<meta property=\"og:title\" content=\"Project Example 20: Switch Youtube Videos with RFID Keys\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-20-rfid-youtube.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-20-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-20-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-20-switch-youtube-videos-with-rfid-keys\">Project Example 20: Switch Youtube Videos with RFID Keys</h1>\n<p>In the previous project tutorial, we introduced the basic theory of RFIDs. In this tutorial, we will demonstrate an advanced use for the RFID sensor - switching Youtube videos with RFID keys.</p>\n<!-- <div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial-\">Video Tutorial:</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/RrCAOgtPHdo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"the-circuit\">The Circuit</h2>\n<p>The circuit is exactly the same as in previous project tutorial. Connect SDA to 10, SCK to 13, MOSI to 11, MISO to 12, GND to GND, and VCC to 3.3V. Due to the limitation of pins, <strong>you will have to use the Arduino UNO along with the Webduino Fly in this exercise</strong>.</p>\n<p>Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-20-02.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-20-03.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open Webduino Blockly by typing the address: <a href=\"https://blockly.webduino.io/?lang=en\">https://blockly.webduino.io/?lang=en</a> into your browser. You will need to use &quot;Show Text&quot; in the Web Demo Area to show the UIDs of RFID keys, and will need to use &quot;Youtube&quot; afterwards.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-20-04.jpg\" alt=\"\"></p>\n<p>Drag a &quot;Board&quot; block in the workspace, and fill in the name of your Webduino board. Add an &quot;RFID&quot; block, which is under &quot;Sensors&quot;, and set the name &quot;RFID&quot;, SDA to 10, SCK to 13, MOSI to 11, and MISO to 12. Note that all of the pins are set to their default values, which are not able to be changed. Finally, add an &quot;RFID starts detecting...&quot; block, and combine a &quot;Show Text&quot; block and an &quot;RFID&#39;s UID&quot; block to place inside.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-20-05.jpg\" alt=\"\"></p>\n<p>Once you&#39;ve finished, check your <a href=\"https://webduino.io/device.html\">device&#39;s status</a> and press &quot;Run Blocks&quot;. When you bring your RFID key in front of the sensor, a UID will generate. Note down all the UIDs. You will use them in the following steps. </p>\n<p><img src=\"../../img/tutorials/en/tutorial-20-06.jpg\" alt=\"\"></p>\n<p>Find the &quot;Set Youtube&quot; block in the drop-down menu under &quot;Youtube&quot; and drag it to the workspace. <strong>Never place this block in the blank connection of the RFID detetion block.</strong> Otherwise, there will be an error every time the RFID starts detecting. </p>\n<p><img src=\"../../img/tutorials/en/tutorial-20-07.jpg\" alt=\"\"></p>\n<p>Open a video on Youtube, and copy the video ID in the address bar. Then, input the ID into the &quot;Set Youtube&quot; block.</p>\n<p><img src=\"../../img/tutorials/tutorial-20-08.jpg\" alt=\"\"></p>\n<p>If you wish to switch between multiple videos, you have to add a &quot;If RFID&#39;s UID is...&quot; block with a &quot;Change Youtube replace ID:&quot; block connected to the setup to determine the next video. Then key in the video&#39;s ID as well.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-20-09.jpg\" alt=\"\"></p>\n<p>You can control the volume and speed of the videos by combining blocks, as well.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-20-10.jpg\" alt=\"\"></p>\n<p>After you finish creating the block stack, check your <a href=\"https://webduino.io/device.html\">device&#39;s status</a> before you run all the blocks. Then you can switch Youtube videos with RFID keys! Check your stack setup with this example here: <a href=\"https://blockly.webduino.io/?lang=en#-KTNvQXw5Q_x2YVR35Re\">https://blockly.webduino.io/?lang=en#-KTNvQXw5Q_x2YVR35Re</a></p>\n<p><img src=\"../../img/tutorials/en/tutorial-20-11.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"http://bin.webduino.io/yusuv/edit?html,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files. However, you have to include <code>iframe_api</code> in this project to access Youtube.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://www.youtube.com/iframe_api&quot;&gt;&lt;/script&gt;\n</code></pre><p>There is a div tag in the html, where we will show our YouTube video in.</p>\n<pre><code>&lt;div id=&quot;player&quot;&gt;&lt;/div&gt;\n</code></pre><p>The lengthy parts are JavaScript code to embed a YouTube video in html. We suggest you read this document: <a href=\"https://www.youtube.com/yt/dev/zh-TW/api-resources.html\">https://www.youtube.com/yt/dev/zh-TW/api-resources.html</a> to have full control of the video. We use the method <code>on()</code> to start reading RFID tags. After we get the tag ID, we call the YouTube function that is mentioned above in accordance with this ID.</p>\n<pre><code>var rfid;\nvar youtube;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  rfid = getRFID(board);\n  var checkYoutubeLoad=0;\n  onYouTubeIframeAPIReady();\n  function onYouTubeIframeAPIReady() {\n    youtube = new YT.Player(&quot;player&quot;, {\n      height: &quot;240&quot;,\n      width: &quot;96%&quot;,\n      videoId: &quot;YLoRXX2jMkc&quot;,\n      playerVars: {\n        &quot;autoplay&quot;: 1,\n        &quot;controls&quot;: 1},\n      events: {\n        &quot;onReady&quot;: onPlayerReady,\n        &quot;onStateChange&quot;: onPlayerStateChange\n      }\n    });\n  }\n  function onPlayerReady(event) {\n    event.target.playVideo();\n    checkYoutubeLoad=1;\n  }\n  var done = false;\n  function onPlayerStateChange(event) {\n    if (event.data == YT.PlayerState.PLAYING &amp;&amp; !done) {\n      done = true;\n    }\n  }\n  function stopVideo() {\n    youtube.stopVideo();\n  }\n  rfid.read();\n  rfid.on(&quot;enter&quot;,function(_uid){\n    rfid._uid = _uid;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = rfid._uid;\n    if(rfid._uid == &#39;679D4F55&#39;){\n      youtube.loadVideoById(&#39;PIZ3p8LTDaA&#39;);\n    }\n    if(rfid._uid == &#39;B4AE2E00&#39;){\n      youtube.loadVideoById(&#39;YLoRXX2jMkc&#39;);\n    }\n  });\n});\n</code></pre><p>This was an example of how to use RFID-RC522 to read RFID keys and to control Youtube videos. We hope you enjoyed it!<br>Webduino Bin: <a href=\"http://bin.webduino.io/yusuv/edit?html,js,output\">http://bin.webduino.io/yusuv/edit?html,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KTqoMm2WLMDB-5QwRpk\">https://blockly.webduino.io/?lang=en#-KTqoMm2WLMDB-5QwRpk</a></p>\n<!-- ## TuTorial Extension of RFID:\n\n[Webduino Blockly Chapter 16-1: RFID](https://blockly.webduino.io/?lang=en&page=tutorials/rfid-1#-KTOFSXys4BxAwvxrcpr)  \n[Webduino Blockly Chapter 16-2: RFID and RGB LED](https://blockly.webduino.io/?lang=en&page=tutorials/rfid-2#-KTOFyGDNYv1SWMpMKLN)  \n[Webduino Blockly Chapter 16-3: RFID and Youtube](https://blockly.webduino.io/?lang=en&page=tutorials/rfid-3#-KTOG5IsDTu4uuCyigqn)   -->\n<!-- <div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>  -->  \n<!-- @@close-->"},"tutorial-21-toycar":{"tag":"tutorial","src":"tutorial-21-toycar.html","title":"Control a Robot Car","banner":"tutorial-21-01.jpg","img":"tutorial-21-01s.jpg","date":20160114,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 21: Control a Robot Car :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"The Webduino Robot Car is a self-driving robotic car designed by the Webduino Team. The Webduino Mark 1 is the brain for this gadget, enabling it to autonomously navigate and avoid obstacles using the ultrasonic sensor. In this tutorial, you will learn how to use keyboard controls to run the Robot Car.\">\n\n<meta itemprop=\"description\" content=\"The Webduino Robot Car is a self-driving robotic car designed by the Webduino Team. The Webduino Mark 1 is the brain for this gadget, enabling it to autonomously navigate and avoid obstacles using the ultrasonic sensor. In this tutorial, you will learn how to use keyboard controls to run the Robot Car.\">\n\n<meta property=\"og:description\" content=\"The Webduino Robot Car is a self-driving robotic car designed by the Webduino Team. The Webduino Mark 1 is the brain for this gadget, enabling it to autonomously navigate and avoid obstacles using the ultrasonic sensor. In this tutorial, you will learn how to use keyboard controls to run the Robot Car.\">\n\n<meta property=\"og:title\" content=\"Project Example 21: Control a Robot Car\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-21-toycar.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-21-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-21-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-21-control-a-robot-car\">Project Example 21: Control a Robot Car</h1>\n<p>The &quot;Webduino Robot Car&quot; is a self-driving robotic car designed by the Webduino Team. The Webduino Mark 1 is the brain for this gadget, enabling it to autonomously navigate and avoid obstacles using the ultrasonic sensor. In this tutorial, you will learn how to use keyboard controls to run the Robot Car.</p>\n<!-- <div class=\"buy-this\">\n    <span>自走車相關套件：<a href=\"https://webduino.io/buy/webduino-package-toycar.html\" target=\"_blank\">Webduino 公仔自走車 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/0JT1KAHkMsk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"the-circuit\">The Circuit</h2>\n<p>We will begin by unboxing the pieces of the Robot Car. The package includes 1 3D printed motor shield, 2 wheels, 1 switch, 1 battery case, 1 motor driver board, 1 ultrasonic sensor, and Webduino Mark 1. The assemble is simple, just follow the instructions below.</p>\n<p>First, insert 4 AA batteries into the case and place the case on the Robot Car.</p>\n<p><img src=\"../../img/tutorials/tutorial-21-02.jpg\" alt=\"\"></p>\n<p>Next, insert the Webduino Mark 1 into the front slot.</p>\n<p><img src=\"../../img/tutorials/tutorial-21-03.jpg\" alt=\"\"></p>\n<p>Then, insert the ultrasonic sensor into the left port on the Webduino Mark 1. Make sure Trig is connected to pin 11 and Echo to pin 10.</p>\n<p><img src=\"../../img/tutorials/tutorial-21-04.jpg\" alt=\"\"></p>\n<p>Finally, insert the motor driver board into the right port. Except with the 3.3V, you will see that the motor board has an extra pin soldered on. It has been soldered with a line, so it can be connected to the board.</p>\n<p><img src=\"../../img/tutorials/tutorial-21-05.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/en/tutorial-21-06.jpg\" alt=\"\"></p>\n<p>Once you place the micro switch in it&#39;s position the assembly is finished. Now use the micro switch to turn it on and you can start start using your Robot Car!</p>\n<p><img src=\"../../img/tutorials/tutorial-21-07.jpg\" alt=\"\"></p>\n<p>Final look:</p>\n<p><img src=\"../../img/tutorials/tutorial-21-08.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>自走車相關套件：<a href=\"https://webduino.io/buy/webduino-package-toycar.html\" target=\"_blank\">Webduino 公仔自走車 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a></span>\n</div> -->\n<h2 id=\"instruction-of-webduino-blockly\">Instruction of Webduino Blockly</h2>\n<p>Open the Webduino Blockly page by typing the address: <a href=\"https://blockly.webduino.io/?lang=en\">https://blockly.webduino.io/?lang=en</a> into your web browser. Now we can start using Webduino Blockly to control your Robot Car.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-21-09.jpg\" alt=\"\"></p>\n<p>Drag a &quot;Board&quot; block onto the workspace, and type in the name of your board. Find the &quot;Car&quot; block under &quot;Gadgets&quot;, and combine it with the board. Then, make sure the name is set to &quot;Car&quot; and the pins are set to 6, 7, 8, and 9, respectively.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-21-10.jpg\" alt=\"\"></p>\n<p>In the side menu, under &quot;Advanced&quot; you will find the &quot;Keyboard&quot; blocks.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-21-11.jpg\" alt=\"\"></p>\n<p>If you want to comand your Robot Car to move, you will need to combine 3 blocks. First, combine the &quot;Start keyboard event&quot; and &quot;Key..., do&quot; blocks to the stack. Set the start keyboard event to &quot;Down&quot;, and &quot;key W, do&quot;. Finally, place the &quot;Car&quot; block &quot;Car, Action …:&quot; and set it to &quot;go front&quot;. So now, when you press W on your keyboard, the Robot Car will go forwards.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-21-12.jpg\" alt=\"\"></p>\n<p>Using the same logic, you can comand the car to go multiple different dirrections by adding more blocks in the same manner.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-21-13.jpg\" alt=\"\"></p>\n<p>It is important that the Robot Car stops, as well. So, right-click the &quot;Start keyboard event&quot; block stack, and select &quot;Duplicate&quot;. A copy of those blocks will appear. Place the copied blocks under the first section.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-21-14.jpg\" alt=\"\"></p>\n<p>Finally, set the start keyboard event to &quot;Up&quot; and the car action to &quot;Stop&quot;. Now the Robot Car will stop when you stop pressing a key.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-21-15.jpg\" alt=\"\"></p>\n<p>After you finish creating the block stack, check your &quot;<a href=\"https://webduino.io/device.html\">device&#39;s status</a>&quot; before you &quot;Run&quot; all of the blocks. Then you can start using your Robot Car!\nCheck your stack setup with this example here: <a href=\"https://blockly.webduino.io/?lang=en#-KTOU3TF1GtBhb0kfhv-\">https://blockly.webduino.io/?lang=en#-KTOU3TF1GtBhb0kfhv-</a></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/pehev/1/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a></p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>The code is mainly for using the keyboard. Every key on the keyboard generates a corresponding <code>keyCode</code> when it is pressed. <strong>We use a switch statement to do different things according to the keyCodes.</strong> In most cases, keyCodes remain consistent for all alphabets, however, they may vary for keyboards with or without a numeric pad, or on a Mac operating systems.</p>\n<pre><code>var car;\n\nboardReady(&#39;&#39;, async function (board) {\n  board.systemReset();\n  board.samplingInterval = 20;\n  car = getToyCar(board,6,7,8,9);\n  document.onkeydown = async function(e){\n    console.log(e.keyCode);\n    switch(e.keyCode){\n      case 87:\n        car.goFront();\n      break;\n      case 83:\n        car.goBack();\n      break;\n      case 65:\n        car.turnLeft();\n      break;\n      case 68:\n        car.turnRight();\n      break;\n    }\n  };\n  document.onkeyup = async function(e2){\n    console.log(e2.keyCode);\n    switch(e2.keyCode){\n      case 87:\n        car.stop();\n      break;\n      case 83:\n        car.stop();\n      break;\n      case 65:\n        car.stop();\n      break;\n      case 68:\n        car.stop();\n      break;\n    }\n  };\n});\n</code></pre><p>This was the example of how to use keyboard keys to control your Robot Car, we hope you enjoyed it!<br>Webduino Bin: <a href=\"https://bin.webduino.io/pehev/1/edit?html,css,js,output\">https://bin.webduino.io/pehev/1/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KTOTUox9NoWndV__mj_\">https://blockly.webduino.io/?lang=en#-KTOTUox9NoWndV__mj_</a></p>\n<!-- ## 自走車的延伸教學：\n\n[Webduino Blockly 課程：操控自走車](https://blockly.webduino.io/?lang=zh-hant#-KGMmvTNDxkWIiIklD7I)  \n[Webduino Blockly 課程：超音波避障自走車](https://blockly.webduino.io/?lang=zh-hant#-KGMn222ejGP0edhX-KL)  \n[Webduino Blockly 課程：語音聲控自走車](https://blockly.webduino.io/?lang=zh-hant#-KGMn7k6rIv8_1om2-xa)  -->    \n<!-- <div class=\"buy-this\">\n    <span>自走車相關套件：<a href=\"https://webduino.io/buy/webduino-package-toycar.html\" target=\"_blank\">Webduino 公仔自走車 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-22-speech-led":{"tag":"tutorial","src":"tutorial-22-speech-led.html","title":"Voice Activated LEDs","banner":"tutorial-22-01.jpg","img":"tutorial-22-01s.jpg","date":20160123,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 22: Voice Activated LEDs :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino uses the Chrome internet browser to control all sorts of electronic components, so we should be able to use all other functions that Chrome has to offer. In this project example we will use Chrome's Speech API. Using Google's voice recognition, we can easily control an LED light. The same method could be used with a relay, allowing us to control a light bulb, door lock, or house appliances.\">\n\n<meta itemprop=\"description\" content=\"Webduino uses the Chrome internet browser to control all sorts of electronic components, so we should be able to use all other functions that Chrome has to offer. In this project example we will use Chrome's Speech API. Using Google's voice recognition, we can easily control an LED light. The same method could be used with a relay, allowing us to control a light bulb, door lock, or house appliances.\">\n\n<meta property=\"og:description\" content=\"Webduino uses the Chrome internet browser to control all sorts of electronic components, so we should be able to use all other functions that Chrome has to offer. In this project example we will use Chrome's Speech API. Using Google's voice recognition, we can easily control an LED light. The same method could be used with a relay, allowing us to control a light bulb, door lock, or house appliances.\">\n\n<meta property=\"og:title\" content=\"Project Example 22: Voice Activated LEDs\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-22-speech-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-22-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-22-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-22-voice-activated-leds\">Project Example 22: Voice Activated LEDs</h1>\n<p>Webduino uses the Chrome internet browser to control all sorts of electronic components, so we should be able to use all other functions that Chrome has to offer. In this project example we will use Chrome&#39;s Speech API. Using Google&#39;s voice recognition, we can easily control an LED light. The same method could be used with a relay, allowing us to control a light bulb, door lock, or house appliances.</p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/FXoe5k6_iQo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>This tutorial only uses one LED. Remember that LEDs have a longer leg and a shorter leg. The longer leg goes to high potential (pins that have a number) and the shorter leg goes to low potential (GND). So, plug the LED into the correct pins directly on your board or use a breadboard and jumper wires. For this tutorial, <strong>connect the longer leg to 10 and the shorter leg to GND</strong>.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-22-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-22-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-22-03.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blocky Editor</a>, and click on the &quot;Web Demo Area&quot; button, click on the drop down menu and choose &quot;Show Text&quot;.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-04.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; into the workspace, fill in the name of your Webduino board, and place an &quot;LED&quot; block into the stack. Set the name to led and pin to 10.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-05.jpg\" alt=\"\"></p>\n<p>Click on &quot;Voice control&quot; under the &quot;Advanced&quot; menu to find the blocks we need for this example.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-06.jpg\" alt=\"\"></p>\n<p>Place the &quot;Start Recognition&quot; block into the stack. Voice recognition can only work with one language at a time (here we can choose Mandarin or English).</p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-07.jpg\" alt=\"\"></p>\n<p>The &quot;interimResults&quot; on the &quot;Voice control&quot; block is used to control how we want the voice recognition to read our speech. If it is set to &quot;on&quot; it will recognize every word spoken, and if it is set to &quot;off&quot; it will recognize pauses creating sentences. If you are using a browser on a computer, we recommend setting it to &quot;on&quot;, so you will receive better results. <strong>If you are using a mobile phone, set it to &quot;off&quot;. The speech recognition will only work for phones that run on Android.</strong></p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-08.jpg\" alt=\"\"></p>\n<p>Next, place a &quot;Show Text&quot; block in the stack with an &quot;Recognized text&quot; block attached, so that the words understood by the voice recognition are shown on the screen.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-09.jpg\" alt=\"\"></p>\n<p>Then place an &quot;if word include / do&quot; block inside the &quot;Recognition&quot; block to program an action. In the example, we make an LED turn on and off when we say &quot;turn on the lights&quot; and &quot;turn off the lights&quot;. Or, if we say &quot;blink&quot; the LED will flash.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-10.jpg\" alt=\"\"></p>\n<p>If you need to create multiple commands, use a &quot;List&quot; block to place commands inside of one action.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-11.jpg\" alt=\"\"></p>\n<p>Check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. A popup window will ask if you will allow the microphone to be used, click &quot;Allow&quot;.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-12.jpg\" alt=\"\"></p>\n<p>Then you can start talking and controlling an LED using voice recognition. (Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZUKrlUTBEA4YgkibSj\">https://blockly.webduino.io/?lang=en#-KZUKrlUTBEA4YgkibSj</a>)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-22-13.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"http://bin.webduino.io/tazaq/edit?html,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>There is only a span inside the HTML file used to show the recognized text.</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript mainly uses <code>webkitSpeechRecognition()</code>, a built-in voice recognition object in Chrome. Depending on different attributes, such as <code>continuous</code>, <code>interimResults</code> and <code>lang</code> we could set up the voice recognition. Voice recognition will return a <code>onresult</code> attribute with the text recognized inside. We can write a piece of code that will perform certain actions when we are saying the correct commands.</p>\n<pre><code>var led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  led = getLed(board, 10);\n  function speechRecognition(){\n    if (!(&quot;webkitSpeechRecognition&quot; in window)) {\n      alert(&quot;This browser doesn&#39;t support speech recognition. Please switch to google chrome. (You must use Chrome browser version 25 or later.)&quot;);\n    } else{\n      window._recognition = new webkitSpeechRecognition();\n      window._recognition.continuous = true;\n      window._recognition.interimResults = true;\n      window._recognition.lang = &quot;cmn-Hant-TW&quot;;\n\n      window._recognition.onstart = function() {\n        console.log(&quot;Start recognize...&quot;);\n      };\n\n      window._recognition.onend = function() {\n        console.log(&quot;Stop recognize&quot;);\n      };\n\n      window._recognition.onresult = function(event,result) {\n        result = {};\n        result.resultLength = event.results.length-1;\n        result.resultTranscript = event.results[result.resultLength][0].transcript;\n        if(event.results[result.resultLength].isFinal===false){\n          console.log(result.resultTranscript);\n            document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = result.resultTranscript;\n    if(result.resultTranscript.indexOf(&quot;turn on the lights&quot;)!==-1){\n              led.on();\n          }\n    if(result.resultTranscript.indexOf(&quot;turn off the lights&quot;)!==-1){\n              led.off();\n          }\n    if(result.resultTranscript.indexOf(&quot;blink&quot;)!==-1){\n              led.blink(0.5*1000);\n          }\n                }else if(event.results[result.resultLength].isFinal===true){\n          console.log(&quot;final&quot;);\n        }\n      };\n      window._recognition.start();\n    }\n  }\n  speechRecognition();\n});\n</code></pre><p>Here we have a simple intro to voice recognition and Blockly! \nWebduino Bin: <a href=\"http://bin.webduino.io/tazaq/edit?html,js,output\">http://bin.webduino.io/tazaq/edit?html,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZUKrlUTBEA4YgkibSj\">https://blockly.webduino.io/?lang=en#-KZUKrlUTBEA4YgkibSj</a></p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n -->\n<!-- @@close-->"},"tutorial-23-adxl345":{"tag":"tutorial","src":"tutorial-23-adxl345.html","title":"ADXL345 - 3-axis accelerometer","banner":"tutorial-23-01.jpg","img":"tutorial-23-01s.jpg","date":20160218,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 23: ADXL345 – 3-axis accelerometer :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"An accelerometer uses the acceleration of the three axes to determine its angle of rotation. In this project example we will be using a Webduino to control an ADXL345, a 3 axis accelerometer. We can choose to use the I2C or SPI protocol for data transfer, as the Arduino analog uses I2C. For this tutorial we will be using GND, VCC, CS, SDA and SCL.\">\n\n<meta itemprop=\"description\" content=\"An accelerometer uses the acceleration of the three axes to determine its angle of rotation. In this project example we will be using a Webduino to control an ADXL345, a 3 axis accelerometer. We can choose to use the I2C or SPI protocol for data transfer, as the Arduino analog uses I2C. For this tutorial we will be using GND, VCC, CS, SDA and SCL.\">\n\n<meta property=\"og:description\" content=\"An accelerometer uses the acceleration of the three axes to determine its angle of rotation. In this project example we will be using a Webduino to control an ADXL345, a 3 axis accelerometer. We can choose to use the I2C or SPI protocol for data transfer, as the Arduino analog uses I2C. For this tutorial we will be using GND, VCC, CS, SDA and SCL.\">\n\n<meta property=\"og:title\" content=\"Project Example 23: ADXL345 – 3-axis accelerometer\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-23-adxl345.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-23-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-23-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-23-adxl345-3-axis-accelerometer\">Project Example 23: ADXL345 – 3-axis accelerometer</h1>\n<p>An accelerometer uses the acceleration of the three axes to determine its angle of rotation. In this project example we will be using a Webduino to control an ADXL345, a 3 axis accelerometer. We can choose to use the I2C or SPI protocol for data transfer, as the Arduino analog uses I2C. For this tutorial we will be using GND, VCC, CS, SDA and SCL.</p>\n<!-- <div class=\"buy-this\">\n    <span>三軸加速度計相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?&page=tutorials/adxl345-1](https://blockly.webduino.io/?&page=tutorials/adxl345-1)   -->\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/SH4-Z7E1DZc\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>Connect VCC to 3.3V (careful, if the voltage is higher than 3.6V it will fry the chip), GND to GND, CS is also connected to VCC so the electric potential is the same for CS and VCC. This is to tell the chip to follow the I2C protocol. </p>\n<p>IN1 and IN2 are in charge of controlling the two output pins, and SDO is used with the SPI protocol. So we won&#39;t be using them in this example.</p>\n<p>Since we are using the I2C protocol we will need to add a pull-up resistor on the signal side. We add two 10k resistors here (on the Arduino’s official site it is recommended to use a 10k resistor as pull-up/pull-down resistors).</p>\n<p>Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-23-02.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-23-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-23-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-23-05.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>三軸加速度計相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blocky editor</a>, click on the &quot;Web Demo Area&quot; on the upper right hand side and click on &quot;Show Text&quot; from the dropdown menu. (Remember, you need to burn the firmware for the 3 axis accelerometer. Check out the tutorial: <a href=\"info-07-arduino-ino.html\">Arduino Firmware Download / burn</a>, choose GY291 or ADXL in the file name)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-23-06.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block inside the workspace, fill in the name of your Webduino board, and place an &quot;ADXL345&quot; block inside the stack. Set the name to asxl345, the SDA pin to A4, and the SCL to A5.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-23-07.jpg\" alt=\"\"></p>\n<p>Place a &quot;Start detecting&quot; in the stack and a &quot;Show&quot; block inside that, to show the value of what is being detected on the screen.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-23-08.jpg\" alt=\"\"></p>\n<p>Because the 3 axis accelerometer will return 5 values (X, Y, Z, Roll, and Pitch), <strong>we must use a &quot;Create List&quot; block to show all of the values</strong>. Click on the blue gear to add 5 spaces, so 5 values can be shown at the same time.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-23-09.jpg\" alt=\"\"></p>\n<p>Not only will we be showing the numbers, we also need to show what they mean! So, create a second level with a second set of &quot;Create List&quot; blocks. Place blocks to show the value names and the values detected by the accelerometer into these list blocks. In the &quot;Value&quot; block&#39;s drop-down menu you can decide what kind of values you want to use.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-23-10.jpg\" alt=\"\"></p>\n<p>To prevent the text from being too big we use the &quot;Text Size&quot; block set to 20.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-23-11.jpg\" alt=\"\"></p>\n<p>Check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. When turn the 3 axis accelerometer you can see the values showing on the Web Demo Area! (Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZdlc75acEollCJOVNl\">https://blockly.webduino.io/?lang=en#-KZdlc75acEollCJOVNl</a> )</p>\n<p><img src=\"../../img/tutorials/en/tutorial-23-12.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"http://bin.webduino.io/lizuv/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>There is only a span inside the HTML used to show the values of the 3-axis accelerometer. Because we only have one span, we needed the &quot;Create List&quot; block. (If you are familiar with HTML, we could also have 5 spans here.)</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript uses the <code>on</code> method, inside there is a function with 5 parameters, these 5 parameters are the 5 values of the 3 axis accelerometer. Using <code>innerHTML</code> to add the strings together, we can use these 5 values to show them in the span.</p>\n<pre><code>var adxl;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  adxl = getADXL345(board);\n  document.getElementById(&quot;demo-area-01-show&quot;).style.fontSize = 20+&quot;px&quot;;\n  adxl.setSensitivity = 0;\n  adxl.setBaseAxis = &quot;x&quot;;\n  adxl.on(function(_x,_y,_z,_r,_p){\n    adxl._x = _x;\n    adxl._y = _y;\n    adxl._z = _z;\n    adxl._r = _r;\n    adxl._p = _p;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ([String(&#39;X=&#39;) + String(adxl._x),String(&#39;, Y=&#39;) + String(adxl._y),String(&#39;, Z=&#39;) + String(adxl._z),String(&#39;, roll=&#39;) + String(adxl._r),String(&#39;, pitch=&#39;) + String(adxl._p)].join(&#39;&#39;));\n  });\n});\n</code></pre><p>Here&#39;s how to control a 3 axis accelerometer – ADXL345 and an intro to it&#39;s code.<br>Webduino Bin: <a href=\"http://bin.webduino.io/lizuv/edit?html,css,js,output\">http://bin.webduino.io/lizuv/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZdmvtd1QQFmPZRorSu\">https://blockly.webduino.io/?lang=en#-KZdmvtd1QQFmPZRorSu</a></p>\n<!-- ## 三軸加速度計的延伸教學：\n\n[Webduino Blockly 課程 14-1：控制三軸加速度計](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/adxl345-1#-K0pl9rB2TohBuBnorit)  \n[Webduino Blockly 課程 14-2：旋轉角度旋轉圖片](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/adxl345-2#-K0q9iZQIPc-9eLg9k2f)  \n[Webduino Blockly 課程 14-3：旋轉角度點亮 LED 燈](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/adxl345-3#-K0qEX3wukvZgtnn817T)  \n[Webduino Blockly 課程 14-4：旋轉角度改變點矩陣圖形](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/adxl345-4#-K0qKebEHBdfd19FzAvZ)\n\n<div class=\"buy-this\">\n    <span>三軸加速度計相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-24-ir":{"tag":"tutorial","src":"tutorial-24-ir.html","title":"Sending and receiving signals with an infrared sensor","banner":"tutorial-24-01.jpg","img":"tutorial-24-01s.jpg","date":20160221,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 24: Sending and receiving signals with an infrared sensor :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"We can find infrared sensors in the many electrical appliances in our daily life, such as TVs, air conditioners, remote controlled fans, toys… etc. Anything that is remote controlled, there's a pretty good chance that it is sending and receiving signals with an infrared sensor. This project example will show how to use the Webduino to send and receive information with an infrared sensor.\">\n\n<meta itemprop=\"description\" content=\"We can find infrared sensors in the many electrical appliances in our daily life, such as TVs, air conditioners, remote controlled fans, toys… etc. Anything that is remote controlled, there's a pretty good chance that it is sending and receiving signals with an infrared sensor. This project example will show how to use the Webduino to send and receive information with an infrared sensor.\">\n\n<meta property=\"og:description\" content=\"We can find infrared sensors in the many electrical appliances in our daily life, such as TVs, air conditioners, remote controlled fans, toys… etc. Anything that is remote controlled, there's a pretty good chance that it is sending and receiving signals with an infrared sensor. This project example will show how to use the Webduino to send and receive information with an infrared sensor.\">\n\n<meta property=\"og:title\" content=\"Project Example 24: Sending and receiving signals with an infrared sensor\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-24-ir.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-24-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-24-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-24-sending-and-receiving-signals-with-an-infrared-sensor\">Project Example 24: Sending and receiving signals with an infrared sensor</h1>\n<p>We can find infrared sensors in the many electrical appliances in our daily life, such as TVs, air conditioners, remote controlled fans, toys… etc. Anything that is remote controlled, there&#39;s a pretty good chance that it is sending and receiving signals with an infrared sensor. This project example will show how to use the Webduino to send and receive information with an infrared sensor.</p>\n<!-- <div class=\"buy-this\">\n    <span>紅外線發射與接收相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> \n -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<!-- 影片對應範例：[https://blockly.webduino.io/?&page=tutorials/irrecv-1](https://blockly.webduino.io/?&page=tutorials/irrecv-1) -->  \n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/lfN0D4198CM\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>Connect the leg nearest to the &quot;-&quot;&quot; on the infrared sensor to GND, the middle leg to 3.3V, and the leg closest to S connects to pin 10. Since we only have one oscillator on the Arduino, <strong>we cannot simultaneously send and receive an infrared signal on the same board</strong>. If we need to test sending a signal we could use an infrared receiver to receive a signal from a TV remote control and then use the infrared transmitter to send a signal to the TV.</p>\n<p>infrared receive sensor Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-24-02.jpg\" alt=\"\"></p>\n<p>infrared receive sensor Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-24-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-24-04.jpg\" alt=\"\"></p>\n<p>The infrared transmitter looks like a large LED, if you&#39;re not paying attention you might even connect to the wrong pins. <strong>We have to use pin number 9, which accesses to the oscillator, to send a square wave with the infrared transmitter</strong>. So connecting the infrared transmitter to other pins will not work. Here we connect the longer leg to pin 9 and the shorter one to GND.</p>\n<p>infrared transmitter Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-24-05.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>紅外線發射與接收相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>  -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blocky editor</a>, click on the &quot;Web Demo Area&quot; on the upper right hand side, and click on &quot;Show Text&quot; in the drop down menu. Don&#39;t forget, you need to burn the firmware for the infrared transmitter before you can proceed. (Check out the tutorial: <a href=\"info-07-arduino-ino.html\">Ardiuno Firmware Download / Burn</a> and choose the file name with IR)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-24-06.jpg\" alt=\"\"></p>\n<p>First, place a &quot;Board&quot; block into the workspace, fill in the name of your Webduino board, and place an &quot;IR&quot; block inside the stack. Then set the name to &quot;irrecv&quot; and the pin to 10.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-24-07.jpg\" alt=\"\"></p>\n<p>Place a &quot;start receiving / do&quot;, a &quot;show&quot;, and a &quot;receive code&quot; block, so we can show the values on screen.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-24-08.jpg\" alt=\"\"></p>\n<p>If we are sending an infrared signal, use the &quot;IR send&quot; block, set to &quot;irled&quot;, and the pin to 9.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-24-09.jpg\" alt=\"\"></p>\n<p>We can also use different buttons on screen to send different infrared signals. Using this method we could potentially create a webpage that works as a virtual remote control.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-24-10.jpg\" alt=\"\"></p>\n<p>Check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. Then you can start to receive or send infrared signals! (Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZdeUiX6sp1qxVxHt4V\">https://blockly.webduino.io/?lang=en#-KZdeUiX6sp1qxVxHt4V</a>)</p>\n<p>##Code Explanation (<a href=\"http://bin.webduino.io/jiguh/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>If we are using an infrared transmitter, there will only be a span inside the HTML code, to show the 3-axis accelerometer, and only because there is a span, we will need to use &quot;Create List&quot; block. (If you know how to write code, you could easily use 5 spans instead)</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>If you&#39;re using an infrared transmitter, HTML will just be the buttons.</p>\n<pre><code>&lt;button id=&quot;demo-area-05-btn1&quot; class=&quot;db5&quot;&gt;按鈕 1&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn2&quot; class=&quot;db5&quot;&gt;按鈕 2&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn3&quot; class=&quot;db5&quot;&gt;按鈕 3&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn4&quot; class=&quot;db5&quot;&gt;按鈕 4&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn5&quot; class=&quot;db5&quot;&gt;按鈕 5&lt;/button&gt;\n</code></pre><p>The IR Recv used <code>on</code> in JavaScript, there&#39;s a function with a parameter, used to receive the signal value and by using <code>innerHTML</code> to sum with strings, we can use this value to display inside the span.</p>\n<pre><code>var irrecv;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  irrecv = getIRRecv(board, 10);\n  irrecv.on(function(val){\n    irrecv.onVal = val;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = irrecv.onVal;\n  },function(){});\n});\n</code></pre><p>As for the IR Send, it uses <code>send</code> to send signals, type in the message behind this and you can send them out.</p>\n<pre><code>var irled;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  irled = getIRLed(board, &quot;ffffffff&quot;);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n  document.getElementById(&quot;demo-area-05-btn5&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n});\n</code></pre><p>This is how we control an infrared sensor to send and receive information.<br>Webduino Bin: <a href=\"http://bin.webduino.io/jiguh/edit?html,css,js,output\">http://bin.webduino.io/jiguh/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZdfQS23mis7qSo0vzQ\">https://blockly.webduino.io/?lang=en#-KZdfQS23mis7qSo0vzQ</a></p>\n<!-- ## 紅外線發射與接收的延伸教學：\n\n[Webduino Blockly 課程 15-1：接收紅外線訊號](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/irrecv-1#-K0qf8JH7bENOyJgc25r)  \n[Webduino Blockly 課程 15-2：接收紅外線訊號改變區域顏色](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/irrecv-2#-K0qhamTHkjMc9nZg4rc)  \n[Webduino Blockly 課程 15-3：紅外線遙控 youtube 播放](https://blockly.webduino.io/?lang=zh-hant&page=tutorials/irrecv-3#-K0qllY_jNznqTDWliZ4) \n\n<div class=\"buy-this\">\n    <span>紅外線發射與接收相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>  -->\n<!-- @@close-->"},"tutorial-25-joypad":{"tag":"tutorial","src":"tutorial-25-joypad.html","title":"Detecting a joystick","banner":"tutorial-25-01.jpg","img":"tutorial-25-01s.jpg","date":20160222,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 25: Detecting a joystick :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"A joystick is an integral part of many video games. It sends three signals, left / right, front / back, and when it is pressed. We can use the Webduino to detect signals coming from a joystick and use it to control cars, robots, or other devices, creating many interesting applications.\">\n\n<meta itemprop=\"description\" content=\"A joystick is an integral part of many video games. It sends three signals, left / right, front / back, and when it is pressed. We can use the Webduino to detect signals coming from a joystick and use it to control cars, robots, or other devices, creating many interesting applications.\">\n\n<meta property=\"og:description\" content=\"A joystick is an integral part of many video games. It sends three signals, left / right, front / back, and when it is pressed. We can use the Webduino to detect signals coming from a joystick and use it to control cars, robots, or other devices, creating many interesting applications.\">\n\n<meta property=\"og:title\" content=\"Project Example 25: Detecting a joystick\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-25-joypad.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-25-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-25-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-25-detecting-a-joystick\">Project Example 25: Detecting a joystick</h1>\n<p>A joystick is an integral part of many video games. It sends three signals, left / right, front / back, and when it is pressed. We can use the Webduino to detect signals coming from a joystick and use it to control cars, robots, or other devices, creating many interesting applications.</p>\n<!-- <div class=\"buy-this\">\n    <span>搖桿相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/CwWwQmuvL28\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>A joystick has 5 pins, GND, 5V, VRx, VRy, and SW. VRx and VRy are analog pins, connect them to A4 and A5. Think of SW as a button. So, when it&#39;s connected to GND and 5V it will need a resistor to prevent shorting the circuit when the joystick is pressed. We are restricted to the circuit design of the joystick itself, so we need to use a pull-up resistor. Connect both the resistor and the signal source to 5V.</p>\n<p>Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-25-02.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-25-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-25-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-25-05.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-25-06.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>搖桿相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/index.html?lang=en\">Webduino Blockly editor</a>, click on &quot;Web Demo Area&quot; button on the upper-right hand side, and choose &quot;Show Text&quot; from the drop-down menu. Don’t forget to burn the firmware for the joystick first! ( Check out the tutorial: <a href=\"info-07-arduino-ino.html\">Arduino Firmware Download / Burn</a> and choose the file with &quot;joypad&quot; )</p>\n<p><img src=\"../../img/tutorials/en/tutorial-25-07.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; inside the workspace and fill in the name of your Webduino board. Place a &quot;Set Joystick to&quot; block inside the stack and set the name to joystick, pin X to A4, Y to A5, and SW to 10.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-25-08.jpg\" alt=\"\"></p>\n<p>Place &quot;Start detecting&quot; and &quot;Show&quot; blocks in the stack, so when we are using the joystick, the values will show in the window.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-25-09.jpg\" alt=\"\"></p>\n<p>Because the joystick returns 3 values (X, Y, SW) but there is only one slot for &quot;Show&quot;, <strong>use a &quot;Create List&quot; block</strong>. Click on the blue gear icon and create 3 slots, so we can show all 3 values at once.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-25-10.jpg\" alt=\"\"></p>\n<p>We also need to show what the values mean, so create a second level of &quot;Create List&quot; blocks set into the first. Add the names of the Joystick values, and choose what values will be received from the drop-down menu.You can also set the text size by adding &quot;Text Size&quot;, we will set it to 20 in this example.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-25-11.jpg\" alt=\"\"></p>\n<p>After you are done setting up the stack, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;, move or press the joystick and you will see the values change.\n(Solution: <a href=\"https://blockly.webduino.io/#-KB6z6vqt9sXTYqd7CN8\">https://blockly.webduino.io/#-KB6z6vqt9sXTYqd7CN8</a> )</p>\n<p><img src=\"../../img/tutorials/en/tutorial-25-12.jpg\" alt=\"\"></p>\n<p>If you don&#39;t like having a lot of numbers after the decimal point, we can also use the &quot;Math Conversion&quot; block in &quot;Advanced&quot; menu, so the numbers will round up to the first decimal point.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-25-13.jpg\" alt=\"\"></p>\n<p>After you are done setting up the stack, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and also click on &quot;Run Blocks&quot;, turn or press the joystick and you will see the values change. (Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZu4LTKyfrsNVBeMwsG\">https://blockly.webduino.io/?lang=en#-KZu4LTKyfrsNVBeMwsG</a>)</p>\n<p>##Code Explanation (<a href=\"http://bin.webduino.io/wifak/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>We use a span to display the values returned from the joystick.</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>The Joystick in JavaScript uses <code>on</code> where there is a function with three parameters, these three parameters are the joystick’s X, Y and SW values, using <code>innerHTML</code> to add with the strings, we can use these values to display inside the span.</p>\n<pre><code>var joystick;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  joystick = getJoystick(board, 4, 5, 10);\n  document.getElementById(&quot;demo-area-01-show&quot;).style.fontSize = 20+&quot;px&quot;;\n  joystick.on(&quot;message&quot;,_read_);\n  function _read_(_x, _y, _z){\n    joystick._x = _x;\n    joystick._y = _y;\n    joystick._z = _z;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ([String(&#39;X=&#39;) + String((Math.round((joystick._x)*10))/10),String(&#39;, Y=&#39;) + String((Math.round((joystick._y)*10))/10),String(&#39;, SW=&#39;) + String((Math.round((joystick._z)*10))/10)].join(&#39;&#39;));\n  }\n});\n</code></pre><p>Now you know how to detecting a joystick!<br>Webduino Bin: <a href=\"http://bin.webduino.io/wifak/edit?html,css,js,output\">http://bin.webduino.io/wifak/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZu4LTKyfrsNVBeMwsG\">https://blockly.webduino.io/?lang=en#-KZu4LTKyfrsNVBeMwsG</a></p>\n<!-- <div class=\"buy-this\">\n    <span>搖桿相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-26-google-sheet":{"tag":"tutorial","src":"tutorial-26-google-sheet.html","title":"Controlling an LED with Google Sheets","banner":"tutorial-26-01.jpg","img":"tutorial-26-01s.jpg","date":20160307,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 26: Controlling an LED with Google Sheets :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Google Sheets is a commonly used online service from Google, offering full spreadsheet capabilities. It can be used with Google Forms, acting as a database for your survey answers. In this tutorial, we will fill a Google Form, average and round off the results, then show the information through a number of LEDs.\">\n\n<meta itemprop=\"description\" content=\"Google Sheets is a commonly used online service from Google, offering full spreadsheet capabilities. It can be used with Google Forms, acting as a database for your survey answers. In this tutorial, we will fill a Google Form, average and round off the results, then show the information through a number of LEDs.\">\n\n<meta property=\"og:description\" content=\"Google Sheets is a commonly used online service from Google, offering full spreadsheet capabilities. It can be used with Google Forms, acting as a database for your survey answers. In this tutorial, we will fill a Google Form, average and round off the results, then show the information through a number of LEDs.\">\n\n<meta property=\"og:title\" content=\"Project Example 26: Controlling an LED with Google Sheets\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-26-google-sheet.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-26-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-26-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-26-controlling-an-led-with-google-sheets\">Project Example 26: Controlling an LED with Google Sheets</h1>\n<p>Google Sheets is a commonly used online service from Google, offering full spreadsheet capabilities. It can be used with Google Forms, acting as a database for your survey answers. In this tutorial, we will fill a Google Form, average and round off the results, then show the information through a number of LEDs.</p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/mpwSAFwlL_0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>We will only be using 7 LEDs for this tutorial, one LED each for a score of 1 - 7. Connect the LEDs with solid wire and a breadboard, connecting the longer legs to pin 7, 8, 9, 10, 11, 12, 13 and the shorter legs to GND.</p>\n<p>Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-26-02.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-26-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-26-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-26-05.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions\">Instructions</h2>\n<p>Since we will be using Google Forms, you will need to have a Google Drive account. Start by selecting &quot;NEW&quot; to open a new Folder or directly open a new Google Form file. In this tutorial we&#39;ve created a Folder named &quot;test&quot; to keep all of our forms and sheets.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-06.jpg\" alt=\"\"></p>\n<p>Open the Form, type in a name for the Form (later on, an automatically generated spreadsheet will share the same name), click on the &quot;Responses&quot; tab and click on &quot;Create Spreadsheet&quot; to create a spreadsheet that is linked to this Form.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-07.jpg\" alt=\"\"></p>\n<p>Now, click on the &quot;Questions&quot; tab, here we can add a few questions for our survey. Let&#39;s create a &quot;Linear Scale&quot; question, set 1 to 7, so when a user chooses a number, Google Sheets will record the selection.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-08.jpg\" alt=\"\"></p>\n<p>Click on the &quot;eye&quot; icon on the upper-right hand side to preview, select 7 and click &quot;submit&quot;.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-09.jpg\" alt=\"\"></p>\n<p>Once you&#39;ve done that, return to Google Drive, find the matching Google Sheet and open it.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-10.jpg\" alt=\"\"></p>\n<p>The first column records the &quot;timestamp&quot;, indicating when the answer was recorded and the second column shows the number recorded.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-11.jpg\" alt=\"\"></p>\n<p>To calculate the average, type &quot;Average&quot; in C1 and then type the formula from the picture below into D1.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-12.jpg\" alt=\"\"></p>\n<p>Use the formula below for calculations</p>\n<pre><code>=IF(TYPE(ROUND(AVERAGE(B:B)))=16,0,ROUND(AVERAGE(B:B)))\n</code></pre><p>Then type in the Device name of the board we are using in cell E1.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-13.jpg\" alt=\"\"></p>\n<p>Now for <strong>the most important</strong> part; select &quot;Tools&quot; &gt; &quot;Script Editor&quot; which will open a new page with the developer tools for this spreadsheet, then type in the code provided below. This piece of code will control the LEDs to light up according to the average scores from the spreadsheet.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-14.jpg\" alt=\"\"></p>\n<pre><code>function myFunction() {\n  var sheet = SpreadsheetApp.getActiveSheet();\n  var device = sheet.getRange(&#39;E1&#39;).getValue();\n  var a = sheet.getRange(&#39;D1&#39;).getValue();\n  led(device,a);\n}\n\nfunction led(d,r){\n  for(var i=7; i&lt;=13; i++){\n    setPin(d,i,0);\n    if(i==13){\n      for(var j=0; j&lt;r; j++){\n        setPin(d,13-j,1);\n      }\n    }\n  }\n}\n\nfunction setPin(id,pin,state){\n   var response = UrlFetchApp.fetch(&quot;http://webduino.tw/iot/&quot;+id+&quot;/set/&quot;+pin+&quot;/&quot;+state);\n}\n</code></pre><p>After you&#39;ve typed in all of the code correctly, click &quot;Resources&quot; &gt; &quot;All your triggers&quot;, enter a new project name when prompted and press &quot;ok&quot;. If you are asked to &quot;authorize&quot; following actions, click ok. Then click &quot;No triggers set up, click here to add one now&quot;.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-15.jpg\" alt=\"\"></p>\n<p>To &quot;Run&quot; your piece of code when the spreadsheet has changes, you have to create two triggers. For the first trigger set &quot;Events&quot; to &quot;From spreadsheet&quot; and &quot;On change&quot; and for the second set &quot;Events&quot; to &quot;From spreadsheet&quot; and &quot;On form submit&quot;. So then, when an user fills out the spreadsheet and submits it, your code will run.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-26-16.jpg\" alt=\"\"></p>\n<p>Now for the very last step, fill in the &quot;Device&quot; name of your board on cell E1, check if your board is online (you can check here: <a href=\"https://webduino.io/device.html\">https://webduino.io/device.html</a> ), fill in the Form and submit it. You will see the number of LEDs light up correspond with the numbers that are filled in.</p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-27-tracking-face":{"tag":"tutorial","src":"tutorial-27-tracking-face.html","title":"Controlling LEDs with face tracking","banner":"tutorial-27-01.jpg","img":"tutorial-27-01s.jpg","date":20160308,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 27: Controlling LEDs with face tracking :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"With web browsers evolving, we can use new web technology to satisfy a once distant dream! In this tutorial, we will be using a webcam for facial recognition and tracking, and controlling LEDs according to its position.\">\n\n<meta itemprop=\"description\" content=\"With web browsers evolving, we can use new web technology to satisfy a once distant dream! In this tutorial, we will be using a webcam for facial recognition and tracking, and controlling LEDs according to its position.\">\n\n<meta property=\"og:description\" content=\"With web browsers evolving, we can use new web technology to satisfy a once distant dream! In this tutorial, we will be using a webcam for facial recognition and tracking, and controlling LEDs according to its position.\">\n\n<meta property=\"og:title\" content=\"Project Example 27: Controlling LEDs with face tracking\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-27-tracking-face.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-27-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-27-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-27-controlling-leds-with-face-tracking\">Project Example 27: Controlling LEDs with face tracking</h1>\n<p>With web browsers evolving, we can use new web technology to satisfy a once distant dream! In this tutorial, we will be using a webcam for facial recognition and tracking, and controlling LEDs according to its position.</p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Watch the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/GxOh2Gv9GJA\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>This tutorial only uses one LED. Plug the LED directly into the board or use a breadboard and jumper wires. In this tutorial, <strong>connect the longer leg to 10 and the shorter leg to GND</strong>.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-27-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-27-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-27-03.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/index.html?lang=en\">Webduino Blockly editor</a>, click on &quot;Web Demo Area&quot; on the upper right corner, and choose &quot;Tracking&quot; from the drop-down list.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-27-04.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block onto the workspace and enter the Webduino board name. Then place a &quot;Set LED to&quot; block inside and set the name to led, pin to 10.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-27-05.jpg\" alt=\"\"></p>\n<p>We will be using the &quot;Tracking&quot; blocks from the &quot;Web Demo&quot; menu for this stack.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-27-06.jpg\" alt=\"\"></p>\n<p>First place a &quot;Set tracking&quot; block in the stack, it can set it to track &quot;face&quot; or &quot;color&quot;, here we set it to &quot;face&quot;. </p>\n<p><img src=\"../../img/tutorials/en/tutorial-27-07.jpg\" alt=\"\"></p>\n<p>Inside the tracking block add an &quot;If Do Else&quot; block from &quot;Logic&quot; menu, with a logic equation block connected. Place a &quot;Tracking value&quot; block inside the equation set to &quot;Greater than&quot; and the number set to 100. Add two &quot;LED Set state&quot; blocks to the &quot;Do&quot; and &quot;Else&quot; sections of the logic block. Set them to &quot;On&quot; and &quot;Off&quot; respectively. This will turn the LED on when the x-axis is greater than 100, and turn off when it is less than 100.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-27-08.jpg\" alt=\"\"></p>\n<p>If you click on the drop-down menu, you can see that it allows us to track the x-axis, y-axis, width, height, total and color.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-27-09.jpg\" alt=\"\"></p>\n<p>Last, add the &quot;Track start tracking&quot; block to the bottom of the stack. Confirm that the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;), click on the red execution button &quot;Run Blocks&quot;, and you will see images streaming from your webcam onto the Web Demo area on the right hand side of your screen.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-27-10.jpg\" alt=\"\"></p>\n<p>If you don&#39;t see anything, your browser may be trying to protect you from privacy or safety issues, so the webcam will be disabled, A simple fix would be to change your protocol identifier in your web browser&#39;s address bar from http to https.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-27-11.jpg\" alt=\"\"></p>\n<p>If you&#39;d like to know the values currently being tracked, we can use the &quot;Console&quot; block from the &quot;Advanced&quot; menu with a &quot;Tracking value&quot; block connected to it placed inside of the &quot;Set tracking&quot; block. You will need your browser&#39;s console to be open as well, press F12 if you are using windows or option + command + i for Macs.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-27-12.jpg\" alt=\"\"></p>\n<p>Now you can use face tracking! \nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KYkzZOoD6aAOhnTKxGy\">https://blockly.webduino.io/?lang=en#-KYkzZOoD6aAOhnTKxGy</a></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/famar/1/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>Aside from the 2 pieces of JavaScript code above, we&#39;ve used 2 Open Source programs, tracking-min.js and face-min.js. We can only use face tracking after we&#39;ve imported these two.</p>\n<pre><code>&lt;script src=&quot;https://blockly.webduino.io/lib/tracking-min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://blockly.webduino.io/lib/face-min.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>Inside HTML there are video and canvas, both on the same side, we use video to show the streamed video and canvas to analyze and detect faces, using a red box to define the face.</p>\n<pre><code>&lt;div id=&quot;demo-area-08-content&quot;&gt;\n  &lt;video id=&quot;demo-area-08-video&quot; preload=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; controls=&quot;&quot;&gt;&lt;/video&gt;\n  &lt;canvas id=&quot;demo-area-08-canvas&quot;&gt;&lt;/canvas&gt;\n&lt;/div&gt;\n</code></pre><p>CSS is used to define the size for video and canvas.</p>\n<pre><code>#demo-area-08-content {\n  position: relative;\n  width: 100%;\n  max-width: 300px;\n  height: 200px;\n}\n\n#demo-area-08-video {\n  top: 0;\n  left: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n#demo-area-08-canvas {\n  top: 0;\n  left: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n</code></pre><p>We use a bit more of JavaScript here, mostly for tracking. There is also some settings: <code>setInitialScale</code>, <code>setStepSize</code>, <code>setEdgesDensity</code>, each representing scale, frequency, and depth. If we use higher settings, our computer will need more CPU and memory power, if we are looking for speed, then we could use lower settings, but then the accuracy of the tracking will also be lower. (Details can be found here: <a href=\"https://trackingjs.com/\">https://trackingjs.com/</a>)  </p>\n<p>If you&#39;d like to set the box color, you can change <code>strokeStyle</code>, which defaults to red #f00. Use a simple if-else statement that takes into account the x-axis, y-axis, width, height, and total from the data. Note that there is no total when we use color.</p>\n<pre><code>var led;\nvar track;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  led = getLed(board, 10);\n  track = {};\n  track.canvas = document.getElementById(&quot;demo-area-08-canvas&quot;);\n  track.context = track.canvas.getContext(&quot;2d&quot;);\n  track.myTracker = new tracking.ObjectTracker(&quot;face&quot;);\n  track.myTracker.setInitialScale(4);\n  track.myTracker.setStepSize(0.5);\n  track.myTracker.setEdgesDensity(0.1);\n\n  track.myTracker.on(&quot;track&quot;, function(event) {\n    if (event.data.length === 0) {\n      track.context.clearRect(0, 0, track.canvas.width, track.canvas.height);\n    } else {\n      track.context.clearRect(0, 0, track.canvas.width, track.canvas.height);\n      event.data.forEach(function(data) {\n        console.log(data.x);\n    if (data.x &gt; 100) {\n      led.on();\n    } else {\n      led.off();\n    }\n        if(data.color){\n          track.context.strokeStyle = track.storkColor[data.color];\n        }else{\n          track.context.strokeStyle = &quot;#f00&quot;;\n        }\n        track.context.lineWidth = 5;\n        track.context.strokeRect(data.x, data.y, data.width, data.height-30);\n        track.context.font = &quot;11px Helvetica&quot;;\n        track.context.fillStyle = &quot;#fff&quot;;\n      });\n    }\n  });\n  track.trackerTask = tracking.track(&quot;#demo-area-08-video&quot;, track.myTracker, {\n    camera: true\n  });\n\n  track.context.clearRect(0, 0, track.canvas.width, track.canvas.height);\n  track.trackerTask.run();\n});\n</code></pre><p>Now this is how you do face tracking with the Webduino Blockly!<br>Webduino Bin: <a href=\"https://bin.webduino.io/famar/1/edit?html,css,js,output\">https://bin.webduino.io/famar/1/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KYl132eWIGsHKjvCQYA\">https://blockly.webduino.io/?lang=en#-KYl132eWIGsHKjvCQYA</a></p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-28-dancing-leds":{"tag":"tutorial","src":"tutorial-28-dancing-leds.html","title":"Knight Rider scanner lights (12 LEDs and for loops)","banner":"tutorial-28-01.jpg","img":"tutorial-28-01s.jpg","date":20160330,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 28: Knight Rider scanner lights (12 LEDs and for loops) :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Everyone who learns code will eventually realize the beauty of “for loops”! In this tutorial, we will be using this simple technique to light up 12 LEDs alternately, controlling the speed of their flashing, and creating an effect like KITT's red scanner light from the Knight Rider TV show. (Ask your mom or dad if you've never heard of this famous American show from the 1980s. You might even need to ask your grandparents!)\">\n\n<meta itemprop=\"description\" content=\"Everyone who learns code will eventually realize the beauty of “for loops”! In this tutorial, we will be using this simple technique to light up 12 LEDs alternately, controlling the speed of their flashing, and creating an effect like KITT's red scanner light from the Knight Rider TV show. (Ask your mom or dad if you've never heard of this famous American show from the 1980s. You might even need to ask your grandparents!)\">\n\n<meta property=\"og:description\" content=\"Everyone who learns code will eventually realize the beauty of “for loops”! In this tutorial, we will be using this simple technique to light up 12 LEDs alternately, controlling the speed of their flashing, and creating an effect like KITT's red scanner light from the Knight Rider TV show. (Ask your mom or dad if you've never heard of this famous American show from the 1980s. You might even need to ask your grandparents!)\">\n\n<meta property=\"og:title\" content=\"Project Example 28: Knight Rider scanner lights (12 LEDs and for loops)\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-28-dancing-leds.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-28-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-28-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-28-knight-rider-scanner-lights-12-leds-and-for-loops-\">Project Example 28: Knight Rider scanner lights (12 LEDs and for loops)</h1>\n<p>Everyone who learns code will eventually realize the beauty of &quot;for loops&quot;! In this tutorial, we will be using this simple technique to light up 12 LEDs alternately, controlling the speed of their flashing, and creating an effect like KITT&#39;s red scanner light from the Knight Rider TV show. (Ask your mom or dad if you&#39;ve never heard of this famous American show from the 1980s. You might even need to ask your grandparents!)</p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/wwnmfd5Mc-Y\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>We will be using 12 LEDs in this tutorial, the longer legs will use pins 2 to 13, and the shorter legs all be connected to GND.</p>\n<p>Reference image:\n<img src=\"../../img/tutorials/tutorial-28-02.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/en/tutorial-28-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-28-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/en/tutorial-28-05.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly Editor</a>, click the &quot;Web Demo Area&quot; on the upper right hand corner, and choose &quot;Slider&quot; from the drop down menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-28-06.jpg\" alt=\"\"></p>\n<p>Place a board onto the workspace and enter your Webduino board’s name. Place three &quot;Set to&quot; blocks from &quot;Variables&quot; menu into the stack. Set the first variable to &quot;pinNum&quot; to represent the starting pin. The second variable should be set to &quot;addNum&quot;. This is the amount added each time a pin is changed (if the variable is set to 1, each pin in the sequence will only light up after the last pin turns off) The third variable must be set to &quot;time&quot; which is our change speed (here we will use 0.1 seconds).\nBe careful at this step, <strong>the variables we set here have not been linked to a specific LED yet. We will use these variables later on when we perform the links</strong>. For pin 2 to change to pin 13, we need a variable to keep count.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-28-07.jpg\" alt=\"\"></p>\n<p>Next we set the &quot;Slider&quot; in the Web Demo menu. When we move the slider, it changes the value of &quot;time&quot; (this is why we set &quot;time&quot; as a variable, allowing us to change it dynamically.) Connect a &quot;Variable&quot; block set to &quot;Time&quot; to the &quot;Show value&quot; block. Then we set the minimum range value to 0.02 seconds and the maximum value to 0.2 seconds with an interval of 0.01 seconds. Also add another &quot;Time&quot; variable block as the &#39;default&#39; in the block. Last, within the &quot;Set range&quot; block, add &quot;Set Time to&quot; and &quot;Show value&quot; blocks with a &quot;Value&quot; block connected to each of them.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-28-08.jpg\" alt=\"\"></p>\n<p>Next we will use the &quot;Loops&quot; blocks found under the &quot;Standard&quot; menu, and a &quot;Delay&quot; block found under &quot;Advanced&quot;.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-28-09.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/en/tutorial-28-10.jpg\" alt=\"\"></p>\n<p>Setting the outermost &quot;Loop&quot; &quot;Repeat do&quot; block to &quot;while&quot; means it will continue to repeat until something happens. Unless a condition is set, it becomes an infinite loop. Because we want our Knight Rider scanner lights to loop endlessly, we won&#39;t set a condition for it to stop so we must leave the connection point empty. The second &quot;Loop&quot; block &quot;Repeat # times&quot; is set to 11. This means that the stack within it, setup as shown in the picture, will run 11 times. After it has run 11 times, it will set addNum to a negative. AddNum, which is +1, would become -1, allowing the scanner light to go from 2 to 13 and then 13 to 2. When it has finished its sequence, it will return to the outer Loop and come back again to run 11 times again, indefinitely.</p>\n<p>Now, inside the the inner &quot;Repeat&quot; loop block, place three &quot;Set pin to&quot; blocks, from the &quot;I/O Pins&quot; menu. Remember that pinNum is a number that will constantly change, we&#39;ve just set the default to 2. Then set the second to &quot;Next&quot; and the pin to be &quot;pinNum&quot; + &quot;addNum&quot; using a &quot;Math&quot; equation block. Add two &quot;Write value&quot; blocks from the &quot;I/O Pins&quot; menu and set the first to &quot;pin&quot; and 0, and the second to &quot;next&quot; and 1. This will make it so that when the LED 2 goes off the LED 3 turns on. Place the &quot;Delay&quot; block next in the stack, with the variable also set to &quot;time&quot;. For the last, &quot;Set to&quot; I/O block set the &quot;addNum&quot; to negative &quot;addNum&quot;. So now, when the loop finishes the next time LED 3 will turn off and LED 4 will light up, etc.</p>\n<p>If you&#39;re not familiar with the &quot;I/O Pins&quot; blocks, check out: <a href=\"info-10-pin.html\">Webduino Board Pin Manipulation</a>.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-28-11.jpg\" alt=\"\"></p>\n<p>Now we&#39;ve finished programming KITT&#39;s scanner lights from Knight Rider! Check if the board is online by clicking &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;. When you click on the red execution button &quot;Run Blocks&quot;, you will see the scanner lights sequentially move back and forth! You are also able to control the speed with the slider.\nSolution: <a href=\"http://blockly.webduino.io/?lang=en#-KZVjQFlRnrGBPjI14SU\">http://blockly.webduino.io/?lang=en#-KZVjQFlRnrGBPjI14SU</a></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/xijim/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files. Because we are using async/await syntax in this tutorial, please include <code>runtime.min.js</code> in the header for supporting other browsers.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://blockly.webduino.io/lib/runtime.min.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>Inside the HTML we see a span showing the value of the &quot;Subtle Control&quot; and a range &quot;Subtle Control&quot;.</p>\n<pre><code>Value：&lt;span id=&quot;demo-area-06-input-value&quot;&gt;90&lt;/span&gt;&lt;br&gt;\nSlider：&lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;180&quot; step=&quot;5&quot; value=&quot;90&quot; id=&quot;demo-area-06-input&quot;&gt;\n</code></pre><p>JavaScript uses &quot;while&quot; and &quot;for&quot; loop to synchronize the &quot;for loops&quot;, if you will be using it on your own device, remember to select JavaScript from the drop-down menu on our ES6/Babel, and you’ll see the actual code.</p>\n<pre><code>(async function () {\n\nvar pinNum;\nvar addNum;\nvar time;\nvar pin;\nvar next;\n\n\nboardReady(&#39;&#39;, async function (board) {\n  board.samplingInterval = 250;\n  pinNum = 2;\n  addNum = 1;\n  time = 0.1;\n  document.getElementById(&quot;demo-area-06-input-value&quot;).innerHTML = time;\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;min&quot;,0.02);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;max&quot;,0.2);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;step&quot;,0.01);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;value&quot;,time);\n  document.getElementById(&quot;demo-area-06-input&quot;).oninput = async function(_value){\n    _value = this.value;\n    time = _value;\n    document.getElementById(&quot;demo-area-06-input-value&quot;).innerHTML = _value;\n  };\n  while (!false) {\n    for (var count = 0; count &lt; 11; count++) {\n      pin = getPin(board, pinNum);\n      next = getPin(board, (pinNum + addNum));\n      pin.write(0);\n      next.write(1);\n      await delay(time);\n      pinNum = pinNum + addNum;\n    }\n    addNum = -addNum;\n  }\n});\n\n}());\n</code></pre><p>Now you know how to create KITT&#39;s scanner light from Knight Rider using 12 LEDs, controlled by &quot;Slider&quot;.<br>Webduino Bin: <a href=\"https://bin.webduino.io/xijim/edit?html,css,js,output\">https://bin.webduino.io/xijim/edit?html,css,js,output</a><br>Stack setup: <a href=\"http://blockly.webduino.io/?lang=en#-KZVjxhqel2z22IvelEU\">http://blockly.webduino.io/?lang=en#-KZVjxhqel2z22IvelEU</a></p>\n<!-- <div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-29-firebase-dht":{"tag":"tutorial","src":"tutorial-29-firebase-dht.html","title":"Using Firebase to record temperature and humidity data","banner":"tutorial-29-01.jpg","img":"tutorial-29-01s.jpg","date":20160330,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 29: Using Firebase to record temperature and humidity data :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"After learning how to use the DHT” sensor to read the temperature and humidity of an environmental, the next step will be to save that information using a database. We will be using Google's Firebase in this tutorial, and with Webduino Blockly we can easily save our temperature and humidity information into a cloud based database system.\">\n\n<meta itemprop=\"description\" content=\"After learning how to use the “DHT” sensor to read the temperature and humidity of an environmental, the next step will be to save that information using a database. We will be using Google's Firebase in this tutorial, and with Webduino Blockly we can easily save our temperature and humidity information into a cloud based database system.\">\n\n<meta property=\"og:description\" content=\"After learning how to use the “DHT” sensor to read the temperature and humidity of an environmental, the next step will be to save that information using a database. We will be using Googles Firebase in this tutorial, and with Webduino Blockly we can easily save our temperature and humidity information into a cloud based database system.\">\n\n<meta property=\"og:title\" content=\"Project Example 29: Using Firebase to record temperature and humidity data\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-29-firebase-dht.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-29-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-29-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-29-using-firebase-to-record-temperature-and-humidity-data\">Project Example 29: Using Firebase to record temperature and humidity data</h1>\n<p>After learning how to use the &quot;DHT&quot; sensor to read the temperature and humidity of an environmental, the next step will be to save that information using a database. We will be using Google&#39;s Firebase in this tutorial, and with Webduino Blockly we can easily save our temperature and humidity information into a cloud based database system.</p>\n<!-- <div class=\"buy-this\">\n    <span>溫濕度傳感器：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/g2vcIGukV6k\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>The DHT sensor has 4 pins, the first pin starting from the left is V and will be connected to 3.3v, the second pin is Data and will be connected to 10, the third pin has no function, and the fourth one is the GND.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-29-02.jpg\" alt=\"\"></p>\n<p>We can connect the DHT sensor to the Webduino Mark 1 directly, or use a breadboard and jumper wires.</p>\n<p>Webduino Mark 1 Circuit diagram:\n<img src=\"../../img/tutorials/tutorial-29-03.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:\n<img src=\"../../img/tutorials/tutorial-29-03-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-29-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>溫濕度傳感器：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"-firebase\">註冊 Firebase</h2>\n<p>To use Firebase we&#39;ll have to sign up for the service first. To do this go to the Firebase official site: <a href=\"https://www.firebase.com/\">https://www.firebase.com/</a>.</p>\n<p><img src=\"../../img/tutorials/tutorial-29-05.jpg\" alt=\"\"></p>\n<p>After you&#39;ve signed up with Firebase, you can create your own projects. The projects shown here, are our databases, every database has it&#39;s own web address.</p>\n<p><img src=\"../../img/tutorials/tutorial-29-06.jpg\" alt=\"\"></p>\n<p>Click on &#39;Manage App&#39; and you can check on your projects and configure the settings. Firebase uses JSON to save its data. If you&#39;re interested in learning more about Firebase, check out their Docs here: <a href=\"https://www.firebase.com/docs/web/api/\">https://www.firebase.com/docs/web/api/</a>. As for our tutorial, all we will need is the database address, and we can continue to record our temperature and humidity data!</p>\n<p><img src=\"../../img/tutorials/tutorial-29-07.jpg\" alt=\"\"></p>\n<p>First, choose &quot;database&quot; from the left menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-29-13.jpg\" alt=\"\"></p>\n<p>Choose &quot;Rules&quot; and you will see the default setting is &quot;not null&quot;, or in code &quot;!= null&quot;.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-29-14.jpg\" alt=\"\"></p>\n<p>Set both &quot;read&quot; and &quot;write&quot; to true.</p>\n<pre><code>{\n    &quot;rules&quot;: {\n        &quot;.read&quot;: true,\n        &quot;.write&quot;: true\n    }\n}\n</code></pre><p><img src=\"../../img/tutorials/en/tutorial-29-15.jpg\" alt=\"\"></p>\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>, click the &quot;Ｗeb Demo Area&quot; button on the upper right, select &quot;Show Text&quot; from the pull-down menu.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-29-08.jpg\" alt=\"\"></p>\n<p>Place a &quot;Board&quot; block onto the workspace then enter the name of your Webduino board, place a &quot;DHT&quot; block, from the &quot;Sensors&quot; menu, inside and set the name to dht and pin to 11.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-29-09.jpg\" alt=\"\"></p>\n<p>Then place a &quot;Firebase&quot; block from &quot;Database&quot; menu and paste the database address from earlier into the url space. Next place a &quot;DHT&quot; block that will detect temperature and humidity set to every 1000 milliseconds (1 second).</p>\n<p>Make sure for the &quot;Firebase&quot; block is not placed inside the &quot;DHT detect&quot; block, otherwise the database will be imported every second, which you do not want.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-29-10.jpg\" alt=\"\"></p>\n<p>Inside the &quot;DHT detect&quot; block, place a &quot;Show&quot; block from the &quot;Show Text&quot; menu then connect a &quot;Create Text With&quot; block from &quot;Text&quot; menu so the temperature and humidity information will be shown on the right hand side. You can add spaces for more blocks to be connected by clicking on the blue gear icon. Fill in the names and place time, temperature, and humidity blocks into the stack.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-29-11.jpg\" alt=\"\"></p>\n<p>Now that we&#39;ve finished creating the stack to make Firebase record temperature and humidity data, check to see if your board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;). When you click on the red execution button &quot;Run Blocks&quot;, go to the Firebase website and you will see information coming in. (Solution: <a href=\"http://blockly.webduino.io/?lang=en#-KZZUdAMTJpimQ1ZNEh_\">http://blockly.webduino.io/?lang=en#-KZZUdAMTJpimQ1ZNEh_</a>)</p>\n<p><img src=\"../../img/tutorials/tutorial-29-12.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/vohen/1/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>Since we are using Firebase, so we will need to import JaveScript from Firebase. (See &quot;quickstart&quot; from the official page: <a href=\"https://www.firebase.com/docs/web/quickstart.html\">https://www.firebase.com/docs/web/quickstart.html</a> )</p>\n<pre><code>&lt;script src=&quot;https://cdn.firebase.com/js/client/2.4.2/firebase.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML has a span that shows the temperature and humidity values.</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>The first function inside JavaScript is to get the current time, so when we call it we willhave it. In boardReady, we use the FIRbase API, using push to record our data to the database.    </p>\n<pre><code>var dht;\nvar myFirebase;\n\nfunction get_time(t) {\n  var varTime = new Date(),\n    varHours = varTime.getHours(),\n    varMinutes = varTime.getMinutes(),\n    varSeconds = varTime.getSeconds();\n  var varNow;\n  if (t == &quot;hms&quot;) {\n    varNow = varHours + &quot;:&quot; + varMinutes + &quot;:&quot; + varSeconds;\n  } else if (t == &quot;h&quot;) {\n    varNow = varHours;\n  } else if (t == &quot;m&quot;) {\n    varNow = varMinutes;\n  } else if (t == &quot;s&quot;) {\n    varNow = varSeconds;\n  }\n  return varNow;\n}\n\nboardReady(&#39;&#39;, async function (board) {\n  board.samplingInterval = 250;\n  dht = getDht(board, 11);\n  myFirebase = new Firebase(&quot;https://&lt;YOUR-FIREBASE-APP&gt;.firebaseio.com&quot;);\n  dht.read(function(evt){\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ([dht.temperature,&#39; , &#39;,dht.humidity].join(&#39;&#39;));\n    myFirebase.push({\n      time:get_time(&quot;hms&quot;),\n      t:dht.temperature,\n      h:dht.humidity\n    });\n  }, 1000);\n});\n</code></pre><p>This is how to use Firebase to record temperature and humidity data!<br>Webduino Bin: <a href=\"https://bin.webduino.io/vohen/1/edit?html,css,js,output\">https://bin.webduino.io/vohen/1/edit?html,css,js,output</a><br>Stack setup: <a href=\"http://blockly.webduino.io/?lang=en#-KZZVRBqhmzK00B0Weci\">http://blockly.webduino.io/?lang=en#-KZZVRBqhmzK00B0Weci</a></p>\n<!-- <div class=\"buy-this\">\n    <span>溫濕度傳感器：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-30-motor-ic":{"tag":"tutorial","src":"tutorial-30-motor-ic.html","title":"Toy Car hack – Using a Dual Channel Motor Driver Module","banner":"tutorial-30-01.jpg","img":"tutorial-30-01s.jpg","date":20160622,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 30: Toy Car hack – Using a Dual Channel Motor Driver Module :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Using the L9110S Dual Channel Motor Driver Module, we can connect a normal toy car to the Webduino board and control it over Wi-Fi. Just a few simple steps and we can connect a toy car to our phones, computers, and even control multiple cars from a distance! Your friends will think you spent a fortune on this hack! Any toy with two motors will work with this example.\">\n\n<meta itemprop=\"description\" content=\"Using the L9110S Dual Channel Motor Driver Module, we can connect a normal toy car to the Webduino board and control it over Wi-Fi. Just a few simple steps and we can connect a toy car to our phones, computers, and even control multiple cars from a distance! Your friends will think you spent a fortune on this hack! Any toy with two motors will work with this example.\">\n\n<meta property=\"og:description\" content=\"Using the L9110S Dual Channel Motor Driver Module, we can connect a normal toy car to the Webduino board and control it over Wi-Fi. Just a few simple steps and we can connect a toy car to our phones, computers, and even control multiple cars from a distance! Your friends will think you spent a fortune on this hack! Any toy with two motors will work with this example.\">\n\n<meta property=\"og:title\" content=\"Project Example 30: Toy Car hack – Using a Dual Channel Motor Driver Module\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-30-motor-ic.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-30-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-30-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-30-toy-car-hack-using-a-dual-channel-motor-driver-module\">Project Example 30: Toy Car hack – Using a Dual Channel Motor Driver Module</h1>\n<p>Using the L9110S Dual Channel Motor Driver Module, we can connect a normal toy car to the Webduino board and control it over Wi-Fi. Just a few simple steps and we can connect a toy car to our phones, computers, and even control multiple cars from a distance! Your friends will think you spent a fortune on this hack! Any toy with two motors will work with this example. </p>\n<!-- <div class=\"buy-this\">\n    <span>L9110S 馬達驅動模組：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/twdVMSYF4rQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>The L9110S Dual Channel Motor Driver Module has two sides. One side has four ports where you can connect wires with a screwdriver. They are labeled &quot;MOTOR A&quot; and &quot;MOTOR B&quot; on top, and each is connected to a motor. The other side has 6 pins, you will need some jumper wires (female to male) to connect them to the Webduino board. GND connects to GND, VCC to VCC (or 5V), MOTOR A to A-B and A-IA, and MOTOR B to B-B and B-IA.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-30-02.jpg\" alt=\"\"></p>\n<h2 id=\"reference-image\">Reference image</h2>\n<p>In this example we will use a cheap, toy, we bought a long time ago.</p>\n<p><img src=\"../../img/tutorials/tutorial-30-03.jpg\" alt=\"\"></p>\n<p>Take the toy apart and you will see two motors. The front motor controls the front wheels, moving them left or right. The motor in the back controls forward and reverse. Since this is a remote controlled car, you will see a chip inside that receives a signal.</p>\n<p><img src=\"../../img/tutorials/tutorial-30-04.jpg\" alt=\"\"></p>\n<p>Cut the wires, but keep them attached to the toy with as much as possible.</p>\n<p><img src=\"../../img/tutorials/tutorial-30-05.jpg\" alt=\"\"></p>\n<p>Here we&#39;ve prepared some jumper wire connectors, female to male crimp pins, and male to male connectors.</p>\n<p><img src=\"../../img/tutorials/tutorial-30-06.jpg\" alt=\"\"></p>\n<p>As shown below, we can transform the wires we just cut to connect easily with our Webduino board. This way you won&#39;t need to solder the wires together. If you&#39;re connecting them to the Driver Module, you could also just screw them in.</p>\n<p><img src=\"../../img/tutorials/tutorial-30-07.jpg\" alt=\"\"></p>\n<p>Connect the motors to the L9110S Dual Channel Motor Driver Module.</p>\n<p><img src=\"../../img/tutorials/tutorial-30-08.jpg\" alt=\"\"></p>\n<p>Reconnect the car&#39;s cover but find a way to leave the module on the outside so we can wire it to other things.</p>\n<p><img src=\"../../img/tutorials/tutorial-30-09.jpg\" alt=\"\"></p>\n<p>Connect it to the Webduino Mark 1. GND connects to GND, VCC to VCC(or 5V), MOTOR A to A-B and A-IA, and MOTOR B to B-B and B-IA.</p>\n<p><img src=\"../../img/tutorials/tutorial-30-10.jpg\" alt=\"\"></p>\n<p>Once you&#39;ve done this, attach the boards to the toy car. Now you have your very own WiFi controlled toy car!</p>\n<p><img src=\"../../img/tutorials/tutorial-30-11.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>L9110S 馬達驅動模組：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>, place a &quot;Board&quot; block onto the workspace and fill in the name of your Webduino board. We need to control pin 1 or 0, the easiest way to do this is to use an &quot;LED&quot; block. Since 2 motors have 4 lines, place 4 &quot;LED&quot; blocks into the stack. </p>\n<p><img src=\"../../img/tutorials/en/tutorial-30-12.jpg\" alt=\"\"></p>\n<p>Use the &quot;Start Keyboard Event Key&quot; block and set it to &quot;Down&quot;. Add up, down, left, and right &quot;Key / do&quot; blocks. Set &quot;a&quot; to be &quot;on&quot; when we press &quot;up&quot; and &quot;b&quot; to be &quot;on&quot; when we press &quot;down&quot;, and so on.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-30-13.jpg\" alt=\"\"></p>\n<p>Then, place another &quot;Start Keyboard Event Key&quot; block into the stack and set it to &quot;Up&quot;. Place the 4 directions inside of it and set the state to &quot;off&quot;.</p>\n<p>The idea behind this is that when a motor has one line &quot;on&quot; and the other &quot;off&quot;, it is as if the positive of the battery is connected to &quot;on&quot; and the negative is connected to &quot;off&quot;. This makes the motor turn clockwise. If it is connected in reverse, the motor with turn counterclockwise. So using this stack setup we make the car turn left and right and go forward and backwards.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-30-14.jpg\" alt=\"\"></p>\n<p>After all this is done, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. You can now control the toy car! If the direction isn’t matching your commands, you need to change the code or swap the wiring. \nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KZet8MHvY6pBxCY-gLM\">https://blockly.webduino.io/?lang=en#-KZet8MHvY6pBxCY-gLM</a></p>\n<p>If you&#39;d like to control the car with your smartphone, open the &quot;Web Demo Area&quot; and find &quot;Remote&quot; in the drop down menu. Then set the directions here. Follow this tutorial if you&#39;d like to learn how. (Click: <a href=\"info-11-feature.html\">The 10 Most Useful Features of Webduino Blockly</a>)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-30-15.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/vohen/1/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>JavaScript uses <code>onkeydown</code> and <code>onkeyup</code> to determine if the button is pressed or released, by using different keycode mapping to different actions, we create a function that allows keyboard control.</p>\n<pre><code>var a;\nvar b;\nvar c;\nvar d;\n\nboardReady(&#39;&#39;, function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  a = getLed(board, 6);\n  b = getLed(board, 7);\n  c = getLed(board, 8);\n  d = getLed(board, 9);\n  document.onkeydown = function(e){\n    console.log(e.keyCode);\n    if(e.keyCode == 38){\n        a.on();\n    }\n    if(e.keyCode == 40){\n        b.on();\n    }\n    if(e.keyCode == 39){\n        c.on();\n    }\n    if(e.keyCode == 37){\n        d.on();\n    }\n  };\n  document.onkeyup = function(e){\n    console.log(e.keyCode);\n    if(e.keyCode == 38){\n        a.off();\n    }\n    if(e.keyCode == 40){\n        b.off();\n    }\n    if(e.keyCode == 39){\n        c.off();\n    }\n    if(e.keyCode == 37){\n        d.off();\n    }\n  };\n});\n</code></pre><p>Now that&#39;s how you use a Dual Channel Motor Driver Module to hack a toy car and make it remote controlled!<br>Webduino Bin: <a href=\"https://bin.webduino.io/nibud/edit?html,css,js,output\">https://bin.webduino.io/nibud/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZfBBvKTFepxLQL8UtK\">https://blockly.webduino.io/?lang=en#-KZfBBvKTFepxLQL8UtK</a></p>\n<!-- <div class=\"buy-this\">\n    <span>L9110S 馬達驅動模組：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-31-soil-max7219":{"tag":"tutorial","src":"tutorial-31-soil-max7219.html","title":"Visualizing soil moisture with an LED matrix","banner":"tutorial-31-01.jpg","img":"tutorial-31-01s.jpg","date":20160623,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 31: Visualizing soil moisture with an LED matrix :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Using the electric conductivity between two metal pieces, we can use a soil moisture sensor to measure the approximate dampness of soil. In this example, we will be making a visualization of the water measured and when the moisture levels are higher than 100 it will automatically play an animated image.\">\n\n<meta itemprop=\"description\" content=\"Using the electric conductivity between two metal pieces, we can use a soil moisture sensor to measure the approximate dampness of soil. In this example, we will be making a visualization of the water measured and when the moisture levels are higher than 100 it will automatically play an animated image.\">\n\n<meta property=\"og:description\" content=\"Using the electric conductivity between two metal pieces, we can use a soil moisture sensor to measure the approximate dampness of soil. In this example, we will be making a visualization of the water measured and when the moisture levels are higher than 100 it will automatically play an animated image.\">\n\n<meta property=\"og:title\" content=\"Project Example 31: Visualizing soil moisture with an LED matrix\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-31-soil-max7219.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-31-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-31-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-31-visualizing-soil-moisture-with-an-led-matrix\">Project Example 31: Visualizing soil moisture with an LED matrix</h1>\n<p>Using the electric conductivity between two metal pieces, we can use a soil moisture sensor to measure the approximate dampness of soil. In this example, we will be making a visualization of the water measured and when the moisture levels are higher than 100 it will automatically play an animated image. </p>\n<!-- <div class=\"buy-this\">\n    <span>土壤濕度偵測模組：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>LED 點矩陣：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus  ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Watch the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/ppweeGJD0nw\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>The Soil Moisture Sensor has 3 pins, SIG, GND and VCC. Since we will be using an LED matrix to show the values, the LED matrix will also be using the GND and VCC. So, we will need to use a breadboard to make everything fit. Connect VCC to VCC, GND to GND, SIG from the soil moisture sensor to A3. For the LED matrix, connect DIN to 7, CS to 8, and CLK to 9.</p>\n<p>Webduino Mark 1 Circuit Diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-31-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit Diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-31-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-31-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-31-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-31-05.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-31-06.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>土壤濕度偵測模組：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>LED 點矩陣：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus  ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly Editor</a>, place a &quot;Board&quot; block into the workspace and fill in the name of the  Webduino board you are using. Then place the &quot;Soil Moisture&quot; block from &quot;Sensors&quot; and the &quot;LED Matrix&quot; from &quot;Components&quot; inside and assign the correct pins to each of them.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-31-07.jpg\" alt=\"\"></p>\n<p>Place a &quot;Soil Detects&quot; block into the stack using a variable representing the value currently measured, we also round this value to a whole number. We will be using this value repeatedly, so using the same variable allows us to change less code. We must round to a whole number because the LED matrix can only shows integers.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-31-08.jpg\" alt=\"\"></p>\n<p>Then place a &quot;Show&quot; block from &quot;Show Text&quot; into the stack, so the measured value will simultaneously show on the &quot;Web Demo Area&quot; as well. Then add an &quot;If, do, else&quot; &quot;Logic&quot; block and connect the necessary &quot;Logic&quot;, &quot;Variable&quot;, &quot;LED Matrix&quot;, and &quot;Math&quot; blocks to the stack. When the values are less than 100, it will show the number on the LED matrix and when it is greater than or equal to 100, an animated image will play.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-31-09.jpg\" alt=\"\"></p>\n<p>We&#39;ve finished most of the hard work, check if the board is online (click <a href=\"https://webduino.io/device.html\">Check Device Status</a>) and click on the red execution button &quot;Run Blocks&quot;. If you take a glass of water and place the soil moisture sensor inside the water, you will see the values change. \nSolution: <a href=\"https://blockly.webduino.io/?lang=en#-KYlgaaXx61FlgO19A9h\">https://blockly.webduino.io/?lang=en#-KYlgaaXx61FlgO19A9h</a></p>\n<p>Be aware that different sensors will have different readings. Also if we connect VCC to 3.3V, the MAX value will also be different. If the values need to be converted, the &quot;Scale conversion&quot; block can be used as seen in these images.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-31-10.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/en/tutorial-31-11.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/fijuw/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>The first half of the code inside JavaScript are for the LED matrix to show images, the second half is for detection and measuring, we mainly use <code>on</code> to measure and it returns <code>val</code>.</p>\n<pre><code>boardReady(&#39;&#39;, function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  soil = getSoil(board, 3);\n  matrix = getMax7219(board, 7, 8, 9);\n  soil.on(function(val){\n    soil.detectedVal = val;\n    a = Math.round(soil.detectedVal);\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = a;\n    if (a &lt; 100) {\n      matrix.animateStop();\n      matrix.on(&quot;0000000000000000&quot;);\n      matrix.on((max7219_number(a)));\n    } else {\n      matrix.animateStop();\n      matrix.animate(max7219_horse(&quot;left&quot;,&quot;0c1e3e7c3e1e0c00&quot;),100);\n    }\n  });\n});\n</code></pre><p>This is how you can visualize soil moisture with an LED matrix!<br>Webduino Bin: <a href=\"https://bin.webduino.io/fijuw/edit?html,css,js,output\">https://bin.webduino.io/fijuw/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KYlgkLyhokqWK8p5WQh\">https://blockly.webduino.io/?lang=en#-KYlgkLyhokqWK8p5WQh</a></p>\n<!-- <div class=\"buy-this\">\n    <span>土壤濕度偵測模組：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>LED 點矩陣：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus  ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-32-smart-socket":{"tag":"tutorial","src":"tutorial-32-smart-socket.html","title":"DIY Smart Electrical Socket","banner":"tutorial-32-01.jpg","img":"tutorial-32-01s.jpg","date":20160627,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 32: DIY Smart Electrical Socket :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"We've talked about some applications for relays in the Project Example 14, if we take that and combine it with a simple electrical socket, we can control it over Wi-Fi. Or even transform it into a smart, light and voice sensing, remote controlled electrical socket!\n\">\n\n<meta itemprop=\"description\" content=\"We've talked about some applications for relays in the Project Example 14, if we take that and combine it with a simple electrical socket, we can control it over Wi-Fi. Or even transform it into a smart, light and voice sensing, remote controlled electrical socket!\">\n\n<meta property=\"og:description\" content=\"We've talked about some applications for relays in the Project Example 14, if we take that and combine it with a simple electrical socket, we can control it over Wi-Fi. Or even transform it into a smart, light and voice sensing, remote controlled electrical socket!\">\n\n<meta property=\"og:title\" content=\"Project Example 32: DIY Smart Electrical Socket\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-32-smart-socket.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-32-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-32-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-32-diy-smart-electrical-socket\">Project Example 32: DIY Smart Electrical Socket</h1>\n<p>We&#39;ve talked about some applications for relays in the <a href=\"tutorial-14-relay.html\">Project Example 14</a>, if we take that and combine it with a simple electrical socket, we can control it over Wi-Fi. Or even transform it into a smart, light and voice sensing, remote controlled electrical socket! </p>\n<!-- <div class=\"buy-this\">\n    <span>智慧插座套件：<a href=\"https://webduino.io/buy/webduino-package-socket.html\" target=\"_blank\">Webduino 智慧插座套件 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/nFEY_k_2zxQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>The electrical sockets we use in this demo have two sockets, one is connected to AC power, which will also provide power for the Webduino board. The current of the other socket is controlled through a relay. We will be using solid wires to connect the socket to COM (Common Connection) and NO (Normally Open) of the relay. Then connect the VCC from the relay to the 5V or 3.3V on the board, GND to GND and Vin from to 2 to 13.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-32-02.jpg\" alt=\"\"></p>\n<p>List of components:</p>\n<p><img src=\"../../img/tutorials/tutorial-32-03.jpg\" alt=\"\"></p>\n<p>We start by combining the electrical socket and the socket backplane, they should fit together easily.</p>\n<p><img src=\"../../img/tutorials/tutorial-32-04.jpg\" alt=\"\"></p>\n<p>The space between the two sockets is just big enough to place the relay, you can slide it in or fix it in place with a hot glue gun. Then insert 5 solid wires directly into the holes on the backs of the sockets. They should just stay in place once they are in the holes.</p>\n<p><img src=\"../../img/tutorials/tutorial-32-05.jpg\" alt=\"\"></p>\n<p>Connect the electric wires to the plug by removing the top of the wire coating and screwing them directly onto the plugs.</p>\n<p><img src=\"../../img/tutorials/tutorial-32-07.jpg\" alt=\"\"></p>\n<p>Use wire splicers to connect the solid wires to the electric wires. Then connect solid wires to the relay <strong>(both COM and NO)</strong>.</p>\n<p><img src=\"../../img/tutorials/tutorial-32-06.jpg\" alt=\"\"></p>\n<p>Connect the other side of the Relay with jumper wires.</p>\n<p><img src=\"../../img/tutorials/tutorial-32-08.jpg\" alt=\"\"></p>\n<p>Connect the outlet to it&#39;s outer shell.</p>\n<p><img src=\"../../img/tutorials/tutorial-32-09.jpg\" alt=\"\"></p>\n<p>Screw on the plate cover. If the screws are too small, use washers and nuts.</p>\n<p><img src=\"../../img/tutorials/tutorial-32-09a.jpg\" alt=\"\"></p>\n<p>All that&#39;s left is to connect the socket to the Webduino board and you&#39;re all set! There are two sockets on the module, one acts as the power supply for your board to control the other through Wi-Fi.</p>\n<p><img src=\"../../img/tutorials/tutorial-32-10.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>智慧插座套件：<a href=\"https://webduino.io/buy/webduino-package-socket.html\" target=\"_blank\">Webduino 智慧插座套件 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instruction-of-webduino-blockly\">Instruction of Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly Editor</a>. Place a &quot;Board&quot; block onto the workspace and fill in the name of your Webduino board. Place a &quot;set LED to&quot; block into the stack. Using the circuit diagram, set the pin to 10.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-32-11.jpg\" alt=\"\"></p>\n<p>We use blocks from &quot;Click Bulb&quot; in &quot;Web Demo Area&quot; and other &quot;LED&quot; blocks to control the outlet. Start by adding &quot;LED set state&quot; and &quot;Set bulb&#39;s state&quot; blocks to the stack. Set both to &quot;on&quot;, Then place a &quot;Click Bulb, do&quot; block next in the stack and place &quot;Light toggle&quot; and &quot;LED toggle&quot; blocks inside. So the outlet will switch between off and on with every click.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-32-12.jpg\" alt=\"\"></p>\n<p>Check to see if your board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot; Plug a light bulb or electric fan to the smart socket, making sure that it is switched on. There shouldn&#39;t be any power at this point. Now click on the light bulb image in the web demo area and you will see that you have control of the socket through WiFi! (Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZ_N6wBL8hccd55f6DA\">https://blockly.webduino.io/?lang=en#-KZ_N6wBL8hccd55f6DA</a>)</p>\n<p>We&#39;ve just shown that we can use Wi-Fi to control a power outlet. You can also make it voice controlled by using &quot;Voice Control&quot; blocks, then you would have a voice controlled DIY smart electrical socket!</p>\n<p><img src=\"../../img/tutorials/en/tutorial-32-13.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/basop/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>JavaScript is mostly for LED control, if you want to learn more, click here: <a href=\"tutorial-01-led.html\">Project Example 1: Control a Single LED</a>.</p>\n<pre><code>var led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  led = getLed(board, 10);\n  document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n  led.off();\n  document.getElementById(&quot;demo-area-02-light&quot;).addEventListener(&quot;click&quot;, function(){\n    if (document.getElementById(&quot;demo-area-02-light&quot;).className == &quot;on&quot;) {\n       document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n    } else {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n    }\n    led.toggle();\n  });\n});\n</code></pre><p>That&#39;s how you build a DIY Smart Electrical Socket!<br>Webduino Bin: <a href=\"https://bin.webduino.io/basop/edit?html,css,js,output\">https://bin.webduino.io/basop/edit?html,css,js,output</a><br>Stack setup: <a href=\"https://blockly.webduino.io/?lang=en#-KZ_VTN7SWdw8Z39q5aX\">https://blockly.webduino.io/?lang=en#-KZ_VTN7SWdw8Z39q5aX</a></p>\n<!-- <div class=\"buy-this\">\n    <span>智慧插座套件：<a href=\"https://webduino.io/buy/webduino-package-socket.html\" target=\"_blank\">Webduino 智慧插座套件 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-33-clock":{"tag":"tutorial","src":"tutorial-33-clock.html","title":"Talking Alarm Clock (With Snooze Button and Buzzer)","banner":"tutorial-33-01.jpg","img":"tutorial-33-01s.jpg","date":20160629,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 33: Talking Alarm Clock (With Snooze Button and Buzzer) :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"In project examples 9 & 13, we learned how to interact with a button switch and how to use a buzzer to create interesting projects. In this example, we will be joining the two together to create an alarm clock with a snooze button. When you press the button switch your computer will tell you the time and the buzzer will sound after a few minutes to make sure you’re awake!\">\n\n<meta itemprop=\"description\" content=\"In project examples 9 & 13, we learned how to interact with a button switch and how to use a buzzer to create interesting projects. In this example, we will be joining the two together to create an alarm clock with a snooze button. When you press the button switch your computer will tell you the time and the buzzer will sound after a few minutes to make sure you’re awake!\">\n\n<meta property=\"og:description\" content=\"In project examples 9 & 13, we learned how to interact with a button switch and how to use a buzzer to create interesting projects. In this example, we will be joining the two together to create an alarm clock with a snooze button. When you press the button switch your computer will tell you the time and the buzzer will sound after a few minutes to make sure you’re awake!\">\n\n<meta property=\"og:title\" content=\"Project Example 33: Talking Alarm Clock (With Snooze Button and Buzzer)\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-33-clock.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-33-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-33-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-33-talking-alarm-clock-with-snooze-button-and-buzzer-\">Project Example 33: Talking Alarm Clock (With Snooze Button and Buzzer)</h1>\n<p>In &quot;<a href=\"tutorial-09-button-led.html\">project examples 9</a>&quot; and &quot;<a href=\"tutorial-13-buzzer.html\">project examples 13</a>&quot;, we learned how to interact with a button switch and how to use a buzzer to create interesting projects. In this example, we will be joining the two together to create an alarm clock with a snooze button. When you press the button switch your computer will tell you the time and the buzzer will sound after a few minutes to make sure you&#39;re awake! </p>\n<!-- <div class=\"buy-this\">\n    <span>蜂鳴器、按鈕：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Check the video tutorial here: </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/BEDgC5iAnCo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>If you&#39;re using the Mark 1, which has only one GND available, we&#39;ll need a breadboard to connect the GNDs together. If you&#39;re using the Fly, then you can just plug the button switch and the buzzer into GND. Connect the button switch signal to 10 and the buzzer to 11.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-33-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-33-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-33-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-33-04.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-33-05.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>蜂鳴器、按鈕：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly Editor</a>, place a &quot;Board&quot; block onto the workspace, and fill in the name of your Webduino board. Then, from the &quot;Buzzer&quot; and &quot;Button switch&quot; menus under &quot;Components&quot; place &quot;Set Buzzer to&quot; and &quot;Set Button to&quot; blocks into the stack, set the buzzer to 11 and the button to 10.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-33-06.jpg\" alt=\"\"></p>\n<p>Add four &quot;Variable&quot; blocks and set them to &quot;Clock&quot;, &quot;Check&quot;, &quot;Type&quot;, and &quot;Sleep&quot;. <strong>Add a text block to &quot;Clock&quot; and &quot;Type&quot; set to the time you want the alarm to go off, and &quot;M&quot; for minutes. Add number blocks to &quot;Check&quot; and &quot;Sleep&quot;. Set &quot;Clock&quot; to your alarm time and &quot;Check&quot; to 0 to see if the switch button has been pressed. Then set &quot;Type&quot; to the unit of delay time for the alarm and type number you wish to be the delay time in &quot;Sleep&quot; block.</strong> To show the time on screen, use the &quot;Text size&quot; and &quot;Line height&quot; blocks to set the text size. Now the flow of the alarm clock is set. (Do take note, if the time is a single digit, do not add zeros in front e.g. type 1 and not 01, 0 and not 00)\nYou will have to set up this process by creating a &quot;function&quot; block, define this process as &quot;f&quot;. </p>\n<p><img src=\"../../img/tutorials/en/tutorial-33-07.jpg\" alt=\"\"></p>\n<p>Now check the content for the alarm process &quot;f&quot;, first start with three variables: h, m, and s to stand for hours, minutes, and seconds. Then we concat them into a string of our desiring format and assign it to a variable &quot;now&quot;. Next, check if &quot;Now&quot; and &quot;Clock&quot; are the same. If they are, the buzzer will play music from Super Mario Bros. and change the text color that appears to red.</p>\n<p>We will also use the &quot;Show&quot; block to show the current and alarm time in the &quot;Web Demo Area&quot; (<code>&lt;/br&gt;</code> starts a new line), and at the end of the process we use &quot;Delay&quot; to execute the process every second, so in the &quot;Web Demo Area&quot; we will see the time change one second at a time.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-33-08.jpg\" alt=\"\"></p>\n<p>Within the &quot;Board&quot; stack place two more &quot;When button is pressed, do&quot; blocks under the &quot;f&quot; block. The stack in the first &quot;Button&quot; block makes it so when the button is &quot;Pressed&quot; the buzzer will stop and the word color is changed to black, and the snooze alarm is triggered. However, if it is &quot;Long Pressed&quot; then the alarm will turn off. (This is why &quot;check = 1&quot; is important. <strong>Alarm only goes on when check equals 1</strong>, so it prevents the snooze button from working when the alarm is off.)</p>\n<p><img src=\"../../img/tutorials/en/tutorial-33-09.jpg\" alt=\"\"></p>\n<p>Now set another process for snooze alarm, using three variables; h1, m,1 and s1 to represent hour, minute and, second. Use the &quot;Speed Setting&quot; block from the &quot;Speech&quot; menu under &quot;Advanced&quot; to read out the current time and trigger a new alarm. This is really a &quot;snooze alarm&quot;, meaning that when the button switch is pressed a new alarm time is created, which will go off again.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-33-10.jpg\" alt=\"\"></p>\n<p>The &quot;newClock&quot; flow has three conditions, this is because when time is calculated, no matter hours, minutes, or seconds, there is a chance of the numbers carrying. We have to make three conditions sequentially, so that seconds affect minutes and minutes affect hours. The order has to be seconds to minutes and minutes to hours. And lastly the new time needs to be calculated back to the variable &quot;clock&quot;.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-33-11.jpg\" alt=\"\"></p>\n<p>Now most of the hard work is finished, check if the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;) and click on the red execution button &quot;Run Blocks&quot;. When the alarm goes off the buzzer will play music from &quot;Super Mario&quot;, a voice will read the time, and the text color becomes red. If the button switch is &quot;Pressed&quot; during this time a new alarm time is produced and if it is &quot;Long Pressed&quot; the alarm will be disabled.\n(Solution: <a href=\"https://blockly.webduino.io/?lang=en#-KZ_mm_f3vO3CPk_VSdM\">https://blockly.webduino.io/?lang=en#-KZ_mm_f3vO3CPk_VSdM</a>)</p>\n<!-- <div class=\"buy-this\">\n    <span>蜂鳴器、按鈕：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-34-vr-image":{"tag":"tutorial","src":"tutorial-34-vr-image.html","title":"Changing image position with a Potentiometer","banner":"tutorial-34-01.jpg","img":"tutorial-34-01s.jpg","date":20160701,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 34: Changing image position with a Potentiometer :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"In “Project Example 17: Determine light levels with a photocell” we introduced how to use a photocell. The Potentiometer block uses a similar method, in this tutorial we change the position of an image by turning a knob on a Potentiometer.\">\n\n<meta itemprop=\"description\" content=\"In “Project Example 17: Determine light levels with a photocell” we introduced how to use a photocell. The Potentiometer block uses a similar method, in this tutorial we change the position of an image by turning a knob on a Potentiometer.\">\n\n<meta property=\"og:description\" content=\"In “Project Example 17: Determine light levels with a photocell” we introduced how to use a photocell. The Potentiometer block uses a similar method, in this tutorial we change the position of an image by turning a knob on a Potentiometer.\">\n\n<meta property=\"og:title\" content=\"Project Example 34: Changing image position with a Potentiometer\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-34-vr-image.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-34-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-34-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-34-changing-image-position-with-a-potentiometer\">Project Example 34: Changing image position with a Potentiometer</h1>\n<p>In <a href=\"tutorial-17-photocell.html\">Project Example 17: Determine light levels with a photocell</a> we introduced how to use a photocell. The Potentiometer block uses a similar method, in this tutorial we change the position of an image by turning a knob on a Potentiometer. </p>\n<!-- <div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video Tutorial</h2>\n<p>Watch the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Q5ErAOdnfCo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>A Potentiometer has three pins, when the pins are facing away from you the one on the left is connected to 3.3V and the one on the right is connect to the GND, remember to use a resistor to prevent a short circuit, which will happen when you have very low resistance. The pin in the middle is an analog signal pin, and will be connected to A3. (If your 3.3V and GND pins are connected in reverse, the values produced will be reversed when you turn the knob on the Potentiometer)</p>\n<p>Webduino Mark 1 Circuit Diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-34-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit Diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-34-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-34-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-34-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Open the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly editor</a>, and place a &quot;Board&quot; block into the workspace. Select the Webduino board name, then from the &quot;Sensor&quot; menu, place a Potentiometer block in the stack and set the pin to A3.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-34-05.jpg\" alt=\"\"></p>\n<p>From the same menu place a &quot;detects / do&quot; block in the stack. We will round to the second decimal (a number between 0 to 1) and multiply it by 200, which will make the image&#39;s movements easier to see. To do this, add the blocks &quot;set to&quot; (from the &quot;Variable&quot; menu), a &quot;round decimal point&quot; (from the &quot;Math&quot; menu), and a &quot;photocell&#39;s value&quot; (from the &quot;Photocell / Potentiometer&quot; menu) to the stack. Set the first block to &quot;a&quot; to detect the value the sensor returns. Then set the second block to round to &quot;2&quot;. Next add a &quot;Image move&quot; block from the &quot;Control image menu&quot;. Place a Math block inside of that with a &quot;Variable&quot; block set to &quot;a&quot; multiplied by 200. </p>\n<p><img src=\"../../img/tutorials/en/tutorial-34-06.jpg\" alt=\"\"></p>\n<p>Once you confirm the board is online (click &quot;<a href=\"https://webduino.io/device.html\">Check Device Status</a>&quot;), click on the red &quot;Run Blocks&quot; button to execute the stack, and turn the knob of the Potentiometer and you will see the image move horizontally.</p>\n<p>Solution <a href=\"http://blockly.webduino.io/?lang=en#-KYMH1nlaq9jlcoNbGIw\">http://blockly.webduino.io/?lang=en#-KYMH1nlaq9jlcoNbGIw</a></p>\n<p>If your image is not moving the way you would want it to, here are a few troubleshooting tips.</p>\n<p>One: reverse the 3.3v and GND pins. </p>\n<p>Two: use a &quot;Math&quot; block to make 1 minus the value that is sensed by the potentiometer, giving you a reverse number in the range of 0 to 1.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-34-07.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/fayu/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>Inside the HTML file we have an image, if you&#39;d like to use your own image, place it after &quot;src=&quot;.</p>\n<pre><code>&lt;div id=&quot;demo-area-03-container&quot;&gt;\n  &lt;img src=&quot;http://blockly.webduino.io/media/webduino-logo.jpg&quot; id=&quot;demo-area-03-image&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>The way the image changes is because our image &quot;position&quot; is set to &quot;absolute&quot;, so we will need to set that as well.</p>\n<pre><code>#demo-area-03-container {\n  position: relative;\n  width: 150px;\n  height: 150px;\n}\n\n#demo-area-03-image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 150px;\n  height: 150px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  transform-origin: 75px 75px;\n  -webkit-transform-origin: 75px 75px;\n  -moz-transform-origin: 75px 75px;\n}\n</code></pre><p>As for JavaScript, we receive data with &quot;on&quot; and return a &quot;val&quot;.    </p>\n<pre><code>var photocell;\nvar a;\n\nboardReady(&#39;&#39;, function (board) {\n  board.systemReset();\n  board.samplingInterval = 50;\n  photocell = getPhotocell(board, 3);\n  photocell.on(function(val){\n    photocell.detectedVal = val;\n    a = (Math.round((photocell.detectedVal)*100))/100;\n    document.getElementById(&quot;demo-area-03-image&quot;).style.left = (a * 200)+&quot;px&quot;;\n  });\n});\n</code></pre><p>Now you can change the position of an image when you turn the knob of a Potentiometer! \nWebduino Bin: <a href=\"https://bin.webduino.io/fayu/edit?html,css,js,output\">https://bin.webduino.io/fayu/edit?html,css,js,output</a><br>Stack setup: <a href=\"http://blockly.webduino.io/?lang=en#-KYMHC-LWxdjQ63HX-r_\">http://blockly.webduino.io/?lang=en#-KYMHC-LWxdjQ63HX-r_</a></p>\n<!-- <div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<!-- @@close-->"},"tutorial-35-vr-youtube":{"tag":"tutorial","src":"tutorial-35-vr-youtube.html","title":"Controlling YouTube volume with a Potentiometer","banner":"tutorial-35-01.jpg","img":"tutorial-35-01s.jpg","date":20160704,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Project Example 35: Controlling YouTube volume with a Potentiometer :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"In our last tutorial “Project Example 34: Changing image position with a Potentiometer” we showed you how to use a Potentiometer to move an image on your screen. In this tutorial, we will learn how to use a Potentiometer to control the volume of a YouTube video, in the same way that you would use the volume control on a physical stereo speaker.\">\n\n<meta itemprop=\"description\" content=\"In our last tutorial “Project Example 34: Changing image position with a Potentiometer” we showed you how to use a Potentiometer to move an image on your screen. In this tutorial, we will learn how to use a Potentiometer to control the volume of a YouTube video, in the same way that you would use the volume control on a physical stereo speaker.\">\n\n<meta property=\"og:description\" content=\"In our last tutorial “Project Example 34: Changing image position with a Potentiometer” we showed you how to use a Potentiometer to move an image on your screen. In this tutorial, we will learn how to use a Potentiometer to control the volume of a YouTube video, in the same way that you would use the volume control on a physical stereo speaker.\">\n\n<meta property=\"og:title\" content=\"Project Example 35: Controlling YouTube volume with a Potentiometer\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-35-vr-youtube.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-35-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-35-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"project-example-35-controlling-youtube-volume-with-a-potentiometer\">Project Example 35: Controlling YouTube volume with a Potentiometer</h1>\n<p>In our last tutorial &quot;<a href=\"tutorial-34-vr-image.html\">Project Example 34: Changing image position with a Potentiometer</a>&quot; we showed you how to use a Potentiometer to move an image on your screen. In this tutorial, we will learn how to use a Potentiometer to control the volume of a YouTube video, in the same way that you would use the volume control on a physical stereo speaker.</p>\n<!-- <div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"video-tutorial\">Video tutorial</h2>\n<p>Check the video tutorial here:</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/hA0rx5uK_qw\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"wiring-and-practice\">Wiring and Practice</h2>\n<p>A Potentiometer has three pins. The left pin should be connected to 3.3V and the right pin connected to GND. Remember to use a resistor in your GND connection to prevent a short circuit, which happens when you have very low resistance. For more information on this google Ohm&#39;s law. The middle pin is an analog signal pin，which should be connected to A3. If your 3.3V and GND are connected in reverse, the values produced will also be reversed when you turn the knob on the Potentiometer.</p>\n<p>Webduino Mark 1 Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-34-02.jpg\" alt=\"\"></p>\n<p>Webduino Fly Circuit diagram:</p>\n<p><img src=\"../../img/tutorials/tutorial-34-02-fly.jpg\" alt=\"\"></p>\n<p>Reference image:</p>\n<p><img src=\"../../img/tutorials/tutorial-34-03.jpg\" alt=\"\"></p>\n<p><img src=\"../../img/tutorials/tutorial-34-04.jpg\" alt=\"\"></p>\n<!-- <div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> -->\n<h2 id=\"instructions-for-using-the-webduino-blockly\">Instructions for using the Webduino Blockly</h2>\n<p>Begin by opening the <a href=\"https://blockly.webduino.io/?lang=en\">Webduino Blockly</a>, and placing a &quot;Board&quot; block inside the workspace. Select your Webduino board&#39;s name, place a &quot;Photocell / Potentiometer&quot; block in the stack, and set the pin to A3.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-35-02.jpg\" alt=\"\"></p>\n<p>Place a &quot;YouTube&quot; block (located in the &quot;Web Demo&quot; menu) and a &quot;detects / do&quot; block (under the &quot;photocell / potentiometer&quot; menu) into the stack. Then fill in the YouTube ID number for the video you want to control.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-35-03.jpg\" alt=\"\"></p>\n<p>To find the YouTube ID, go to the video page you want to use.  Everything after <code>v=</code> of the web address is the ID.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-35-04.jpg\" alt=\"\"></p>\n<p>To detect the input of the sensor, we must add a &quot;Set item to&quot; block from under the &quot;Variable&quot; menu. (Since we will use this multiple times, it will reduce the work needed to be done by setting it once) Because the Potentiometer has a floating point number of 0 to 1, and YouTube has the volume integers of 0 to 100, we will need to round the numbers using the &quot;round to decimal point&quot; and &quot;scale conversion&quot; blocks found under the &quot;Advanced&quot; / &quot;Math Conversion&quot; menu.</p>\n<p>At the very bottom of the stack add a &quot;Console&quot; block from under the &quot;Advanced&quot; menu along with a &quot;Youtube volume&quot; block. Connect &quot;Variable&quot; &quot;Item&quot; blocks to each of these and set them to &quot;a&quot;.</p>\n<p>Then we can use the console in Chrome&#39;s developer tools to receive values. To do this just right click on the webpage in Chrome and choose &quot;Inspect&quot;, other browsers have similar tools.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-35-05.jpg\" alt=\"\"></p>\n<p>Confirm the board is online, by clicking <a href=\"https://webduino.io/device.html\">Check Device Status</a>. Open your Youtube video and click on the top right red button &quot;Run Blocks&quot; to execute the stack. Then try turning the Potentiometer knob and you&#39;ll see the volume change.</p>\n<p>Solution: <a href=\"http://blockly.webduino.io/?lang=en#-KYM6mGIrb1A4NStOp4R\">http://blockly.webduino.io/?lang=en#-KYM6mGIrb1A4NStOp4R</a> </p>\n<p>If you&#39;d like the volume to change in reverse (originally turning the volume up by turning the Potentiometer clock-wise but you’d like to turn the volume up by turning the Potentiometer counterclockwise), all you have to do is change the values in the &quot;Scale conversion&quot; block, change 0 to 1 and 1 to 0. Or if you prefer to play with hardware, you could change the 3.3V pin to GND and GND to 3.3V, the values should change as well.</p>\n<p><img src=\"../../img/tutorials/en/tutorial-35-06.jpg\" alt=\"\"></p>\n<p>##Code Explanation (<a href=\"https://bin.webduino.io/qazu/edit?html,css,js,output\">Check Webduino Bin</a>, <a href=\"https://webduino.io/device.html\">Check Device Status</a>)</p>\n<p>Include <code>webduino-all.min.js</code> in the header of your html files in order to support all of the Webduino&#39;s components. If the codes are generated by Webduino Blockly, you also have to include <code>webduino-blockly.js</code> in your files.</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>We will place an YouTube video inside a div in the HTML file.</p>\n<pre><code>&lt;div id=&quot;player&quot;&gt;&lt;/div&gt;\n</code></pre><p>The image changes because we set the position for our image to &quot;absolute&quot; in our CSS file. </p>\n<pre><code>#demo-area-03-container {\n  position: relative;\n  width: 150px;\n  height: 150px;\n}\n\n#demo-area-03-image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 150px;\n  height: 150px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  transform-origin: 75px 75px;\n  -webkit-transform-origin: 75px 75px;\n  -moz-transform-origin: 75px 75px;\n}\n</code></pre><p>The main program starts by importing a YouTube module, then using the <code>on</code> from the Potentiometer to receive signals. The value will be returned to val, and we will use round and &quot;Scale conversion&quot; to acquire the correct values. When we send the values to YouTube volume, to prevent an error of setting the volume higher than 100, we have a function to limit the volume to 100.    </p>\n<pre><code>var photocell;\nvar youtube;\nvar a;\n\nboardReady(&#39;&#39;, async function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  photocell = getPhotocell(board, 3);\n  await new Promise(function (resolve) {\n    var tag = document.createElement(&quot;script&quot;);\n    tag.src = &quot;https://www.youtube.com/iframe_api&quot;;\n    var scptTag = document.getElementsByTagName(&quot;script&quot;)[0];\n    scptTag.parentNode.insertBefore(tag, scptTag);\n    window.onYouTubeIframeAPIReady = function () {\n      youtube = new YT.Player(&quot;player&quot;, {\n        height: &quot;240&quot;,\n        width: &quot;96%&quot;,\n        videoId: &quot;h18K_JnUi4Q&quot;,\n        playerVars: {\n          autoplay: 1,\n          controls: 1\n        },\n        events: {\n          onReady: function (evt) {\n            resolve();\n          }\n        }\n      });\n    };\n  });\n  photocell.on(async function(val){\n    photocell.detectedVal = val;\n    a = Math.round(((photocell.detectedVal - (0)) * (1/((1)-(0)))) * ((100)-(0)) + (0));\n    console.log(a);\n    var varA = a;\n    if (varA &gt;= 100) {\n      varA = 100;\n    }\n    youtube.setVolume(varA);\n  });\n});\n</code></pre><p>Now, you can change the volume of any YouTube video with a Potentiometer! \nWebduino Bin: <a href=\"https://bin.webduino.io/qazu/edit?html,css,js,output\">https://bin.webduino.io/qazu/edit?html,css,js,output</a><br>Stack setup: <a href=\"http://blockly.webduino.io/?lang=en#-KYM6xamvdA--Km37Li4\">http://blockly.webduino.io/?lang=en#-KYM6xamvdA--Km37Li4</a></p>\n<!-- <div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n -->\n<!-- @@close-->"}}