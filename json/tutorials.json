{"cloud-01-introduction":{"tag":"cloud","src":"cloud-01-introduction.html","title":"Webduino 雲端平台","banner":"cloud-01-01.jpg","img":"cloud-01-01s.jpg","date":20170511,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino 雲端平台 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"「Webduino 雲端平台」是 Webduino 所研發的雲端服務，平台裡不僅具備全方位的物聯網開發工具：雲端裝置管理、Webduino Blockly，未來更會整合模擬器、App 開發工具和後端流程工具，實現「只要做一個網頁，就可以從硬體到軟體、從軟體到雲端、從雲端到行動裝置」的完整應用。\">\n\n<meta itemprop=\"description\" content=\"「Webduino 雲端平台」是 Webduino 所研發的雲端服務，平台裡不僅具備全方位的物聯網開發工具：雲端裝置管理、Webduino Blockly，未來更會整合模擬器、App 開發工具和後端流程工具，實現「只要做一個網頁，就可以從硬體到軟體、從軟體到雲端、從雲端到行動裝置」的完整應用。\">\n\n<meta property=\"og:description\" content=\"「Webduino 雲端平台」是 Webduino 所研發的雲端服務，平台裡不僅具備全方位的物聯網開發工具：雲端裝置管理、Webduino Blockly，未來更會整合模擬器、App 開發工具和後端流程工具，實現「只要做一個網頁，就可以從硬體到軟體、從軟體到雲端、從雲端到行動裝置」的完整應用。\">\n\n<meta property=\"og:title\" content=\"Webduino 雲端平台\" >\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/cloud/index.html\">\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/cloud-01-introduction.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/cloud-01-fb.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/cloud-01-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-\">Webduino 雲端平台</h1>\n<p>「Webduino 雲端平台」是 Webduino 所研發的雲端服務，平台裡不僅具備全方位的物聯網開發工具：雲端裝置管理、Webduino Blockly，未來更會整合模擬器、App 開發工具和後端流程工具，實現「<strong>只要做一個網頁，就可以從硬體到軟體、從軟體到雲端、從雲端到行動裝置</strong>」的完整應用。</p>\n<blockquote>\n<p>開始使用：<a href=\"https://cloud.webduino.io#_blank\">https://cloud.webduino.io</a></p>\n</blockquote>\n<p><img src=\"../img/tutorials/cloud-01-02.jpg\" alt=\"\"></p>\n<h2 id=\"webduino-\">Webduino 雲端平台的四大服務</h2>\n<p>Webduino 雲端平台將會包含以下四大服務功能，透過這四大服務，將可以完整實現所有的開發流程。</p>\n<h3 id=\"1-webduino-blockly-\">1. Webduino Blockly 程式積木 ( 正式推出 )</h3>\n<p>有別於目前「免註冊」的 Webduino Blockly ( <a href=\"https://blockly.webduino.io#_blank\">https://blockly.webduino.io</a> )，雲端平台的 Webduino Blockly 具備存檔與共享檔案的功能，並提供豐富的電子元件與傳感器模組 ( 空氣懸浮粒子 ( PM2.5 ) 偵測、電子磅秤、條碼機、OLED、LCD、MP3 播放器 )，此外，也可以透過 Google 試算表、線上繪製圖表...等網頁服務，完成進階的創意應用。</p>\n<p>未來，雲端平台的 Webduino Blockly 更會整合線上模擬器與關卡體驗教學，實現最完整的物聯網開發流程。</p>\n<p><img src=\"../img/tutorials/cloud-01-03.jpg\" alt=\"\"></p>\n<h3 id=\"2-webduino-device-\">2. Webduino Device 裝置管理 ( 正式推出 )</h3>\n<p>透過 Webduino Device 裝置管理的協助，不論手邊有多少物聯網的開發裝置，都可以在雲端平台上掌握裝置的上下線狀態、韌體版本以及安全性設定，不在身邊的裝置，透過雲端更新的方式也可輕鬆進行遠端更新，甚至多台裝置可以同時更新、同時設定。</p>\n<p>如今擁有 Webduino Device 裝置管理之後，裝置的操控安全性與穩定性更會大幅提升，使用者將會感受到最方便物聯網裝置管理體驗。</p>\n<p><img src=\"../img/tutorials/cloud-01-04.jpg\" alt=\"\"></p>\n<h3 id=\"3-webduino-hyproto-app-2017-\">3. Webduino HyProto APP 開發 ( 預計 2017 年底推出 )</h3>\n<p>Webduino HyProto 將會滿足所有物聯網與網頁開發者的願望：「快速打造 APP」，使用者只需要使用 HyProto「做一個網頁」，就能輕鬆打造 APP 介面、控制物聯網裝置並串起各式網頁服務，最後更可以發佈為 Android 與 iOS 的 APP。</p>\n<p>透過 Webduino HyProto 的輔助，任何人都能搖身一變成為 APP 大師，都能輕鬆掌握網頁、APP 和物聯網的開發精髓。</p>\n<p><img src=\"../img/tutorials/cloud-01-05.jpg\" alt=\"\"></p>\n<h3 id=\"4-webduino-2018-\">4. Webduino 流程開發工具 ( 預計 2018 年推出 )</h3>\n<p>Webduino 流程開發工具是一個擁有強大功能的後端服務，就算是完全不會網頁後端的技術，都可以透過簡單的流程圖組合，輕鬆部署程式到伺服器運作，不論寄送 Eamil、發送 Twitter 都可以輕鬆達成。</p>\n<p><img src=\"../img/tutorials/cloud-01-06.jpg\" alt=\"\">\n<!-- @@close--></p>\n"},"cloud-02-register":{"tag":"cloud","src":"cloud-02-register.html","title":"雲端平台 - 註冊與登入","banner":"cloud-02-01.jpg","img":"cloud-02-01s.jpg","date":20170511,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>雲端平台 - 註冊與登入 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"使用 Webduino 雲端平台的第一步就是註冊，註冊後便能儲存開發中的專案，並且進行物聯網裝置與個人帳號的綁定，大幅提高開發與學習的完整性。\">\n\n<meta itemprop=\"description\" content=\"使用 Webduino 雲端平台的第一步就是註冊，註冊後便能儲存開發中的專案，並且進行物聯網裝置與個人帳號的綁定，大幅提高開發與學習的完整性。\">\n\n<meta property=\"og:description\" content=\"使用 Webduino 雲端平台的第一步就是註冊，註冊後便能儲存開發中的專案，並且進行物聯網裝置與個人帳號的綁定，大幅提高開發與學習的完整性。\">\n\n<meta property=\"og:title\" content=\"雲端平台 - 註冊與登入\" >\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/cloud/basic/cloud-register.html\">\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/cloud-02-register.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/cloud-02-fb.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/cloud-02-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-\">雲端平台 - 註冊與登入</h1>\n<p>使用 Webduino 雲端平台的第一步就是註冊，註冊後便能儲存開發中的專案，並且進行物聯網裝置與個人帳號的綁定，大幅提高開發與學習的完整性。</p>\n<h2 id=\"-\">註冊新帳號</h2>\n<p>註冊的方式有兩種，一種是「使用 Google 帳號登入」，第二種方式可以點選右下角的「馬上註冊一個」連結註冊新帳號。</p>\n<p><img src=\"../img/tutorials/cloud-02-02.jpg\" alt=\"\"></p>\n<p>註冊新帳號只需要填入「電子信箱」與「密碼」( 此處的密碼不是電子信箱的密碼，是登入 Webduino 雲端平台的密碼 )，接著勾選點選下方「我不是機器人」，最後按下「註冊」按鈕。</p>\n<p><img src=\"../img/tutorials/cloud-02-03.jpg\" alt=\"\"></p>\n<p>按完「註冊」按鈕之後，會寄送一封認證信到註冊的電子信箱，前往電子信箱收信並且點選認證按鈕之後，就可以完成註冊。</p>\n<p><img src=\"../img/tutorials/cloud-02-04.jpg\" alt=\"\"></p>\n<h2 id=\"-\">登入雲端平台</h2>\n<p>註冊完成後回到登入畫面，輸入電子信箱與密碼，就能登入雲端平台，若發生忘記密碼的情況，可點選「忘記密碼」按鈕重新取得密碼登入。</p>\n<p><img src=\"../img/tutorials/cloud-02-05.jpg\" alt=\"\"></p>\n<p>登入平台後可以看到 Webduino 目前提供的兩個主要服務「Webduino Blockly 程式積木」與「Webduino Device 裝置管理」，未來推出的新功能，也會陸續呈現於這個頁面。</p>\n<p><img src=\"../img/tutorials/cloud-02-06.jpg\" alt=\"\"></p>\n<h2 id=\"-\">技術支援</h2>\n<p>若在註冊或登入上遇到任何問題，可透過以下幾種方式聯繫技術人員，尋求技術協助：</p>\n<ul>\n<li>Webduino 粉絲團：<a href=\"https://www.facebook.com/webduino#_blank\">https://www.facebook.com/webduino</a></li>\n<li>技術討論社團：<a href=\"https://www.facebook.com/groups/webduino#_blank\">https://www.facebook.com/groups/webduino</a></li>\n<li>客服信箱：<a href=\"mailto:webduino.io@gmail.com#_blank\">webduino.io@gmail.com</a></li>\n<li>客服電話：886-7-3388511</li>\n</ul>\n<!-- @@close-->\n"},"cloud-03-webduino-blockly":{"tag":"cloud","src":"cloud-03-webduino-blockly.html","title":"Blockly 程式積木","banner":"cloud-03-01.jpg","img":"cloud-03-01s.jpg","date":20170511,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Blockly 程式積木 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"有別於目前「免註冊」的 Webduino Blockly，雲端平台的 Webduino Blockly 具備存檔與共享檔案的功能，並提供豐富的電子元件與傳感器模組 ( 空氣懸浮粒子 ( PM2.5 ) 偵測、電子磅秤、條碼機、OLED、LCD、MP3 播放器 )，此外，也可以透過 Google 試算表、線上繪製圖表...等網頁服務，完成進階的創意應用。\">\n\n<meta itemprop=\"description\" content=\"有別於目前「免註冊」的 Webduino Blockly，雲端平台的 Webduino Blockly 具備存檔與共享檔案的功能，並提供豐富的電子元件與傳感器模組 ( 空氣懸浮粒子 ( PM2.5 ) 偵測、電子磅秤、條碼機、OLED、LCD、MP3 播放器 )，此外，也可以透過 Google 試算表、線上繪製圖表...等網頁服務，完成進階的創意應用。\">\n\n<meta property=\"og:description\" content=\"有別於目前「免註冊」的 Webduino Blockly，雲端平台的 Webduino Blockly 具備存檔與共享檔案的功能，並提供豐富的電子元件與傳感器模組 ( 空氣懸浮粒子 ( PM2.5 ) 偵測、電子磅秤、條碼機、OLED、LCD、MP3 播放器 )，此外，也可以透過 Google 試算表、線上繪製圖表...等網頁服務，完成進階的創意應用。\">\n\n<meta property=\"og:title\" content=\"Blockly 程式積木\" >\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/cloud/basic/webduino-blockly.html\">\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/cloud-03-webduino-blockly.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/cloud-03-fb.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/cloud-03-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"blockly-\">Blockly 程式積木</h1>\n<p>有別於目前「免註冊」的 Webduino Blockly ( <a href=\"https://blockly.webduino.io#_blank\">https://blockly.webduino.io</a> )，雲端平台的 Webduino Blockly 具備存檔與共享檔案的功能，並提供豐富的電子元件與傳感器模組 ( 空氣懸浮粒子 ( PM2.5 ) 偵測、電子磅秤、條碼機、OLED、LCD、MP3 播放器 )，此外，也可以透過 Google 試算表、線上繪製圖表...等網頁服務，完成進階的創意應用。</p>\n<h2 id=\"-\">建立新檔案</h2>\n<p>進入雲端平台首頁，點選 Webduino Blockly 程式積木，即可進入檔案管理畫面。</p>\n<p><img src=\"../img/tutorials/cloud-03-02.jpg\" alt=\"\"></p>\n<p>點選上方的「+」號，輸入檔名之後就可以建立新的編輯檔案。</p>\n<p><img src=\"../img/tutorials/cloud-03-03.jpg\" alt=\"\"></p>\n<p>新檔案建立完成後，點選檔案名稱，便可開始編輯檔案。</p>\n<p><img src=\"../img/tutorials/cloud-03-04.jpg\" alt=\"\"></p>\n<p>檔案編輯均會<strong>自動儲存</strong>，若尚未儲存完成，關閉檔案的時候會出現「尚未儲存完成」的提示訊息。</p>\n<p><img src=\"../img/tutorials/cloud-03-05.jpg\" alt=\"\"></p>\n<h2 id=\"-\">分享檔案</h2>\n<p>點選每個檔案後方的「分享」圖示，會打開檔案分享的設定。</p>\n<p><img src=\"../img/tutorials/cloud-03-06.jpg\" alt=\"\"></p>\n<p>分享功能有以下四個選項，透過這四種分享方式，不論是個人開發、團隊開發，甚至是應用在課程教學，都相當方便實用。</p>\n<ul>\n<li><strong>不分享</strong>：只有自己能使用與瀏覽</li>\n<li><strong>指定使用者分享</strong>：輸入指定使用者的 E-Mail，讓指定使用者可以瀏覽檔案</li>\n<li><strong>公開分享</strong>：所有人可以在「公開的檔案」找到該檔案並進行瀏覽</li>\n<li><strong>非公開分享</strong>：無法於公開的檔案找到該檔案，但只要知道檔案連結便可瀏覽檔案</li>\n</ul>\n<h2 id=\"-\">操作與編輯介面</h2>\n<p>基本上 Webduino 雲端平台的 Blockly 和「免註冊」Webduino Blockly 在介面上大同小異，左邊是積木功能區，右上方則是所一些好用的輔助工具，而雲端平台 Blockly 因為具備了註冊和檔案管理的功能，因此在右上方額外多了「登出」和「檔案管理」的按鈕。</p>\n<p><img src=\"../img/tutorials/cloud-03-07.jpg\" alt=\"\"></p>\n<p>左側的積木功能也額外新增了「OLED 螢幕」、「LCD 螢幕」、「細懸浮微粒」、「Google 試算表」...等好用的積木模組。</p>\n<p><img src=\"../img/tutorials/cloud-03-08.jpg\" alt=\"\"></p>\n<h2 id=\"-\">技術支援</h2>\n<p>若在操作或檔案分享上遇到任何問題，可透過以下幾種方式聯繫技術人員，尋求技術協助：</p>\n<ul>\n<li>Webduino 粉絲團：<a href=\"https://www.facebook.com/webduino#_blank\">https://www.facebook.com/webduino</a></li>\n<li>技術討論社團：<a href=\"https://www.facebook.com/groups/webduino#_blank\">https://www.facebook.com/groups/webduino</a></li>\n<li>客服信箱：<a href=\"mailto:webduino.io@gmail.com#_blank\">webduino.io@gmail.com</a></li>\n<li>客服電話：886-7-3388511</li>\n</ul>\n<!-- @@close-->\n"},"cloud-04-webduino-device":{"tag":"cloud","src":"cloud-04-webduino-device.html","title":"Device 裝置管理 ( 裝置認證 )","banner":"cloud-04-01.jpg","img":"cloud-04-01s.jpg","date":20170511,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Device 裝置管理 ( 裝置認證 ) :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"透過 Webduino Device 裝置管理的協助，不論手邊有多少物聯網的開發裝置，都可以在雲端平台上掌握裝置的上下線狀態、韌體版本以及安全性設定。\">\n\n<meta itemprop=\"description\" content=\"透過 Webduino Device 裝置管理的協助，不論手邊有多少物聯網的開發裝置，都可以在雲端平台上掌握裝置的上下線狀態、韌體版本以及安全性設定。\">\n\n<meta property=\"og:description\" content=\"透過 Webduino Device 裝置管理的協助，不論手邊有多少物聯網的開發裝置，都可以在雲端平台上掌握裝置的上下線狀態、韌體版本以及安全性設定。\">\n\n<meta property=\"og:title\" content=\"Device 裝置管理 ( 裝置認證 )\" >\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/cloud/basic/webduino-device.html\">\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/cloud-04-webduino-device.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/cloud-04-fb.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/cloud-04-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"device-\">Device 裝置管理 ( 裝置認證 )</h1>\n<p>透過 Webduino Device 裝置管理的協助，不論手邊有多少物聯網的開發裝置，都可以在雲端平台上掌握裝置的上下線狀態、韌體版本以及安全性設定。</p>\n<h2 id=\"-\">新增裝置</h2>\n<p>有別於傳統物聯網的開發板，Webduino 可以在雲端平台上將裝置與帳號綁定，近一步提高物聯網操控的安全性與便利性，如果需要綁定裝置，首先在雲端平台的首頁，點選 Webduino Device 裝置管理進入管理畫面。 </p>\n<p><img src=\"../img/tutorials/cloud-04-02.jpg\" alt=\"\"></p>\n<p>畫面的左側除了列出目前支援 Webduino 雲端平台的開發板類型，當我們新增該類型的開發板，該分類就會以數字表示該類型開發板的數量，同時，選單也是一個簡單的「篩選器」，點選不同的類型，就只會列出該類型的開發板。</p>\n<p><img src=\"../img/tutorials/cloud-04-03.jpg\" alt=\"\"></p>\n<p>新增開發板很簡單，只要點選右上方的「+」號即可新增，一開始會詢問開發板的類型，如果選錯了，則必須刪除該開發板再重新新增。</p>\n<p><img src=\"../img/tutorials/cloud-04-04.jpg\" alt=\"\"></p>\n<p>新增完成後，就會在畫面中看到裝置的名稱、類型與版本，如果開發板處在「上線狀態」，則狀態會變成綠色閃電圖示，如果開發板處於「離線狀態」，則狀態會是斷線的紅色閃電圖示。</p>\n<p><img src=\"../img/tutorials/cloud-04-05.jpg\" alt=\"\"></p>\n<h2 id=\"-\">裝置認證</h2>\n<p>只有新增裝置還不夠，如果要進行「雲端更新」則必須進行裝置的「認證」，認證的步驟如下：</p>\n<h3 id=\"1-\">1.點選裝置「認證」連結</h3>\n<p>新增裝置後，在每個裝置後方都會有一個「認證」的連結，點選就會開始進行認證。</p>\n<p><img src=\"../img/tutorials/cloud-04-06.jpg\" alt=\"\"></p>\n<h3 id=\"2-\">2.將開發板上線</h3>\n<p>一開始會先要求將開發板連線，目的在於確認開發板可以透過網路下載對應的更新檔案，若開發板一直處於上線狀態，則會直接進入下一個步驟。</p>\n<p><img src=\"../img/tutorials/cloud-04-07.jpg\" alt=\"\"></p>\n<h3 id=\"3-\">3. 將開發板離線</h3>\n<p>為了確認裝置在為帳號註冊者所有，所以平台會先要求使用者將開發板離線，此時只要移除開發板電源即可，當平台確認後 ( 約 20 秒 )，便可以進行下一步。</p>\n<blockquote>\n<p>目的在於確認裝置在平台用戶的手邊，如果裝置不在手邊，便無法在短時間內完成一系列認證步驟。</p>\n</blockquote>\n<p><img src=\"../img/tutorials/cloud-04-08.jpg\" alt=\"\"></p>\n<h3 id=\"4-15-\">4. 按下「認證」按鈕後，15 秒內將開發板上線</h3>\n<p>點選下一步之後，保持開發板離線的狀態，接著按下「認證」按鈕，按完後將開發板接上電源連上網路，當平台確認開發板上線之後，確認開發板認證成功。</p>\n<p><img src=\"../img/tutorials/cloud-04-09.jpg\" alt=\"\"></p>\n<p>認證成功之後，原本的認證連結，就換更換為一個綠色的勾勾圖示，若移除了此塊開發板，再次添加同一塊開發板，仍必須重新認證。</p>\n<p><img src=\"../img/tutorials/cloud-04-10.jpg\" alt=\"\"></p>\n<h2 id=\"-\">技術支援</h2>\n<p>若雲端更新或添加裝置有遇到任何問題，可透過以下幾種方式聯繫技術人員，尋求技術協助：</p>\n<ul>\n<li>Webduino 粉絲團：<a href=\"https://www.facebook.com/webduino#_blank\">https://www.facebook.com/webduino</a></li>\n<li>技術討論社團：<a href=\"https://www.facebook.com/groups/webduino#_blank\">https://www.facebook.com/groups/webduino</a></li>\n<li>客服信箱：<a href=\"mailto:webduino.io@gmail.com#_blank\">webduino.io@gmail.com</a></li>\n<li>客服電話：886-7-3388511</li>\n</ul>\n<!-- @@close-->\n"},"cloud-05-webduino-device-update":{"tag":"cloud","src":"cloud-05-webduino-device-update.html","title":"Device 裝置管理 ( 雲端更新 )","banner":"cloud-05-01.jpg","img":"cloud-05-01s.jpg","date":20170511,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Device 裝置管理 ( 雲端更新 ) :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"如果已經透過 Webduino Device 裝置管理新增與認證裝置，下一步就可以開始進行雲端更新，不論裝置是否在身邊，只要裝置處於上線狀態，就能透過雲端更新的方式也可輕鬆進行遠端更新，甚至多台裝置可以同時更新、同時設定。\">\n\n<meta itemprop=\"description\" content=\"如果已經透過 Webduino Device 裝置管理新增與認證裝置，下一步就可以開始進行雲端更新，不論裝置是否在身邊，只要裝置處於上線狀態，就能透過雲端更新的方式也可輕鬆進行遠端更新，甚至多台裝置可以同時更新、同時設定。\">\n\n<meta property=\"og:description\" content=\"如果已經透過 Webduino Device 裝置管理新增與認證裝置，下一步就可以開始進行雲端更新，不論裝置是否在身邊，只要裝置處於上線狀態，就能透過雲端更新的方式也可輕鬆進行遠端更新，甚至多台裝置可以同時更新、同時設定。\">\n\n<meta property=\"og:title\" content=\"Device 裝置管理 ( 雲端更新 )\" >\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/cloud/basic/webduino-device-update.html\">\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/cloud-05-webduino-device-update.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/cloud-05-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/cloud-05-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"device-\">Device 裝置管理 ( 雲端更新 )</h1>\n<p>如果已經透過 Webduino Device 裝置管理新增與認證裝置，下一步就可以開始進行雲端更新，不論裝置是否在身邊，只要裝置處於上線狀態，就能透過雲端更新的方式也可輕鬆進行遠端更新，甚至多台裝置可以同時更新、同時設定。</p>\n<h2 id=\"-\">雲端更新韌體</h2>\n<p>雲端更新的方式很簡單，一開始先勾選需要雲端更新的裝置，點選左上方的「更新韌體」按鈕，雲端更新可以進行單選或是多選，但所選取的裝置必須為<strong>同一種類型且經過認證</strong>，如果發現多選之後無法點選更新按鈕，可能是包含了不同類型的裝置，或有某些裝置尚未經過認證。( 更新版本請參考下方「雲端更新版本」 ) </p>\n<blockquote>\n<p>雲端更新支援的開發板：<em>馬克一號、Fly</em> ( Smart 目前僅支援雲端更新版本 )</p>\n<p><strong>開發板 SSID 為 wa6000 號之前的開發板無法進行更新，需寄回 Webduino 進行更新</strong> ( 例如 wa6001 可以更新，wa5999 無法更新 )，郵寄地址：80661 高雄市前鎮區復興四路 12 號 2 樓之 6，慶奇科技收。( 請於信封或包裹內容描述「無法進行雲端更新，協助更新版本」)</p>\n</blockquote>\n<p><img src=\"../img/tutorials/cloud-05-02.jpg\" alt=\"\"></p>\n<p>點選更新韌體按鈕之後，可以從下拉選單選擇需要更新的韌體。</p>\n<p><img src=\"../img/tutorials/cloud-05-03.jpg\" alt=\"\"></p>\n<p>選擇完成後就會開始進行更新，更新完成，開發板就會變成相對應的韌體了。</p>\n<blockquote>\n<p>注意，更新的時候<strong>切勿移除開發板電源或中斷網路連線</strong>，避免更新失敗。</p>\n</blockquote>\n<p><img src=\"../img/tutorials/cloud-05-04.jpg\" alt=\"\"></p>\n<p>使用 Webduino 雲端平台更新的好處，只要裝置都經過認證，就可以一次勾選多台裝置同時更新。</p>\n<blockquote>\n<p>同時更新必須為同一種類型的開發板。</p>\n</blockquote>\n<p><img src=\"../img/tutorials/cloud-05-05.jpg\" alt=\"\"></p>\n<p>在燒錄完成的訊息提示裡，也會標註每一個裝置的燒錄狀態，燒錄成功會用綠色表示，燒錄失敗會用紅色表示。</p>\n<p><img src=\"../img/tutorials/cloud-05-06.jpg\" alt=\"\"></p>\n<h2 id=\"-\">雲端更新版本</h2>\n<p>除了更新操控元件的韌體外，亦可透過「更新版本」的按鈕，將開發板核心程式更新，近一步取得更穩定的開發板核心程式。( 注意，更新的時候<strong>切勿移除開發板電源或中斷網路連線</strong>，避免更新失敗。 )</p>\n<blockquote>\n<p>雲端更新版本支援的開發板：<em>馬克一號、Fly、Smart</em> </p>\n</blockquote>\n<p><img src=\"../img/tutorials/cloud-05-07.jpg\" alt=\"\"></p>\n<h2 id=\"-\">技術支援</h2>\n<p>若雲端更新或添加裝置有遇到任何問題，可透過以下幾種方式聯繫技術人員，尋求技術協助：</p>\n<ul>\n<li>Webduino 粉絲團：<a href=\"https://www.facebook.com/webduino#_blank\">https://www.facebook.com/webduino</a></li>\n<li>技術討論社團：<a href=\"https://www.facebook.com/groups/webduino#_blank\">https://www.facebook.com/groups/webduino</a></li>\n<li>客服信箱：<a href=\"mailto:webduino.io@gmail.com#_blank\">webduino.io@gmail.com</a></li>\n<li>客服電話：886-7-3388511</li>\n</ul>\n<!-- @@close-->\n"},"info-01-introduction":{"tag":"info","src":"info-01-introduction.html","title":"Webduino 的基本介紹","banner":"info-01-01-new2.jpg","img":"info-01-01s-new.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino 的基本介紹 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino 這個名稱的由來，就是 Web 與 Arduino 這兩個單字的結合，也正式宣告了可以用 Web 控制 Arduino 的時代來臨，雖然目前市面上也有一些類似的技術或解決方案，但千篇一律的都是寫 C/C++ 讓 Arduino 可以連上網，或是透過網路的方式將 C/C++ 寫入 Arduino，幾乎沒有能夠純粹利用 Web 技術去控制 Arduino 的方式。\">\n\n<meta itemprop=\"description\" content=\"Webduino 這個名稱的由來，就是 Web 與 Arduino 這兩個單字的結合，也正式宣告了可以用 Web 控制 Arduino 的時代來臨，雖然目前市面上也有一些類似的技術或解決方案，但千篇一律的都是寫 C/C++ 讓 Arduino 可以連上網，或是透過網路的方式將 C/C++ 寫入 Arduino，幾乎沒有能夠純粹利用 Web 技術去控制 Arduino 的方式。\">\n\n<meta property=\"og:description\" content=\"Webduino 這個名稱的由來，就是 Web 與 Arduino 這兩個單字的結合，也正式宣告了可以用 Web 控制 Arduino 的時代來臨，雖然目前市面上也有一些類似的技術或解決方案，但千篇一律的都是寫 C/C++ 讓 Arduino 可以連上網，或是透過網路的方式將 C/C++ 寫入 Arduino，幾乎沒有能夠純粹利用 Web 技術去控制 Arduino 的方式。\">\n\n<meta property=\"og:title\" content=\"Webduino 的基本介紹\" >\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/index.html\">\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-01-introduction.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-01-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-01-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<p>#Webduino 的基本介紹</p>\n<p>Webduino 這個名稱的由來，就是 Web 與 Arduino 這兩個單字的結合，也正式宣告了可以用 Web 控制 Arduino 的時代來臨，雖然目前市面上也有一些類似的技術或解決方案，但千篇一律的都是寫 C/C++ 讓 Arduino 可以連上網，或是透過網路的方式將 C/C++ 寫入 Arduino，幾乎沒有能夠純粹利用 Web 技術去控制 Arduino 的方式。</p>\n<p><br/></p>\n<p>Webduino 有別於傳統要寫 C 或 C++ 才能控制 Arduino 的傳感器，Webduino 利用了 WebComponents 的方法，讓使用者可以在完全不用接觸 C 或 C++ 的情形下，只需要撰寫簡單的網頁程式 ( HTML 與 Javascript )，就可以串接 Arduino，大幅降低開發的門檻，讓創造力不受技術門檻的拘束，利用各式各樣形形色色的傳感器，創造與眾不同的物聯網應用。</p>\n<p>##Webduino 與 Arduino 的差異</p>\n<table>\n<tr>\n<th></th>\n<th>Arduino</th>\n<th>Webduino</th>\n</tr>\n<tr>\n<th>開發語言</th>\n<td>C / C++</td>\n<td>HTML / JavaScript</td>\n</tr>\n<tr>\n<th>開發環境</th>\n<td>Arduino IDE</td>\n<td>瀏覽器 / ...</td>\n</tr>\n<tr>\n<th>連接方式</th>\n<td>USB</td>\n<td>WiFi</td>\n</tr>\n<tr>\n<th>更新程式</th>\n<td>連接燒錄</td>\n<td>立即更新</td>\n</tr>\n</table>\n\n<p>##什麼是 Webduino 開發板？</p>\n<p>Webduino開發板是結合了 Arduino Pro Mini 和 WiFi 模組晶片，所開發出來的電路板，只要插電源就會自動連上雲端，方便開發者進行物聯網裝置的研發與應用。</p>\n<p><br/></p>\n<p><img src=\"../img/tutorials/info-02-02-new.jpg\" alt=\"Webduino 的基本介紹 - 什麼是 Webduino 開發板？\"></p>\n<p><br/></p>\n<p>Webduino 開發板是一塊易學易用的物聯網開發板，不管是入門使用者、進階開發者、資深研究者等，不需要理會硬體的煩雜技術，只需用 Web 技術，就可以控制 Arduino 相容的感應模組的神兵利器！如下圖示，任何前端開發工程師只要用 HTML 與 JavaScript ，就可以立即點亮 LED 燈。</p>\n<p><br/></p>\n<p><img src=\"../img/tutorials/info-01-02.gif\" alt=\"Webduino 的基本介紹 - 什麼是 Webduino 開發板？\"></p>\n<p>##Webduino 的開發方式</p>\n<p>Webduino 整合了最新的Web元件化技術 ( WebComponents )，開發者只要使用自訂 HTML 標籤，就可以完成 Webduino 開發板的連接與物聯網裝置的監控，每一片 Webduino 開發板都預設有一個專屬的雲端通道代碼，開發者只要撰寫 HTML 標籤，<strong>在 device 屬性填入雲端通道代碼</strong>，這個網頁就可以輕易完成和 Webduino 開發板的連線。</p>\n<p>##Webduino 在未來物聯網的發展趨勢</p>\n<p>未來的物聯網市場，可能是 IT 產業發展至今所遇到前所未有的發展契機，在廣大的使用者當中，包含了非常多樣化與異質化的使用族群，唯有更簡易、方面與跨平台的觀念和開發模式，可以滿足這些使用者的需求，並在未來的物聯網應用中，佔據不倒的地位，然而，憑藉著這樣概念發展出的 Webduino，是值得讓所有的 HTML/JavaScript 前端開發者，當成進攻物聯網市場的神兵利器！</p>\n<!-- @@close-->\n"},"info-02-setup":{"tag":"info","src":"info-02-setup.html","title":"Webduino 初始化設定","banner":"info-02-01.jpg","img":"info-02-01s.jpg","date":20150420,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino 初始化設定 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"實作 Webduino 之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino 開發板可以自動上網，就如同我們買了一支手機回家，要設定手機的 Wi-Fi，才能夠讓手機連結家裡的 Wi-Fi 上網，Webduino 開發板也是如此。\">\n\n<meta itemprop=\"description\" content=\"實作 Webduino 之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino 開發板可以自動上網，就如同我們買了一支手機回家，要設定手機的 Wi-Fi，才能夠讓手機連結家裡的 Wi-Fi 上網，Webduino 開發板也是如此。\">\n\n<meta property=\"og:description\" content=\"實作 Webduino 之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino 開發板可以自動上網，就如同我們買了一支手機回家，要設定手機的 Wi-Fi，才能夠讓手機連結家裡的 Wi-Fi 上網，Webduino 開發板也是如此。\">\n\n<meta property=\"og:title\" content=\"Webduino 初始化設定\" >\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/board/mark1-setup.html\">\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-02-setup.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-02-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-02-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<p>#Webduino 初始化設定</p>\n<p>實作 Webduino 之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino 開發板可以自動上網，就如同我們買了一支手機回家，要設定手機的 Wi-Fi，才能夠讓手機連結家裡的 Wi-Fi 上網，Webduino 開發板也是如此。</p>\n<p>以下的步驟將會介紹如何進行設定，閱讀過程請注意<strong>橘黃色</strong>的文字，這些文字描述了大家在設定的時候，比較容易犯的錯誤。</p>\n<p>##Webduino 初始化影片介紹</p>\n<p>Webduino 開發板 ( 馬克一號 )：</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/cwzpAK_0f2I\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>##Webduino 初始化步驟說明</p>\n<ul>\n<li><p>###1. 組合 Webduino 開發板</p>\n<p>  將「Arduino Pro Mini 晶片」與「ESP8266 Wi-Fi 晶片」組合至底板，就成為「Webduino 開發板」。</p>\n<p>  <img src=\"../img/tutorials/info-02-02-new.jpg\" alt=\"Webduino - 組合 Webduino 開發板\"></p>\n</li>\n<li><p>###2. 開始進行初始化</p>\n<p>  Webduino 開發板馬克一號，上面有一顆可以左右扳動的小開關，將按鈕扳動至下圖的位置 ( 左側，STA 模式 )，接上電源，就可以開始進行初始化設定。</p>\n<p>  <img src=\"../img/tutorials/info-02-09.jpg\" alt=\"Webduino - 開始進行初始化\"></p>\n</li>\n<li><p>###3. 使用 Wi-Fi 搜尋 Webduino 開發板</p>\n<p>  使用電腦或行動裝置，打開 Wi-Fi 搜尋對應的 Webduino 開發板 SSID 名稱，點選之後輸入密碼，即可讓電腦或行動裝置與 Webduino 開發板連線，<strong>開發板的 SSID 與密碼會寫在「裝置說明卡」裡頭，通常為「wa」開頭</strong>。( 範例名稱為 wa101 )</p>\n<p>  <img src=\"../img/tutorials/info-02-04.jpg\" alt=\"Webduino - 使用 Wi-Fi 搜尋 Webduino 開發板\"></p>\n</li>\n</ul>\n<ul>\n<li><p>###4. 連線 Webduino 開發板進行設定</p>\n<p>  打開 Chrome 或 Safari 瀏覽器，於網址列輸入「<b><a href=\"http://192.168.4.1\">http://192.168.4.1</a></b>」，即可打開 Webduino 開發板的設定頁面，在設定頁面輸入家裡、公司場所或行動裝置分享的網路基地台 SSID 與 PASSWORD。( 此處的 SSID 為「網路基地台」的 SSID，並非 Webduino 開發板，<strong>不要填成裝置說明卡上頭的 SSID 與 PASSWORD</strong>，且 SSID 與 PASSWORD 有限制 14 個字元，只能大小寫的英文字母與數字的組合，要特別注意！ )</p>\n<p>  <img src=\"../img/tutorials/info-02-07.jpg\" alt=\"Webduino - 連線 Webduino 開發板進行設定\"></p>\n</li>\n<li><p>###5. 重啟 Webduino 開發板</p>\n<p>  輸入完 SSID 與 PASSWORD 之後，點選送出，若出現「OK」的字樣，表示 Webduino 開發板已經初始化成功，並且可以和家裡、公司場所或行動裝置分享的網路基地台連線 ( 若遲遲沒有出現「OK」字樣，表示初始化設定不成功，返回步驟 3 重新開始 )，完成後先移除開發板電源，再將按開關至右側 ( AP 模式 )，重新接上電源即可進行重啟。</p>\n<p>  <img src=\"../img/tutorials/info-02-10.jpg\" alt=\"Webduino - 重啟 Webduino 開發板\"></p>\n</li>\n<li><p>###6. 確認連線是否成功</p>\n<p>  Webduino 開發板重啟後，便可將電腦或行動裝置切回正常的網路連線，並連結 <a href=\"https://webduino.io/device.html\">https://webduino.io/device.html</a> ，輸入對應的 device 名稱確認是否連線成功，如果連線成功則會出現 OK 的顯示，<strong>連線成功後即可開始玩轉 Webduino</strong>。( 若在網頁上沒有對應 Webduino 開發板，則需重啟 Webduino 開發板或返回步驟 3 重新初始化設定 )</p>\n<p>  <img src=\"../img/tutorials/info-02-06.jpg\" alt=\"Webduino - 確認連線是否成功\"></p>\n<p>  如果是使用 Webduino 開發板馬克一號還有一個更簡單的判斷方式，在板子上有一個紅色的小 LED 燈，正在連線的時候紅色 LED 會發亮，<strong>連線成功後就會熄滅</strong>，若 LED 燈持續閃爍，表示沒有連線成功，這時請重啟 Webduino 開發板，或返回步驟 3 重新初始化設定。</p>\n<p>  <img src=\"../img/tutorials/info-02-11.jpg\" alt=\"Webduino - 確認連線是否成功\"></p>\n</li>\n<li><p>###7. Webduino 開發板已經可以連線網路基地台</p>\n<p>  進行到此步驟，表示 Webduino 開發板已經可以自行連上家裡、公司場所或行動裝置分享的網路基地台，並自動連結上雲端的伺服器，我們就可以開始透過 Wi-Fi 去控制 Webduino 開發板囉！ (  立刻用第 <a href=\"tutorial-01-led.html\">第一個範例</a> 體驗看看吧 )</p>\n<p>  <img src=\"../img/tutorials/info-02-05-new.jpg\" alt=\"Webduino - Webduino 開發板已經可以連線網路基地台\"></p>\n</li>\n</ul>\n<!-- @@close-->"},"info-03-faq":{"tag":"info","src":"info-03-faq.html","title":"常見問題與處理","banner":"info-03-01.jpg","img":"info-03-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>常見問題與處理 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"在接觸 Webduino 的初期，每個人都會遭遇到大大小小不同的問題，這個頁面裡頭會列出許多常見的問題，以及各種問題對應的解決方法，如果有其他的問題，也可以直接 email 給我們。\">\n\n<meta itemprop=\"description\" content=\"在接觸 Webduino 的初期，每個人都會遭遇到大大小小不同的問題，這個頁面裡頭會列出許多常見的問題，以及各種問題對應的解決方法，如果有其他的問題，也可以直接 email 給我們。\">\n\n<meta property=\"og:description\" content=\"在接觸 Webduino 的初期，每個人都會遭遇到大大小小不同的問題，這個頁面裡頭會列出許多常見的問題，以及各種問題對應的解決方法，如果有其他的問題，也可以直接 email 給我們。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/faq/index.html\">\n\n<meta property=\"og:title\" content=\"Webduino 常見問題與處理\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-03-faq.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-03-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-03-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<p>#常見問題與處理</p>\n<p>在接觸 Webduino 的初期，每個人都會遭遇到大大小小不同的問題，這個頁面裡頭會列出許多常見的問題，以及各種問題對應的解決方法，如果有其他的問題，也可以直接 <a href=\"mailto:service@webduino.io\">email</a> 給我們，或是在最下面留言也可以。</p>\n<p><br/></p>\n<p>##關於 Webduino</p>\n<ul>\n<li><p>###1. Webduino 和 Webduino 開發板有差別嗎？</p>\n<blockquote>\n<p>Webduino 是我們正進行的服務，字面意思即是 Web x Arduino，而 Webduino 開發板是服務內的硬體產品，目前有 Webduino 馬克 1 號、Webduino Fly 以及 Webduino Smart 三種型號。</p>\n</blockquote>\n</li>\n<li><p>###2. 馬克 1 號和 Fly 的差別在哪裡？</p>\n<blockquote>\n<p>馬克 1 號是 Arduino Pro mini + Wifi 模組，<strong>可以獨立運作</strong>，而 Fly 是 Arduino UNO 的 Wifi 擴充板，<strong>必須搭配 Arduino UNO 才可運作</strong>。( 馬克 1 號引出來的腳位比較少，而 Fly 具備完整的 UNO 腳位 )</p>\n</blockquote>\n</li>\n<li><p>###3. Webduino 要撰寫哪種程式來控制？</p>\n<blockquote>\n<p>Webduino 顧名思義只要撰寫網頁語法 ( JavaScript ) 就可以控制，所以除了可以跑在網頁前端 ( 瀏覽器端 )，亦可運作於後端 ( NodeJS )。</p>\n</blockquote>\n</li>\n<li><p>###4. 既然是用網頁語法控制，還需要燒錄 Arduino 韌體嗎？</p>\n<blockquote>\n<p>在 Arduino 端<strong>必須</strong>燒錄 Firmata 相關韌體，如果是使用 Webduino 馬克 1 號，已經內建對應的韌體，如果是 Webduino Fly，可以參考：<a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">Arduino 韌體下載與燒錄</a>，有詳細的燒錄介紹。( 未來雲端燒錄服務推出後，就可以直接線上更新韌體 )</p>\n</blockquote>\n</li>\n<li><p>###5. Webduino 可否在瀏覽器關掉的狀態下運行？</p>\n<blockquote>\n<p>不行，如果要在瀏覽器關掉的狀態下運行，例如 24 小時監控...等，<strong>必須要讓程式跑在後端</strong> ( NodeJS )，但如果是單純操控電燈、門鎖...等必須有畫面的程式則不用擔心 ( 因為一定會打開瀏覽器或是 APP 畫面 )。</p>\n</blockquote>\n</li>\n<li><p>###6. 我用了 Webduino 有什麼好處？</p>\n<blockquote>\n<ul>\n<li>(1) 不需要學習艱難的 C 或 C++。</li>\n<li>(2) 由於網頁可直接由瀏覽器呈現，進一步更能轉換成 APP，輕鬆實現跨平台功能！</li>\n<li>(3) 更容易的跨足物聯網體驗開發，滿足各種天馬行空創意的發想。</li>\n<li>(4) 輕鬆結合網路上各種服務 ( Youtube、氣象、股票、匯率...等 )。</li>\n<li>(5) 無痛實現遠端控制，就算人在國外也可以遙控家裡的電器用品。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><br/></p>\n<p>##購買 Webduino</p>\n<ul>\n<li><p>###1. 如何購買 Webduino？</p>\n<blockquote>\n<ul>\n<li>(1) 報名 Webduino 課程，部分課程會附贈有基本的開發材料包。</li>\n<li>(2) 我們使用露天購物平台，可以直接在 <a href=\"https://webduino.io/buy.html\">https://webduino.io/buy.html</a> 找到我們所有的商品。</li>\n<li>(3)  Webduino 海外通路即將在 2017 推出了，海外的朋友敬請期待喔～</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###2. Webduino 教育暨企業合作方案</p>\n<blockquote>\n<p>Webduino 提供教育與企業的合作方案，會包含更豐富的教材與內容，以專題和解決方案的實際課程，提供教師、學生或企業用戶最完整的學習體驗，若您有相關的需求，可直接來信 <a href=\"mailto:service@webduino.io\">service@webduino.io</a> 洽詢相關合作方式。</p>\n</blockquote>\n</li>\n</ul>\n<p><br/></p>\n<p>##Webduino 初始化設定</p>\n<ul>\n<li><p>###1. 為什麼要初始化？</p>\n<blockquote>\n<p>因為 Webduino 開發板是透過網路連線控制，因此必須要透過初始化設定，讓 Webduino 可以自動連上網路。</p>\n</blockquote>\n</li>\n<li><p>###2. 我的網路需要認證，可以使用 Webduino 嗎？</p>\n<blockquote>\n<p>Webduino 開發板目前僅支援 WPA/WPA2 認證 ( 只需 SSID 與 Password )，不支援其他認證模式 ( 身分證、教職員證...等 )。</p>\n</blockquote>\n</li>\n<li><p>###3. Webduino 的 SSID 與家裡 Wi-Fi 的 SSID 差異？</p>\n<blockquote>\n<ul>\n<li>(1) 通常在初始化設定的時候，很容易把 Webduino 的 SSID 與家裡 Wi-Fi 的 SSID 搞混，<strong>Webduino 的 SSID 是這塊開發板的名稱。</strong> ( 通常是 wa + 數字，例如 wa101、wa999，並且會寫在裝置說明卡裡頭。 )</li>\n<li>(2) 當你連結 Webduino 開發板的 SSID，表示我們可以透過「192.168.4.1」連結上 Webduino 開發板，<strong>連結上開發板之後，所看到的 SSID 與 PASSWORD，指的就是家裡、公司環境或行動裝置分享的 Wi-Fi SSID 與密碼</strong>，千萬不要搞錯了。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###4. 為什麼在 Wi-Fi 搜尋看不到 Webduino 開發板的 SSID？</p>\n<blockquote>\n<ul>\n<li>(1) 可能開關處在 AP 模式，將開關扳至 STA 模式再試一次，馬克 1 號可以參考「<a href=\"info-02-setup.html\">Webduino 初始化設定</a>」，Webduino Fly 可以參考「<a href=\"info-04-uno-setup.html\">Webduino Fly 初始化設定</a>」。</li>\n<li>(2) 可能是電池沒電了，建議更換電池或改用 usb 供電。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###5. 為什麼 Wi-Fi 看到 Webduino 開發板，但連線卻出現錯誤</p>\n<blockquote>\n<p>因為部分 Android 行動裝置或 Windows 電腦，認為 Webduino 開發板不具備無線網路基地台的功能 ( Webduino 開發板原本就不是網路基地台 )，所以會強制進行斷線的指令，此時的處理方法如下：</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>(1) Step.1：<strong>忘記</strong>原本已連線的網路設定 ( 公司、環境或家用 Wi-Fi )</li>\n<li>(2) Step.2：<strong>忘記</strong> Webduino 的連線設定 ( 如果你已經有嘗試連線過但出現錯誤 )</li>\n<li>(3) Step.3：重新用 Wi-Fi 搜尋並連結 Webduino 開發板</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###6. 初始化之後，在 device 的網頁看不到對應的 Webduino 開發板名稱？</p>\n<blockquote>\n<ul>\n<li>(1) 可能是您沒有輸入正確的 Wi-Fi SSID 與 PASSWORD。</li>\n<li>(2) 可能是 Wi-Fi 的 SSID 與 PASSWORD 內含特殊字元或長度太長。 ( <strong>只接受大小寫 14 個字元的英文字母與數字的組合</strong> )</li>\n<li>(3) Webduino 不支援 5G 網路連線，可以先換另外一個無線網路嘗試連線 ( 可先使用手機熱點、另外一台無線網路...等進行確認 )。</li>\n<li>(4) 可能是防火牆問題，請確認防火牆是否阻擋 port 1883，如果有，請開啟 port 1883。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><br/></p>\n<p>##Webduino 操作相關</p>\n<ul>\n<li><p>###1. 為什麼 Webduino 開發板已經確認上線，但卻不能控制？</p>\n<blockquote>\n<ul>\n<li>(1) 可能腳位接錯，請重新確認腳位。</li>\n<li>(2) 可能是程式碼寫錯，請確認程式碼是否報錯。</li>\n<li>(3) <strong>可能沒有燒錄對應的韌體</strong>，請參考 <a href=\"info-07-arduino-ino.html\">Arduino 韌體下載與燒錄</a>。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###2. 為什麼在 Blockly 的教學範例，有些積木在編輯工具看不到？</p>\n<blockquote>\n<p>在 Blockly 的一步步教學範例裡頭 ( <a href=\"https://blockly.webduino.io/index-tutorials.html\">連結</a> )，使用的積木較單純，目的是讓新手或學生，可以熟悉每個程式積木的用法，部分「教學積木」已經經過封裝，較為單純，然而在 Blockly 編輯工具的程式積木是實際會用到的積木，所以會有一些差別。</p>\n</blockquote>\n</li>\n<li><p>###3. Webduino 可以使用藍芽或序列埠控制嗎？</p>\n<blockquote>\n<p>可以！在 Webduino Blockly 的開發板積木也可以選擇「Wi-Fi」、「藍芽」或「序列埠」，但 Chrome 必須先安裝兩隻 APP，請參考 <a href=\"info-05-chrome-api-proxy.html\">Chrome API Proxy 使用說明</a>，有完整教學。</p>\n</blockquote>\n</li>\n</ul>\n<p><br/></p>\n<p>##Webduino 服務相關</p>\n<ul>\n<li><p>###1. 可以請 Webduino 來授課或教育訓練嗎？</p>\n<blockquote>\n<p>我們北中南已經辦過超過一百場的課程、進行過五六十場研習活動，<strong>若公司行號、政府機關或教育單位有教育訓練或教育研習的需求，都可以委請我們進行授課</strong>，相關合作方式，可直接來信 <a href=\"mailto:service@webduino.io\">service@webduino.io</a> 洽詢相關合作方式。。</p>\n</blockquote>\n</li>\n<li><p>###2. 如果使用上有問題要怎麼辦？</p>\n<blockquote>\n<ul>\n<li>(1) 從 Webduino 粉絲團發訊息詢問 ( <a href=\"https://www.facebook.com/webduino/\">前往粉絲團</a> )。</li>\n<li>(2) 加入 Webduino 技術討論社團進行討論 ( <a href=\"https://www.facebook.com/groups/797598203642584\">前往技術討論社團</a> )。</li>\n<li>(3) 寫信給我們 ( <a href=\"mailto:service@webduino.io\">service@webduino.io</a> )。</li>\n<li>(4) 打電話給我們 ( 07-3388511 )。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>###3. Webduino 的程式碼是否有 Open Source？</p>\n<blockquote>\n<p>Webduino 有全面 Open Source 的規劃，目前分為三個階段執行，<strong>第一階段是 Open 網頁前端所有 Source Code 並放到 Github</strong>，第二階段將 Open 後端 Server 程式碼，第三階段才是 Arduino上韌體程式的 Open Source。目前是第一階段，第二階段與第三階段尚未開始，目前已經 Open Source 的檔案均放在 Github 裡 ( 網址：<a href=\"https://github.com/webduinoio\">https://github.com/webduinoio</a> )。</p>\n</blockquote>\n</li>\n<li><p>###4. 是否可以架設自己的伺服器？</p>\n<blockquote>\n<p>Webduino 的伺服器方案，目前僅提供大量購買、學校或企業使用，若您有架設後端伺服器的需求，請來信 <a href=\"mailto:service@webduino.io\">service@webduino.io</a> 洽詢相關合作方式。</p>\n</blockquote>\n</li>\n<li><p>###5. 範例裡頭沒有我想要的傳感器或元件怎麼辦？</p>\n<blockquote>\n<ul>\n<li>(1) 我們正在努力趕工相關電子零件與傳感器的程式元件，有最新的消息都會在粉絲團與網站上公告。</li>\n<li>(2) 您可以由我們的 Github 閱讀相關傳感器或元件的 Source Code，您也可以自行開發相關傳感器或元件的 WebComponent ( 網址：<a href=\"https://github.com/webduinoio\">https://github.com/webduinoio</a> )。</li>\n<li>(3) 到<a href=\"https://www.facebook.com/webduino/\">粉絲團</a>發訊息，或<a href=\"https://www.facebook.com/groups/797598203642584\">技術討論社團</a>討論，如果有很多人跟你有一樣的需求，我們可能就會立即排入工作項。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<!-- @@close-->"},"info-04-uno-setup":{"tag":"info","src":"info-04-uno-setup.html","title":"Webduino Fly 初始化設定","banner":"info-04-01.jpg","img":"info-04-01s.jpg","date":20151124,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Fly 初始化設定 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"使用 Webduino Fly ( NUO 雲端擴充板 )，可以讓你手邊的 Arduino UNO 變成 Webduino，具備完整的 Webduino 功能，然而使用 UNO 雲端擴充板之前，最重要的就是進行初始化設定，初始化設定的目的在於讓Webduino UNO 雲端擴充板可以自動上網，就如同我們買了一支手機回家，要設定手機的 wifi，才能夠讓手機連結家裡的 Wifi 上網，Webduino 開發板也是如此。\">\n\n<meta itemprop=\"description\" content=\"使用 Webduino Fly ( NUO 雲端擴充板 )，可以讓你手邊的 Arduino UNO 變成 Webduino，具備完整的 Webduino 功能，然而使用 UNO 雲端擴充板之前，最重要的就是進行初始化設定，初始化設定的目的在於讓Webduino UNO 雲端擴充板可以自動上網，就如同我們買了一支手機回家，要設定手機的 wifi，才能夠讓手機連結家裡的 Wifi 上網，Webduino 開發板也是如此。\">\n\n<meta property=\"og:description\" content=\"使用 Webduino Fly ( NUO 雲端擴充板 )，可以讓你手邊的 Arduino UNO 變成 Webduino，具備完整的 Webduino 功能，然而使用 UNO 雲端擴充板之前，最重要的就是進行初始化設定，初始化設定的目的在於讓Webduino UNO 雲端擴充板可以自動上網，就如同我們買了一支手機回家，要設定手機的 wifi，才能夠讓手機連結家裡的 Wifi 上網，Webduino 開發板也是如此。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/board/fly-setup.html\">\n\n<meta property=\"og:title\" content=\"Webduino Fly 初始化設定\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-04-uno-setup.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-04-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-04-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-fly-\">Webduino Fly 初始化設定</h1>\n<p>使用 Webduino Fly ( UNO 雲端擴充板 )，可以讓你手邊的 Arduino UNO 變成 Webduino，具備完整的 Webduino 功能，然而使用 UNO 雲端擴充板之前，最重要的就是進行初始化設定，初始化設定的目的在於讓Webduino UNO 雲端擴充板可以自動上網，就如同我們買了一支手機回家，要設定手機的 wifi，才能夠讓手機連結家裡的 Wifi 上網，Webduino 開發板也是如此。</p>\n<h2 id=\"-\">初始化步驟說明</h2>\n<ul>\n<li><h3 id=\"1-webduino-\">1. 組合 Webduino 開發板</h3>\n<p>  將「Webduino Fly」與「Arduino UNO」組合，就成為「Webduino UNO 開發板」。</p>\n<p>  <img src=\"../img/tutorials/info-04-02.jpg\" alt=\"Webduino Fly 初始化設定\"></p>\n<p>  <img src=\"../img/tutorials/info-04-03.jpg\" alt=\"Webduino Fly 初始化設定\"></p>\n</li>\n<li><h3 id=\"2-\">2. 開始進行初始化</h3>\n<p>  在 Webduino Fly 上面會有一顆可以左右扳動的小開關，將開關扳動至 STA 模式，就可以開始進行初始化設定。</p>\n<p>  <img src=\"../img/tutorials/info-04-04.jpg\" alt=\"Webduino Fly 初始化設定\"></p>\n</li>\n<li><h3 id=\"3-wifi-webduino-\">3. 使用 wifi 搜尋 Webduino 開發板</h3>\n<p>  使用電腦或行動裝置，打開 Wi-Fi 搜尋對應的 Webduino 開發板 SSID 名稱，點選之後輸入密碼，即可讓電腦或行動裝置與 Webduino 開發板連線，<strong>開發板的 SSID 與密碼會寫在「裝置說明卡」裡頭，通常為「wa」開頭</strong>。( 範例名稱為 wa101 )</p>\n<p>  <img src=\"../img/tutorials/info-04-05.jpg\" alt=\"Webduino Fly 初始化設定\"></p>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"4-webduino-\">4. 連線 Webduino 開發板進行設定</h3>\n<p>  打開 Chrome 或 Safari 瀏覽器，於網址列輸入「<b><a href=\"http://192.168.4.1\">http://192.168.4.1</a></b>」，即可打開 Webduino 開發板的設定頁面，在設定頁面輸入家裡、公司場所或行動裝置分享的網路基地台 SSID 與 PASSWORD。( 此處的 SSID 為「網路基地台」的 SSID，並非 Webduino 開發板，<strong>不要填成裝置說明卡上頭的 SSID 與 PASSWORD</strong>，且 SSID 與 PASSWORD 有限制 14 個字元，只能大小寫的英文字母與數字的組合，要特別注意！ )</p>\n<p>  <img src=\"../img/tutorials/info-04-06.jpg\" alt=\"Webduino Fly 初始化設定\"></p>\n</li>\n<li><h3 id=\"5-webduino-uno-\">5. 重啟 Webduino UNO 開發板</h3>\n<p>  輸入完 SSID 與 PASSWORD 之後，點選送出，若出現「OK」的字樣，表示 Webduino 開發板已經初始化成功，並且可以和家裡、公司場所或行動裝置分享的網路基地台連線 ( 若遲遲沒有出現「OK」字樣，表示初始化設定不成功，返回步驟 2 重新開始 )</p>\n<p>  <img src=\"../img/tutorials/info-04-07.jpg\" alt=\"Webduino - 重啟 Webduino 開發板\"></p>\n<p>  當出現 OK 之後，就可以<strong>移除 Webduino UNO 開發板的電源，再將開關扳至 AP 模式</strong>，重新接上電源進行重啟。</p>\n<p>  <img src=\"../img/tutorials/info-04-08.jpg\" alt=\"Webduino - 重啟 Webduino 開發板\"></p>\n</li>\n<li><h3 id=\"6-\">6. 確認連線是否成功</h3>\n<p>  Webduino 開發板重啟後，便可將電腦或行動裝置切回正常的網路連線，並連結 <a href=\"https://webduino.io/device.html\">https://webduino.io/device.html</a> ，輸入對應的 device 名稱確認是否連線成功，如果連線成功則會出現 OK 的顯示，<strong>連線成功後即可開始玩轉 Webduino</strong>。( 若在網頁上沒有對應 Webduino 開發板，則需重啟 Webduino 開發板或返回步驟 2 重新初始化設定 )</p>\n<p>  <img src=\"../img/tutorials/info-04-09.jpg\" alt=\"Webduino - 確認連線是否成功\"></p>\n<p>  此外還有一個更簡單的判斷方式，在板子上有一個紅色的小 LED 燈，正在連線的時候紅色 LED 會發亮，<strong>連線成功後就會熄滅</strong>，若 LED 燈持續閃爍，表示沒有連線成功，這時請重啟開發板，或返回步驟 2 重新初始化設定。</p>\n<p>  <img src=\"../img/tutorials/info-04-10.jpg\" alt=\"Webduino - 確認連線是否成功\"></p>\n</li>\n<li><h3 id=\"7-webduino-\">7. Webduino 開發板已經可以連線網路基地台</h3>\n<p>  進行到此步驟，表示 Webduino 開發板已經可以自行連上家裡、公司場所或行動裝置分享的網路基地台，並自動連結上雲端的伺服器，我們就可以開始透過 Wi-Fi 去控制 Webduino 開發板囉！ ( 立刻用第 <a href=\"tutorial-01-led.html\">第一個範例</a> 體驗看看吧 )</p>\n</li>\n<li><h3 id=\"8-\">8. 注意事項</h3>\n<p>  由於 Webduino 要走 Arduino Firmata 的通訊協定，Arduino 本身<strong>要燒錄具有 Firmata 通訊協定的韌體</strong>，建議可使用 Arduino 官方提供的範例燒錄，便可做基本的應用。( Arduino IDE &gt; 範例 &gt; Firmata &gt; StandardFirmata ) </p>\n<p>  <img src=\"../img/tutorials/info-05-08.jpg\" alt=\"Webduino Fly 初始化設定\"></p>\n</li>\n</ul>\n<h2 id=\"arduino-ide-1-6-7-\">Arduino IDE 1.6.7 編譯錯誤</h2>\n<p>最近發現某些使用者在使用 Arduino IDE 1.6.7 的版本會編譯錯誤，是因為升級後的 Arduino 並沒有提供向下相容，導致 Firmata 2.4.4 和 2.5.1 不相容而產生錯誤，解決的方法除了安裝回 1.6.6 或 1.6.5 的版本之外 ( 載點：<a href=\"https://www.arduino.cc/en/Main/OldSoftwareReleases#previous\">https://www.arduino.cc/en/Main/OldSoftwareReleases#previous</a> )，還可以使用以下的解決方式，<strong>把 Firmata 的版本轉回 2.4.4 或 2.4.3</strong>。</p>\n<p>第一步，打開 Library Manager ( 草稿碼 -&gt; include Library -&gt; Library Manager )</p>\n<p><img src=\"../img/tutorials/info-07-10.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>第二步，搜尋 firmata，看看你的版本是不是跑到 2.5.1 了。</p>\n<p><img src=\"../img/tutorials/info-07-12.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>第三步，選擇<strong> 2.4.4 或 2.4.3 </strong>的 firmata 版本，按下 install，把 Firmata 裝回 2.4.4 的版本，如此一來，應該又可以順利的進行燒錄的動作了！</p>\n<p><img src=\"../img/tutorials/info-07-13.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<!-- @@close-->"},"info-05-chrome-api-proxy":{"tag":"info","src":"info-05-chrome-api-proxy.html","title":"Chrome API Proxy 安裝設定","banner":"info-05-01.jpg","img":"info-05-01s.jpg","date":20151124,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Chrome API Proxy 安裝設定 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"透過由 Webduino 開發的 Chrome 的 API Proxy 程式，可以讓 Arduino UNO 在沒有 Wifi 的情況下，藉由序列埠或藍芽的方式，操控各種電子零件與傳感器，感受方便美好的 Webduino 開發體驗。\">\n\n<meta itemprop=\"description\" content=\"透過由 Webduino 開發的 Chrome 的 API Proxy 程式，可以讓 Arduino UNO 在沒有 Wifi 的情況下，藉由序列埠或藍芽的方式，操控各種電子零件與傳感器，感受方便美好的 Webduino 開發體驗。\">\n\n<meta property=\"og:description\" content=\"透過由 Webduino 開發的 Chrome 的 API Proxy 程式，可以讓 Arduino UNO 在沒有 Wifi 的情況下，藉由序列埠或藍芽的方式，操控各種電子零件與傳感器，感受方便美好的 Webduino 開發體驗。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/setting/chrome-api-proxy.html\">\n\n<meta property=\"og:title\" content=\"Chrome API Proxy 安裝設定\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-05-chrome-api-proxy.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-05-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-05-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"chrome-api-proxy-\">Chrome API Proxy 使用說明</h1>\n<p>透過由 Webduino 開發的 Chrome 的 API Proxy 程式，可以讓 Arduino UNO 在沒有 Wifi 的情況下，藉由序列埠或藍芽的方式，操控各種電子零件與傳感器，感受方便美好的 Webduino 開發體驗。</p>\n<p><br/></p>\n<h2 id=\"-\">安裝</h2>\n<p>將「Arduino UNO 雲端擴充板」與「Arduino UNO」組合，就成為「Webduino UNO 開發板」。</p>\n<p><br/></p>\n<p><img src=\"../img/tutorials/info-05-02.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<p>在左上角「搜尋店內商品」的欄位輸入搜尋：「api proxy」，就會出現一些應用程式，這裏需要安裝的是「API Proxy for Google Chrome」和「API Proxy Agent for Google Chrome」這兩個。</p>\n<p><br/></p>\n<p><img src=\"../img/tutorials/info-05-03.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<h2 id=\"-\">啟用應用程式</h2>\n<p>安裝好了之後，就可以從 Chrome 的擴充功能 ( chrome://extensions/ ) 看到相關程式資訊，確認狀態都是「啟用」。</p>\n<p><br/></p>\n<p><img src=\"../img/tutorials/info-05-04.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<p>接著回到 Chrome 應用程式，會發現多了一個名為「API Proxy for Google Chrome」的 app，點選執行這個 app，執行後就會打開一個應用程式的視窗。</p>\n<p><br/></p>\n<p><img src=\"../img/tutorials/info-05-05.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<h2 id=\"-\">如何使用</h2>\n<p>如果是使用序列埠，可以從 Serial port 的地方看到路徑 ( path )，Windows 作業系統通常是 COM 多少，Mac 作業系統則是 /dev 多少，如果是藍芽，則必須要「先讓電腦先和開發板配對」，配對後就可以在應用程式的視窗內看到藍芽的位址 ( address )。</p>\n<p><br/></p>\n<p><img src=\"../img/tutorials/info-05-06.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<p>如果是序列埠，在 Webduino Blockly ( <a href=\"https://blockly.webduino.io/\">https://blockly.webduino.io/</a> )編輯工具的開發板程式積木，選擇「序列埠」，將路徑貼在後方，如果是藍芽，程式積木選擇「藍芽」，將位址貼在後方。</p>\n<p><br/></p>\n<p><img src=\"../img/tutorials/info-05-07.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<p>每次執行時，就會重新和開發板配對並初始化開發板 ( 走序列埠，板子上面的 LED 燈會閃爍，停止閃爍就完成初始化，如果是走藍芽，當藍芽上的 LED 燈停止閃爍，就是配對完成 )，完成後就可以開始使用了。</p>\n<p><br/></p>\n<h2 id=\"-\">燒錄韌體</h2>\n<p>由於要使用 JavaScript 操控 Arduino 開發板，因此要走 Arduino Firmata 的通訊協定，Arduino 本身要燒錄具有 Firmata 通訊協定的韌體，建議可使用 Arduino 官方提供的範例燒錄，便可做基本的應用。( Arduino IDE &gt; 範例 &gt; Firmata &gt; StandardFirmata )</p>\n<p><br/></p>\n<p><img src=\"../img/tutorials/info-05-08.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p><br/></p>\n<h2 id=\"-\">簡易問題處理</h2>\n<ul>\n<li>如果無法操控，關閉 Chrome 瀏覽器與 API Proxy 應用程式，重新啟動 Chrome 和應用程式，再度執行</li>\n<li>檢查是否同時啟用 Arduino IDE，如果同時啟用則無法順利運作</li>\n</ul>\n<h2 id=\"arduino-ide-1-6-7-\">Arduino IDE 1.6.7 編譯錯誤</h2>\n<p>最近發現某些使用者在使用 Arduino IDE 1.6.7 的版本會編譯錯誤，是因為升級後的 Arduino 並沒有提供向下相容，導致 Firmata 2.4.4 和 2.5.1 不相容而產生錯誤，解決的方法除了安裝回 1.6.6 或 1.6.5 的版本之外 ( 載點：<a href=\"https://www.arduino.cc/en/Main/OldSoftwareReleases#previous\">https://www.arduino.cc/en/Main/OldSoftwareReleases#previous</a> )，還可以使用以下的解決方式，<strong>把 Firmata 的版本轉回 2.4.4 或 2.4.3</strong>。</p>\n<p>第一步，打開 Library Manager ( 草稿碼 -&gt; include Library -&gt; Library Manager )</p>\n<p><img src=\"../img/tutorials/info-07-10.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>第二步，搜尋 firmata，看看你的版本是不是跑到 2.5.1 了。</p>\n<p><img src=\"../img/tutorials/info-07-12.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>第三步，選擇<strong> 2.4.4 或 2.4.3 </strong>的 firmata 版本，按下 install，把 Firmata 裝回 2.4.4 的版本，如此一來，應該又可以順利的進行燒錄的動作了！</p>\n<p><img src=\"../img/tutorials/info-07-13.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<!-- @@close-->"},"info-07-arduino-ino":{"tag":"info","src":"info-07-arduino-ino.html","title":"Arduino 韌體下載與燒錄","banner":"info-07-01.jpg","img":"info-07-01s.jpg","date":20151210,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Arduino 韌體下載與燒錄 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"因為 Webduino 要使用 JavaScript 操控 Arduino 開發板，因此要走 Arduino Firmata 的通訊協定，所以必須「要燒錄具有 Firmata 通訊協定的韌體」，這篇文章將敘述基本的 Arduino 燒錄韌體教學，也會提供目前 Webduino 已經支援所有傳感器元件的韌體程式讓大家下載燒錄。\">\n\n<meta itemprop=\"description\" content=\"因為 Webduino 要使用 JavaScript 操控 Arduino 開發板，因此要走 Arduino Firmata 的通訊協定，所以必須「要燒錄具有 Firmata 通訊協定的韌體」，這篇文章將敘述基本的 Arduino 燒錄韌體教學，也會提供目前 Webduino 已經支援所有傳感器元件的韌體程式讓大家下載燒錄。\">\n\n<meta property=\"og:description\" content=\"因為 Webduino 要使用 JavaScript 操控 Arduino 開發板，因此要走 Arduino Firmata 的通訊協定，所以必須「要燒錄具有 Firmata 通訊協定的韌體」，這篇文章將敘述基本的 Arduino 燒錄韌體教學，也會提供目前 Webduino 已經支援所有傳感器元件的韌體程式讓大家下載燒錄。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/setting/arduino-ino.html\">\n\n<meta property=\"og:title\" content=\"Arduino 韌體下載與燒錄\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-07-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-07-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"arduino-\">Arduino 韌體下載與燒錄</h1>\n<p>因為 Webduino 要走 Arduino Firmata 的通訊協定，所以必須「<strong>要燒錄具有 Firmata 通訊協定的韌體</strong>」，這篇文章將敘述基本的 Arduino 燒錄韌體教學，也會提供目前 Webduino 已經支援所有傳感器元件的韌體程式讓大家下載燒錄。</p>\n<p>如果對於 Webduino FLY 雲端擴充板、序列埠或是藍芽有興趣的，可以參考這兩篇文章：</p>\n<p>(1) <a href=\"https://webduino.io/tutorials/info-04-uno-setup.html\">Webduino Fly 初始化設定</a><br>(2) <a href=\"https://webduino.io/tutorials/info-05-chrome-api-proxy.html\">Chrome API Proxy 使用說明</a></p>\n<h2 id=\"-\">燒錄注意事項</h2>\n<p>如果您燒錄時，UNO 上面有和 Webduino Fly 結合，<strong>請務必將 Webduino Fly 切換至 STA 模式</strong>，避免燒錄時出現無法燒錄的錯誤，如果您只有使用 Arduino UNO，直接透過 USB 現燒錄即可。</p>\n<p><img src=\"../img/tutorials/info-04-04.jpg\" alt=\"Webduino Fly 初始化設定\"></p>\n<h2 id=\"-\">下載韌體與程式庫</h2>\n<p>我們已經把要燒錄在 Arduino 裡的韌體程式碼以及要引入的程式庫，公開於 Github 上頭，你可以直接 clone ，或是 fork 我們的這個開源專案，對於不會使用 Github 的朋友，可以直接點選「Clone or download」右邊的「Download Zip」的按鈕，或直接由這個下面的網址下載。</p>\n<p>Github：<a href=\"https://github.com/webduinoio/wafirmata\">https://github.com/webduinoio/wafirmata</a><br>Download：<a href=\"https://github.com/webduinoio/wafirmata/archive/master.zip\">https://github.com/webduinoio/wafirmata/archive/master.zip</a></p>\n<p><img src=\"../img/tutorials/info-07-02-new.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>下載之後解壓縮檔案，就會看到待會會引入的程式庫和要燒錄的韌體檔。</p>\n<p><img src=\"../img/tutorials/info-07-03.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<h2 id=\"-include-library-\">引入程式庫 ( Include Library )</h2>\n<p>如果 Arduino 官方的程式庫沒有我們想要的元件，我們就必須要引入外部的程式庫，因為要燒錄 Arduino 韌體，所以要先安裝 Arduino 的 IDE ( 可以從 Arduino <a href=\"https://www.arduino.cc/\">官方網站</a>下載 )，打開 Arduino IDE，從上方選單選擇「草稿碼」，接著選擇「Include Library」，選擇「<strong>Add .ZIP library</strong>」。</p>\n<p><img src=\"../img/tutorials/info-07-04.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>選擇剛剛解壓縮檔案內，把 Library 資料夾裡頭的 zip 檔案一一引入。</p>\n<p><img src=\"../img/tutorials/info-07-05.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>這些程式庫壓縮檔案分別是：</p>\n<p>(1) DHT.zip：溫濕度傳感器<br>(2) Joypad.zip：搖桿<br>(3) MaxMatrix.zip：LED 點矩陣<br>(4) MFRC522.zip：RFID<br>(5) IRremote.zip：紅外線發射/接收\n(6) G3.zip：空氣懸浮粒子 pm2.5\n(7) wa_GY291.zip：三軸</p>\n<h2 id=\"-\">燒錄韌體</h2>\n<p>有了這些程式庫之後，我們就可以打開 .ino 的韌體檔案來燒錄，直接在 .ino 檔案上頭點兩下就可以打開，通常第一次打開的時候會詢問你「必須位於...的草稿碼資料夾中...」，直接選擇「好」或「確認」即可。</p>\n<p><img src=\"../img/tutorials/info-07-06.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>打開 .ino 檔之後，將你的 Arduino 用 USB 線和電腦連接，確認序列埠已經連接上 ( 如果沒有出現在序列埠裡，最大的可能性是沒有正確安裝 Arduino UNO 的驅動程式 )</p>\n<p><img src=\"../img/tutorials/info-07-07.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>確認之後，點選「上傳」，就會開始將程式燒錄進 Arduino 內。</p>\n<p><img src=\"../img/tutorials/info-07-08.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>等待下方訊息出現「上傳完畢」，就表示已經燒錄完成，恭喜你，你已經可以開始使用 Webduino 的所有開發模式囉！</p>\n<p><img src=\"../img/tutorials/info-07-09.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<h2 id=\"-\">韌體清單簡介</h2>\n<p>目前 Webduino 公開釋出的 Arduino 韌體裡面包含了下列傳感器與電子元件 ( 只要檔名有包含，就是具有這個傳感器或電子零件，舉例來說：buzzer_ultrasonic 就包含蜂鳴器和超音波傳感器 )，之後會再陸續增加，也歡迎大家 Fork 我們的開源專案，一起來將 Webduino 的技術發揚光大！</p>\n<p>(1) buzzer：蜂鳴器<br>(2) ultrasonic：超音波傳感器<br>(3) MaxMatrix：LED 點矩陣<br>(4) dht：溫濕度傳感器<br>(5) MFRC522：RFID<br>(6) Joypad：搖桿<br>(7) IR：紅外線發射/接收\n(8) GPS：GPS\n(9) GY291：三軸偵測\n(10) G3：空氣 PM2.5 偵測</p>\n<h2 id=\"arduino-ide-1-6-7-\">Arduino IDE 1.6.7 編譯錯誤</h2>\n<p>最近發現某些使用者在使用 Arduino IDE 1.6.7 的版本會編譯錯誤，是因為升級後的 Arduino 並沒有提供向下相容，導致 Firmata 2.4.4 和 2.5.1 不相容而產生錯誤，解決的方法除了安裝回 1.6.6 或 1.6.5 的版本之外 ( 載點：<a href=\"https://www.arduino.cc/en/Main/OldSoftwareReleases#previous\">https://www.arduino.cc/en/Main/OldSoftwareReleases#previous</a> )，還可以使用以下的解決方式，<strong>把 Firmata 的版本轉回 2.4.4 或 2.4.3</strong>。</p>\n<p>第一步，打開 Library Manager ( 草稿碼 -&gt; include Library -&gt; Library Manager )</p>\n<p><img src=\"../img/tutorials/info-07-10.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>第二步，搜尋 firmata，看看你的版本是不是跑到 2.5.1 了。</p>\n<p><img src=\"../img/tutorials/info-07-12.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<p>第三步，選擇<strong> 2.4.4 或 2.4.3 </strong>的 firmata 版本，按下 install，把 Firmata 裝回 2.4.4 的版本，如此一來，應該又可以順利的進行燒錄的動作了！</p>\n<p><img src=\"../img/tutorials/info-07-13.jpg\" alt=\"Webduino UNO 雲端擴充板初始化設定\"></p>\n<!-- @@close-->"},"info-08-blockly-tutorial":{"tag":"info","src":"info-08-blockly-tutorial.html","title":"Webduino Blockly 基礎教學","banner":"info-08-01.jpg","img":"info-08-01s.jpg","date":20151230,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Blockly 基礎教學 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino Blockly 線上編輯工具是 Webduino 所研發出來的圖像化編輯工具，採用 Google Blockly 設計而成，讓一些對於網頁程式語言比較陌生，或者希望快速實現效果的朋友，可以利用 Webduino Blockly 線上編輯工具極速的實現各式各樣的創意。\">\n\n<meta itemprop=\"description\" content=\"Webduino Blockly 線上編輯工具是 Webduino 所研發出來的圖像化編輯工具，採用 Google Blockly 設計而成，讓一些對於網頁程式語言比較陌生，或者希望快速實現效果的朋友，可以利用 Webduino Blockly 線上編輯工具極速的實現各式各樣的創意。\">\n\n<meta property=\"og:description\" content=\"Webduino Blockly 線上編輯工具是 Webduino 所研發出來的圖像化編輯工具，採用 Google Blockly 設計而成，讓一些對於網頁程式語言比較陌生，或者希望快速實現效果的朋友，可以利用 Webduino Blockly 線上編輯工具極速的實現各式各樣的創意。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/blockly/blockly-information.html\">\n\n<meta property=\"og:title\" content=\"Webduino Blockly 基礎教學\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-08-blockly-tutorial.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-08-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-08-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-blockly-\">Webduino Blockly 基礎教學</h1>\n<p>Webduino Blockly 線上編輯工具是 Webduino 所研發出來的圖像化編輯工具，採用 Google Blockly 設計而成，讓一些對於網頁程式語言比較陌生，或者希望快速實現效果的朋友，可以利用 Webduino Blockly 線上編輯工具極速的實現各式各樣的創意。</p>\n<p>以下將會介紹 Webduino Blockly 的基本操作，如果已經熟悉相關介面或開發模式，可以直接點選「<a href=\"https://blockly.webduino.io/index-tutorials.html\">Webduino Blockly 實作範例</a>」，練習六十個以上的精彩應用。</p>\n<h2 id=\"-\">工具介面說明</h2>\n<p>Webduino Blockly 的介面主要分成三個部分，第一個部分是最上方的選單列，裏頭有「程式積木」與「產生程式碼」兩個互相切換的頁籤，以及「程式碼編輯器」、「查看裝置狀態」、「網頁互動測試」、「清空」和「執行」這幾個按鈕，畫面最左側區域就是「程式積木」的選單，中間空白的區域則是編輯區域。</p>\n<p><img src=\"../img/tutorials/info-08-02.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<h2 id=\"webduino-\">Webduino 擁有的程式積木</h2>\n<p>Webduino Blockly 擁有各式各樣功能的程式積木，這些積木也都預先歸類在左側的選單裡，選單分成以下幾個主要區塊：</p>\n<p><strong>變量</strong>：就是程式碼裡常見的「變數」，可以命名變數與使用變數。<br><strong>流程</strong>：就是程式碼裡的「函式 function」，可以命名流程與呼叫流程。<br><strong>基本功能</strong>：包含基本的邏輯、迴圈、文字、數學式、列表 ( 陣列 ) 和顏色設定。<br><strong>進階功能</strong>：包含控制台、延遲、重複、文字邏輯、數值轉換、鍵盤和聲控。<br><strong>開發板</strong>：Webduino 的開發板以及私有雲的積木，可以偵測腳位與上線狀態。<br><strong>元件模組</strong>：電子零組件模組。<br><strong>傳感器</strong>：傳感器相關模組。<br><strong>玩具應用</strong>：可以控制飛天魚或車子的積木。<br><strong>資料庫</strong>：串接 Firebase 的積木。<br><strong>網頁互動</strong>：和右側「網頁互動測試」區域相關的控制積木。  </p>\n<p><img src=\"../img/tutorials/info-08-03.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<h2 id=\"-hello-world\">彈出個 Hello World</h2>\n<p>點選「基本功能」的「文字」，把「印出」的積木和「填入文字」的積木拉到畫面中組合，在「填入文字」的積木裡寫上 Hello World。</p>\n<p><img src=\"../img/tutorials/info-08-04.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<p>點選右上角紅色的「執行」按鈕，就會執行我們剛剛組合好的積木程式，瀏覽器就會彈出 Hello World 的對話視窗。</p>\n<p><img src=\"../img/tutorials/info-08-05.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<h2 id=\"-\">在網頁裡顯示文字或數字</h2>\n<p>只是會彈出視窗還不夠，接著我們要在網頁裡面顯示文字或數字 ( 這樣就可以用電子零件或傳感器和網頁互動了 )，因為要和網頁互動，所以我們要用到左下角「網頁互動」的積木，這裏我們使用「顯示文字」的「顯示」，文字或數字將會出現在右側的「網頁測試區」裡面。( 網頁測試區可以點選右上角的按鈕打開 )</p>\n<p><img src=\"../img/tutorials/info-08-06.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<p>完成後點選右上角紅色的「執行」按鈕，就會看到文字出現在網頁測試區裡面，同樣的方式不僅限於文字，數字也是可以的。</p>\n<p><img src=\"../img/tutorials/info-08-07.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<h2 id=\"-\">點選網頁按鈕後，彈出文字</h2>\n<p>當我們可以和網頁互動後，再來我們點選網頁上的按鈕，來彈出對話視窗，這裏會用到「網頁互動」的「按鈕行為」，表示當我們按下某顆按鈕，就會執行某件事情，而「網頁互動測試」裡面，同樣要選擇「按鈕行為」，這裏設定點選按鈕 1 會彈出 Hello World，點選按鈕 2 會彈出 Webduino，點選按鈕 3 則會彈出 Blockly。</p>\n<p><img src=\"../img/tutorials/info-08-08.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<p>完成後點選右上角紅色的「執行」按鈕，點擊網頁上面的按鈕，就會彈出對應的文字對話視窗了。</p>\n<p><img src=\"../img/tutorials/info-08-09.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<h2 id=\"-webduino-\">控制 Webduino 開發板</h2>\n<p>從以上幾個例子大概就能了解 Webduino Blockly 的運作原理，接著要來控制開發板，這裏我們把開發板的積木拉到畫面中，可以選擇開發板要使用「Wi-Fi」、「序列埠」還是「藍芽」進行控制，如果選擇「Wi-Fi」則要和 Webduino 的開發板搭配 ( 馬克 1 號或 Webduino Fly )，如果「序列埠」和「藍芽」則必須再安裝 Chrome Proxy API ( 參考「<a href=\"https://webduino.io/tutorials/info-05-chrome-api-proxy.html\">Chrome API Proxy 使用說明</a>」和「<a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">Arduino 韌體下載與燒錄</a>」 )</p>\n<p><img src=\"../img/tutorials/info-08-10.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<p>選擇「Wi-fi」就要填入開發板的名字 ( 出廠時每塊開發板都會有個獨一無二的 device 名字 )，同時我們也可以從右上方的「裝置狀態」( 閃電圖案 )，觀看現在開發板有沒有上線，有上線就會是綠燈，沒有上線就會是紅燈，一定要有上線才能用 Wi-Fi 進行控制。</p>\n<p><img src=\"../img/tutorials/info-08-11.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<p>再來我們就可以把要控制的電子元件或傳感器，放到開發板的缺口內，就類似我們把實體的電子零件或傳感器接到實體的開發板上頭，接上去的腳位都可以從電子零件或傳感器的積木選擇，接著就可以開始控制這些元件了。( 詳細教學請見官網的<a href=\"https://webduino.io/tutorials.html\">教學文章</a> )</p>\n<p><img src=\"../img/tutorials/info-08-12.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<h2 id=\"-\">產生程式碼</h2>\n<p>點選 JavaScript 的頁籤，就會自動幫我們將程式積木轉換為標準的 JavaScript。( 如果你遇到專出來一片空白，很大的可能性是你的程式積木排列錯誤，造成產生的程式碼是錯誤的 )</p>\n<p><img src=\"../img/tutorials/info-08-13.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<p>轉換為程式碼後，我們可以點選「複製」的按鈕，把程式碼全部複製起來，貼到自己常用的網頁編輯器去進行編輯。</p>\n<p><img src=\"../img/tutorials/info-08-14.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<h2 id=\"-\">打開程式編輯器</h2>\n<p>如果自己沒有網頁編輯器，也可以點選右上方的「程式碼編輯器」，會開啟 Webduino Bin 編輯器。( 使用 JsBin opensource )</p>\n<p><img src=\"../img/tutorials/info-08-15.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<p>打開編輯器後，會發現剛剛我們積木所組合的程式碼，已經自動帶入編輯器的 JavaScript 區域，這時就可以完全使用 JavaScript 來編輯囉！</p>\n<p><img src=\"../img/tutorials/info-08-16.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<p>如果是像上面有網頁畫面的程式，網頁的畫面元素與樣式也都會一併帶入程式編輯器內，相當的方便。</p>\n<p><img src=\"../img/tutorials/info-08-17.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<h2 id=\"-\">儲存檔案</h2>\n<p>當我們編輯完之後，可以點選 Webduino Blockly 右上方的「連結」圖示，會產生一組連結網址，這組連結網址代表的是當前畫面，只要把這組網址記到瀏覽器的「我的最愛」或「書籤」內，下次再打開就會出現一模一樣的畫面了。</p>\n<p><img src=\"../img/tutorials/info-08-18.jpg\" alt=\"Webduino Blockly 線上編輯工具教學\"></p>\n<h2 id=\"-webduino-blockly-\">開始玩轉 Webduino Blockly 吧！</h2>\n<p>到這個步驟，應該大致上對 Webduino Blockly 的操作都有了基礎的認識，接下來就可以利用一系列的教學，熟悉 Webduino 的操控方式，正式踏入物聯網的領域囉！</p>\n<p>官方網站教學範例：<a href=\"https://webduino.io/tutorials.html\">https://webduino.io/tutorials.html</a><br>Blockly 實作範例：<a href=\"https://blockly.webduino.io/index-tutorials.html\">https://blockly.webduino.io/index-tutorials.html</a></p>\n<!-- @@close-->"},"info-09-multi-webduino-board":{"tag":"info","src":"info-09-multi-webduino-board.html","title":"連動多塊 Webduino 開發板","banner":"info-09-01.jpg","img":"info-09-01s.jpg","date":20160120,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>連動多塊 Webduino 開發板 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino 的開發板，以 Web 的思維來看的話，可看作是一段函式，當開發板上線之後就會進行 ready 的行為，而各個電子零件或是傳感器在程式碼內也都化作「變數」，所以我們就可以透過很簡單的判斷與控制，確認各個開發板是否上線，並進一步讓各個開發板與電子零組件彼此連動。\">\n\n<meta itemprop=\"description\" content=\"Webduino 的開發板，以 Web 的思維來看的話，可看作是一段函式，當開發板上線之後就會進行 ready 的行為，而各個電子零件或是傳感器在程式碼內也都化作「變數」，所以我們就可以透過很簡單的判斷與控制，確認各個開發板是否上線，並進一步讓各個開發板與電子零組件彼此連動。\">\n\n<meta property=\"og:description\" content=\"Webduino 的開發板，以 Web 的思維來看的話，可看作是一段函式，當開發板上線之後就會進行 ready 的行為，而各個電子零件或是傳感器在程式碼內也都化作「變數」，所以我們就可以透過很簡單的判斷與控制，確認各個開發板是否上線，並進一步讓各個開發板與電子零組件彼此連動。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/blockly/multi-board.html\">\n\n<meta property=\"og:title\" content=\"連動多塊 Webduino 開發板\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-09-multi-webduino-board.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-09-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-09-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-webduino-\">連動多塊 Webduino 開發板</h1>\n<p>Webduino 的開發板，以 Web 的思維來看的話，可看作是一段函式，當開發板上線之後就會進行 ready 的行為，而各個電子零件或是傳感器在程式碼內也都化作「變數」，所以我們就可以透過很簡單的判斷與控制，確認各個開發板是否上線，並進一步讓各個開發板與電子零組件彼此連動。</p>\n<p>以下將會使用 Webduino Blockly 來進行操作，操作網址：<a href=\"https://blockly.webduino.io/\">https://blockly.webduino.io/</a>。</p>\n<h2 id=\"-\">電子零件與傳感器教學參考：</h2>\n<p>這篇範例會使用到 LED 以及超音波傳感器，相關教學可以參考以下兩篇文章：</p>\n<p>1) <a href=\"https://webduino.io/tutorials/tutorial-01-led.html\">教學範例 1：控制單顆 LED 燈</a><br>2) <a href=\"https://webduino.io/tutorials/tutorial-05-ultrasonic.html\">教學範例 5：控制超音波傳感器</a></p>\n<h2 id=\"-\">步驟教學</h2>\n<p>首先我們把開發板的積木放到畫面當中，注意在開發板的積木後方有個可勾選的項目「<strong>串聯</strong>」，將有需要連動的開發板，就勾選串連。</p>\n<p><img src=\"../img/tutorials/info-09-02.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>在開發板內放入對應的元件，記得變數名稱要不同，因為是不同的元件，名稱也得不同。</p>\n<p><img src=\"../img/tutorials/info-09-03.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>接著放入「<strong>當開發板串連完成後執行</strong>」的積木，我們將要執行的事件放在缺口內，如此一來就可以確保開發板都上線完成後才會執行。</p>\n<p><img src=\"../img/tutorials/info-09-04.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>這裏我們使用「等待」的積木，就可以控制兩塊板子上面的 LED 燈閃爍，這個閃爍會遵照我們的設定進行。</p>\n<p><img src=\"../img/tutorials/info-09-05.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以看到兩塊板子的 LED 開始閃爍 ( 解答：<a href=\"https://blockly.webduino.io/?lang=zh-hant#-KZuPXpI9OQ8M_hlJPxM\">https://blockly.webduino.io/?lang=zh-hant#-KZuPXpI9OQ8M_hlJPxM</a> )。</p>\n<p><img src=\"../img/tutorials/info-09-06.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>不過光是 LED 地閃動其實看不太出來「連動」的效果，接著我們把其中一塊開發板的 LED 換成超音波傳感器，利用開發板 B 偵測到距離的變化，來控制開發板 A 上頭 LED 的明暗。</p>\n<p><img src=\"../img/tutorials/info-09-07.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>同樣的，把偵測距離的邏輯積木放在「串連完成後執行」的缺口內，當距離小於 10 公分，LED 就會亮起，當距離大於 10 公分，LED 就會熄滅。</p>\n<p><img src=\"../img/tutorials/info-09-08.jpg\" alt=\"連動多塊 Webduino 開發板\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以用手或紙板去遮蔽超音波傳感器，當遮蔽的距離小於 10 公分，LED 就會亮起，如此一來輕輕鬆鬆就完成了開發板連動的程式了。 ( 解答：<a href=\"https://blockly.webduino.io/#-K8T5iPk4z7mHPqM0-Wh\">https://blockly.webduino.io/#-K8T5iPk4z7mHPqM0-Wh</a> )。</p>\n<!-- @@close-->"},"info-10-pin":{"tag":"info","src":"info-10-pin.html","title":"Webduino 腳位偵測與設定","banner":"info-10-01.jpg","img":"info-10-01s.jpg","date":20160331,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino 腳位偵測與設定 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"「腳位偵測與設定」，是一塊開發板必須要有的功能，同樣的在 Webduino 也有提供這些設定方法，在 Webduino 開發板裡，如果使用「腳位」的積木，所有的數位腳 ( 2 ~ 13 ) 預設都是「數位輸出」，而所有的類比腳 ( A0 ~ A5 ) 預設都是「類比輸入」。\">\n\n<meta itemprop=\"description\" content=\"「腳位偵測與設定」，是一塊開發板必須要有的功能，同樣的在 Webduino 也有提供這些設定方法，在 Webduino 開發板裡，如果使用「腳位」的積木，所有的數位腳 ( 2 ~ 13 ) 預設都是「數位輸出」，而所有的類比腳 ( A0 ~ A5 ) 預設都是「類比輸入」。\">\n\n<meta property=\"og:description\" content=\"「腳位偵測與設定」，是一塊開發板必須要有的功能，同樣的在 Webduino 也有提供這些設定方法，在 Webduino 開發板裡，如果使用「腳位」的積木，所有的數位腳 ( 2 ~ 13 ) 預設都是「數位輸出」，而所有的類比腳 ( A0 ~ A5 ) 預設都是「類比輸入」。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/blockly/board-pin.html\">\n\n<meta property=\"og:title\" content=\"Webduino 腳位偵測與設定\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-10-pin.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-10-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-10-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-\">Webduino 腳位偵測與設定</h1>\n<p>「腳位偵測與設定」，是一塊開發板必須要有的功能，同樣的在 Webduino 也有提供這些設定方法，在 Webduino 開發板裡，<strong>如果使用「腳位」的積木，所有的數位腳 ( 2 ~ 13 ) 預設都是「數位輸出」，而所有的類比腳 ( A0 ~ A5 ) 預設都是「類比輸入」</strong> ( 不過如果是已經元件化的積木，例如 LED、三色 LED...等，有些腳位就會是對應的 PWM 輸出 )，我們也可以透過一些設定，來將這些腳位的功能更換，但如果不支援 PWM 的腳位，就算改成 PWM 也是沒有作用的。( PWM 腳位的數字後方有「~」符號 )</p>\n<h2 id=\"-\">如何使用：</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io/\">https://blockly.webduino.io/</a> )，在左側的選單裡可以看到「I/O 腳位」的積木，在這邊我們可以指定變數為某個腳位，或是指定變數為某塊開發板上的腳位 ( 該塊開發板積木必須存在畫面中 )，也可以設定模式、輸出數值以及讀取數值。</p>\n<p><img src=\"../img/tutorials/info-10-02.jpg\" alt=\"\"></p>\n<p>一開始我們先用一個簡單的例子來測試，我們先把一顆 LED 燈接到開發板上，長腳接 11，短腳接 GND，然後積木我們設定 pin 為「腳位 11」( 一定要有「腳位」這塊積木，純粹接 11 只是宣告 pin = 11 而已 )，然後設定 pin 的輸出數值為 1，待開發板上線之後，點選右上方紅色執行按鈕，就會看到 LED 燈亮起來了。</p>\n<p><img src=\"../img/tutorials/info-10-03.jpg\" alt=\"\"></p>\n<p>如果要設定 PWM 腳位，我們就要先設定這個腳位是類比輸出 ( PWM )，如果沒有設定又使用了「腳位」的積木，不論我們數值如何調整，都還是只會有 0 和 1 的數位訊號，這裏我們可以設定 pin 的輸出數值為 0.01，待開發板上線之後，點選右上方紅色執行按鈕，就會看到 LED 燈亮起來了，但是亮度非常微弱。</p>\n<p><img src=\"../img/tutorials/info-10-04.jpg\" alt=\"\"></p>\n<p>至於類比輸入就是常見的光敏電阻、可變電阻...等可以使用，數位輸入可以接按鈕開關做測試，但基本上如果元件模組和傳感器已經有的積木，就可以直接使用，因為不少輸入的訊號需要透過韌體端進行演算和調整，出來的數值才會是我們要的。</p>\n<h2 id=\"-\">腳位設定應用</h2>\n<p>由於我們可以透過腳位的數位輸出，設定高電位 1 和低電位 0，所以我們就可以用低電位來表示 GND 或是用高電位 1 來表示 5V 的輸出，舉例來說，剛剛我們把 LED 接在 11 和 GND，讓 11 的數位輸出數值為 1，所以 LED 就會亮起來，接著我們可以把 LED 長腳接 11，短腳接 12，然後把 12 的數位輸出設為 0，11 的數位輸出一樣設為 1，待開發板上線之後，點選右上方紅色執行按鈕，就會看到 LED 燈還是亮起來了。</p>\n<p><img src=\"../img/tutorials/info-10-05.jpg\" alt=\"\"></p>\n<p>如果我們要偵測每個開發板的腳位，就可以用到讀取腳位數值的積木，這裏我們「先使用 LED 的積木」，把 LED 接在 11 號腳，然後使用「腳位」的積木設定 11 ( 兩者不同，LED 的積木是封裝後的積木，腳位純粹就是腳位的控制 )，然後讓 LED 進行閃爍，每次閃爍的時候都會顯示腳位數值，待開發板上線之後，點選右上方紅色執行按鈕，就會看到 LED 開始閃爍，然後數值也會在 0 和 1 之間跳動。</p>\n<p><img src=\"../img/tutorials/info-10-06.jpg\" alt=\"\"></p>\n<p>當我們了解腳位如何輸出或輸入之後，就可以繼續來完成更多有趣的應用了。</p>\n<!-- @@close-->"},"info-11-feature":{"tag":"info","src":"info-11-feature.html","title":"Webduino Blockly 的十一個操作密技","banner":"info-11-01.jpg","img":"info-11-01s.jpg","date":20160427,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Blockly 的十一個操作密技 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"自從 Webduino Blockly 推出以來，受到許多使用者的喜愛，不少熱情的使用者提供了相當實用的改善建議，這篇集合了十個 Webduino Blockly 密技，幫助大家在操作上可以更加得心應手！\">\n\n<meta itemprop=\"description\" content=\"自從 Webduino Blockly 推出以來，受到許多使用者的喜愛，不少熱情的使用者提供了相當實用的改善建議，這篇集合了十個 Webduino Blockly 密技，幫助大家在操作上可以更加得心應手！\">\n\n<meta property=\"og:description\" content=\"自從 Webduino Blockly 推出以來，受到許多使用者的喜愛，不少熱情的使用者提供了相當實用的改善建議，這篇集合了十個 Webduino Blockly 密技，幫助大家在操作上可以更加得心應手！\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/blockly/blockly-tutorial-01.html\">\n\n<meta property=\"og:title\" content=\"Webduino Blockly 的十一個操作密技\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-11-feature.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-11-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-11-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-blockly-\">Webduino Blockly 的十一個操作密技</h1>\n<p>自從 Webduino Blockly 推出以來，受到許多使用者的喜愛，加上不少的熱情使用者，提供了我們很多寶貴又實用的改善建議，因此，這篇集合了十一個 Webduino Blockly 密技，除了展示一些過去所沒有的功能，更提供了一些大家所不知道但又超好用的技巧，幫助大家在操作上可以更加得心應手！</p>\n<h2 id=\"1-\">1. 熱鍵 ( 還原、重試、剪下、複製、貼上 )</h2>\n<p>在過去我們都有遇過一些情形：「積木刪除了無法還原」「想要快速的複製與貼上積木」...等，現在我們除了可以<strong>按下滑鼠右鍵</strong>來選擇還原、重試與複製，也可以使用鍵盤的快速鍵：<strong>ctrl + z</strong>、<strong>ctrl + shift + z</strong>、<strong>ctrl + x</strong>、<strong>ctrl + c</strong> 與 <strong>ctrl + v</strong> ( Mac 作業系統改為 command )，快速實現這些常用的功能。</p>\n<p><img src=\"../img/tutorials/info-11-02.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/info-11-03.jpg\" alt=\"\"></p>\n<h2 id=\"2-\">2. 暫時停用</h2>\n<p>在開發的當下，編輯畫面中可能會充斥許多不同功能的積木，有時候為了測試，非得忍痛把一些積木刪除，但其實我們可以選擇另外一種做法：「停用」，在暫時不想作用的積木，按下滑鼠右鍵，就可以看到「<strong>停用積木</strong>」的選單，點選下去後積木就會變成半透明的停用狀態，如此一來在執行的時候就不會發生作用，開發當下也不用把積木刪除，要啟用的話也只要按右鍵，選擇「啟用積木」就可以。</p>\n<p><img src=\"../img/tutorials/info-11-04.jpg\" alt=\"\"></p>\n<h2 id=\"3-\">3. 存檔與分享</h2>\n<p>如果要將目前開發的檔案儲存，可以點選右上角的「鎖鏈」( 連結 ) 符號，點選後會為我們<strong>產生一組網址代碼</strong>，將這個網址儲存下來，下次再打開就會是當前的開發畫面，我們甚至也可以將這個網址連結分享給別人。</p>\n<p><img src=\"../img/tutorials/info-11-05.jpg\" alt=\"\"></p>\n<h2 id=\"4-\">4. 將積木下載為圖片</h2>\n<p>在編輯畫面按下滑鼠右鍵，可以看到「下載圖片」的選項，點選後就會將畫面裡的積木組成，<strong>下載為 png 圖片</strong>，方便用於各種印刷品或教學使用。</p>\n<p><img src=\"../img/tutorials/info-11-06.jpg\" alt=\"\"></p>\n<h2 id=\"5-\">5. 快速複製程式碼</h2>\n<p>Webduino Blockly 最大的特色，就是<strong>可以產生標準的 JavaScript</strong>，點選 JavaScript 頁籤，將滑鼠移到上方「複製」的圖示，點選後就會將下面產生的程式碼全部複製起來，就可以貼到自己任何一個網頁裡頭去使用。</p>\n<p><img src=\"../img/tutorials/info-11-07.jpg\" alt=\"\"></p>\n<h2 id=\"6-\">6. 網頁互動功能</h2>\n<p>點選 Webduino Blockly 右上方的「燒瓶」圖示，可以開啟「<strong>網頁互動測試</strong>」的內崁視窗，這個視窗裡面包含了幾組預設網頁，每一組預設的網頁操控功能，都對應到左側的「網頁互動」積木，裏頭甚至有一個設計完整「遙控器」，可以利用它來做出各種不同的應用。</p>\n<p><img src=\"../img/tutorials/info-11-08.jpg\" alt=\"\"></p>\n<h2 id=\"7-\">7. 快速查看裝置狀態</h2>\n<p>點選在右上角「閃電」的圖示，會出現一個輸入欄位，在裡頭填入裝置的 device 名稱，當閃電變成綠色，就表示裝置是上線的狀態，當閃電變成紅色，就表示裝置斷線了。</p>\n<p><img src=\"../img/tutorials/info-11-09.jpg\" alt=\"\"></p>\n<h2 id=\"8-\">8. 快速載入預設範本</h2>\n<p>在一開始接觸 Blockly 的時候，一定會有許多不知所措或搞不清楚的功能，如果想快速體驗，我們也可以透過「載入範例積木」的功能快速載入預設的範本，我們可以點選範本名稱載入「全新」積木 ( 會取代掉原本工作區的積木 )，或點選後方的「+」號來「添加」積木 ( 添加積木不會取代掉原本工作區 )。</p>\n<p><img src=\"../img/tutorials/info-11-16.jpg\" alt=\"\"></p>\n<h2 id=\"9-\">9. 網頁程式編輯器</h2>\n<p>當我們用積木完成一系列程式後，可以點選右上角程式編輯的圖案，就可以打開網頁程式編輯器，在程式編輯器裡可以進行完整的程式碼編輯，對於進階的使用者相當的便利。</p>\n<p><img src=\"../img/tutorials/info-11-10.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/info-11-11.jpg\" alt=\"\"></p>\n<h2 id=\"10-\">10. 完美支援行動裝置</h2>\n<p>打開網頁程式編輯器之後，可以透過左上角 share 的功能，選擇「output」，掃描 qrcode，就可以將自己設計的畫面與程式，在行動裝置上完整運行與操作。( 如果看不到 share，可按下 ctrl + s，就會出現 share 按鈕，如果最上方出現警告的紅色提示，關閉編輯器再度打開就可以 )</p>\n<p><img src=\"../img/tutorials/info-11-12.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/info-11-13.jpg\" alt=\"\"></p>\n<p>如果不想要這麼麻煩，Webduino Blockly 內建了一個 QRCode 的按鈕，只要點選這個按鈕就會產生一個 QRCode 讓大家掃描測試，掃描出來的結果則是「目前網頁測試區」的網頁。</p>\n<p><img src=\"../img/tutorials/info-11-15.jpg\" alt=\"\"></p>\n<h2 id=\"11-nodejs\">11.完美支援 NodeJS</h2>\n<p>在 Webduino Blockly 產生的程式碼，不僅可以跑在網頁前端或行動裝置上，更可以運行在 NodeJS 的環境，只要先引入對應的 Package，就可以讓 Webduino 在後端背景環境執行。</p>\n<p><img src=\"../img/tutorials/info-11-14.jpg\" alt=\"\"></p>\n<p>以上就是 Webduino blockly 的十個秘技，相信只要有了這些技巧與功能的輔助，人人都可以是物聯網的開發高手喔！</p>\n<!-- @@close-->"},"info-12-bluetooth":{"tag":"info","src":"info-12-bluetooth.html","title":"Webduino 使用藍芽操控","banner":"info-12-01.jpg","img":"info-12-01s.jpg","date":20160707,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino 使用藍芽操控 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"一直以來，「透過 Wi-Fi 操控」都是 Webduino 的獨門絕技，但其實 Webduino 也可以透過「藍芽」或「序列埠」的方式連線，並且一樣使用 Webduino Blockly 或 JavaScript 來操作，這篇文章將會介紹如何連接藍芽模組 ( HC05、HC06 )，以及相對應的設定、操控方式。\">\n\n<meta itemprop=\"description\" content=\"一直以來，「透過 Wi-Fi 操控」都是 Webduino 的獨門絕技，但其實 Webduino 也可以透過「藍芽」或「序列埠」的方式連線，並且一樣使用 Webduino Blockly 或 JavaScript 來操作，這篇文章將會介紹如何連接藍芽模組 ( HC05、HC06 )，以及相對應的設定、操控方式。\">\n\n<meta property=\"og:description\" content=\"一直以來，「透過 Wi-Fi 操控」都是 Webduino 的獨門絕技，但其實 Webduino 也可以透過「藍芽」或「序列埠」的方式連線，並且一樣使用 Webduino Blockly 或 JavaScript 來操作，這篇文章將會介紹如何連接藍芽模組 ( HC05、HC06 )，以及相對應的設定、操控方式。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/setting/bluetooth.html\">\n\n<meta property=\"og:title\" content=\"Webduino 使用藍芽操控\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/info-12-bluetooth.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/info-12-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/info-12-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-\">Webduino 使用藍芽操控</h1>\n<p>一直以來，「透過 Wi-Fi 操控」都是 Webduino 的獨門絕技，但其實 Webduino 也可以透過「藍芽」或「序列埠」的方式連線，並且一樣使用 Webduino Blockly 或 JavaScript 來操作，這篇文章將會介紹如何連接藍芽模組 ( HC05、HC06 )，以及相對應的設定、操控方式。</p>\n<p>如果學會了這個操作方法，就算手邊沒有 Wi-Fi，或是手邊只有 Arduino UNO，仍然可以快速體驗 Webduino 的方便與美好！</p>\n<h2 id=\"-\">步驟一、接線</h2>\n<p>如果今天我們要把馬克一號改成走藍芽，就把 esp8266 的晶片取下，這時會看到有個八格的插孔，我們就將藍芽模組接在這邊。</p>\n<p><img src=\"../img/tutorials/info-12-17.jpg\" alt=\"\"></p>\n<p>透過杜邦線，將 <strong>VCC 接在左上，GND 接右下，TXD 右上，RXD 左下</strong>，中間四個孔不用連接，藍芽模組的背面會標示哪個腳位代表什麼意思。</p>\n<p><img src=\"../img/tutorials/info-12-02.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/info-12-06.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/info-12-07.jpg\" alt=\"\"></p>\n<p>如果你只有 Arduino UNO，你就把藍芽模組的 <strong>VCC 接在 UNO 的 3.3V ( 不要接錯 )，GND 接 GND，RXD 接 TX ( 1 號腳 )，TXD 接 RX ( 0 號腳 )</strong>。</p>\n<p><img src=\"../img/tutorials/info-12-05.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/info-12-09.jpg\" alt=\"\"></p>\n<p>如果你有疊了 Webduino Fly 在 UNO 上面，<strong>Webduino Fly 要設定為 STA 模式</strong>。</p>\n<p><img src=\"../img/tutorials/info-12-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/info-12-12.jpg\" alt=\"\"></p>\n<h2 id=\"-\">步驟二、藍芽設定</h2>\n<p>接完藍芽模組之後，把開發板接上電源，然後<strong>要先讓電腦和藍芽模組配對</strong>，不論你是用馬克一號、Arduino UNO 或 Webduino Fly + UNO，接上電源，使用支援藍芽的電腦，打開藍芽選項，偵測裝置，基本上就會看到藍芽裝置名稱，這裏我的藍芽裝置名稱為 class3，我們就先跟這個藍芽配對。</p>\n<p>Windows 配對畫面：</p>\n<p><img src=\"../img/tutorials/info-12-18.jpg\" alt=\"\"></p>\n<p>Mac 配對畫面：</p>\n<p><img src=\"../img/tutorials/info-12-19.jpg\" alt=\"\"></p>\n<h2 id=\"-baud-rate\">步驟三、修改 baud rate</h2>\n<p>如果你是第一次使用藍芽模組，<strong>跟 Webduino 搭配的藍芽模組 baud rate ( 鮑率 ) 要設為 57600</strong> ( 因為 Arduino 內韌體為 57600 )，如果不清楚如何設置，可以參考這篇網路文章，有相當精闢的介紹：<a href=\"http://goo.gl/a8vl6H\">Arduino : HC-06 藍芽模組的設定</a>。</p>\n<h2 id=\"-chrome-proxy-api\">步驟四、使用 Chrome Proxy API</h2>\n<p>由於我們再來要透過跑在 Chrome 瀏覽器上的 Webduino Blockly 連結藍芽模組操控開發板，所以必須透過 Chrome Proxy API 來轉換程式指令，安裝過程可參考之前的教學文：<a href=\"https://webduino.io/tutorials/info-05-chrome-api-proxy.html\">Chrome API Proxy 使用說明</a>。</p>\n<p>安裝完成後在擴充功能就會看到兩個已經啟用的程式。</p>\n<p><img src=\"../img/tutorials/info-12-13.jpg\" alt=\"\"></p>\n<p>然後進入 Chrome APP，打開 API Proxy for Google Chrome。</p>\n<p><img src=\"../img/tutorials/info-12-14.jpg\" alt=\"\"></p>\n<p>就會看到相對應的藍芽位址，把這段位址複製下來，待會操控的時候就會用到 ( API Proxy for Google Chrome 不要關閉，因它是用來通訊轉換程式碼使用 )。</p>\n<p><img src=\"../img/tutorials/info-12-15.jpg\" alt=\"\"></p>\n<h2 id=\"-webduino-blockly-\">步驟五、打開 Webduino Blockly 測試</h2>\n<p>確認 API Proxy for Google Chrome 處於開啟狀態，將一顆 LED 燈長腳接 13，短腳接 GND ( 馬克一號可以接 10 與 GND )，打開 Webduino Blockly，放入開發板，<strong>下拉選單選擇「藍芽」</strong>，將剛剛複製的藍芽位址貼上，放入 LED 燈積木讓 LED 閃爍，點選執行，大約一兩秒藍芽配對後，就會看到 LED 開始閃爍了。</p>\n<p><img src=\"../img/tutorials/info-12-16.jpg\" alt=\"\"></p>\n<p>以上就是 Webduino 與藍芽模組配合操控的方法，如果手邊沒有 Wi-Fi，或是手邊只有 Arduino UNO，都可以用這個方式，快速體驗 Webduino 的方便與美好！</p>\n<!-- @@close-->"},"smart-01-information":{"tag":"smart","src":"smart-01-information.html","title":"認識 Webduino Smart","banner":"smart-01-information.jpg","img":"smart-01-information-s.jpg","date":20161001,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>認識 Webduino Smart :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino Smart 是 2016 年推出的物聯網開發板，有別於過去馬克 1 號和 Fly 需要搭配 Arduino 才能運作，Smart 可以自行獨立運作，同時也具備連上網際網路 (Internet) 和透過區域網路 ( WebSocket ) 操控的能力，相信更能有效地應用在物聯網的開發和各種創意上！\">\n\n<meta itemprop=\"description\" content=\"Webduino Smart 是 2016 年推出的物聯網開發板，有別於過去馬克 1 號和 Fly 需要搭配 Arduino 才能運作，Smart 可以自行獨立運作，同時也具備連上網際網路 (Internet) 和透過區域網路 ( WebSocket ) 操控的能力，相信更能有效地應用在物聯網的開發和各種創意上！\">\n\n<meta property=\"og:description\" content=\"Webduino Smart 是 2016 年推出的物聯網開發板，有別於過去馬克 1 號和 Fly 需要搭配 Arduino 才能運作，Smart 可以自行獨立運作，同時也具備連上網際網路 (Internet) 和透過區域網路 ( WebSocket ) 操控的能力，相信更能有效地應用在物聯網的開發和各種創意上！\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/board/smart-information.html\">\n\n<meta property=\"og:title\" content=\"認識 Webduino Smart\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-01-information.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-01-information-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-01-information-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-webduino-smart\">認識 Webduino Smart</h1>\n<p>Webduino Smart 是 2016 年推出的物聯網開發板，有別於過去馬克 1 號和 Fly 需要搭配 Arduino 才能運作，Smart 可以自行獨立運作，同時也具備連上網際網路 ( Internet ) 和透過區域網路 ( WebSocket ) 操控的能力，相信更能有效地應用在物聯網的開發和各種創意上！</p>\n<p><br/></p>\n<h2 id=\"-\">預設元件和腳位介紹</h2>\n<p>Webduino Smart 是一塊長 3 公分寬 2.5 公分的開發板，重量約 85 公克，腳位有數位腳 0、2、4、5、14、16，PWM 腳位 12、13、15，類比腳 AD ( A0 )，其他腳位 TX、RX、3.3V、VCC、RST 和 GND 各 1 個。</p>\n<p>開發板內建一個光敏電阻、一個三色燈和一個微型按鈕開關，其中 AD 腳位預設供給光敏電阻使用，三色 LED 燈的紅色使用 15 號腳、綠色使用 12 號腳、藍色使用 13 號腳 ( <strong>三色 LED 燈為「共陰」，在官網其他範例外接的三色 LED 為「共陽」</strong> )，而一個微型按鈕開關則使用了 4 號腳位，使用的時候要特別注意。</p>\n<p><img src=\"../img/tutorials/smart-01-05.jpg\" alt=\"\"></p>\n<h2 id=\"-\">外觀介紹</h2>\n<p>大小對照 ( 左邊是四號電池和三號電池 )：</p>\n<p><img src=\"../img/tutorials/smart-01-04.jpg\" alt=\"\"></p>\n<p>360 度照片：</p>\n<p><img src=\"../img/tutorials/smart-01-03.gif\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-smart-\">更換 Smart 腳位貼紙</h2>\n<p>若覺得原本貼在 Smart 開發板上的貼紙比較不好看，可更換包裝內的腳位貼紙，腳位貼紙分為<strong>「左邊外側 L in」、「左邊內側 L out」、「右邊內側 R in」和「右邊外側 R out」</strong>，左右邊的識別<strong>以 Smart 的 Webduino Logo 朝上做左右邊區分</strong>，使用者可自行用剪刀剪開後黏貼。</p>\n<p><img src=\"../img/tutorials/smart-01-09.jpg\" alt=\"\"></p>\n<p>若要更換貼紙，只需撕下原本的白色腳位貼紙，再將新的黑色貼紙貼上即可，<strong>數字與英文字對齊的邊緣朝上貼</strong>，可參考上方 360 度照片，千萬要注意左右邊、內外側不要貼錯了！</p>\n<p><img src=\"../img/tutorials/smart-01-10.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"webdino-\">Webdino 開發板差異對照表</h2>\n<style>\n.tutorials-content table.chart{\n  border-collapse:collapse;\n  border:5px solid #000;\n  font-size:16px;\n}\n.tutorials-content table.chart tr th{\n  padding:20px 10px;\n  margin:0;\n  max-width:200px;\n  border-width:0 1px 1px;\n  border-style:solid;\n  border-color:#666;\n  font-weight:bold;\n  background:#333;\n  color:#fff;\n}\n.tutorials-content table.chart tr td{\n  padding:15px 10px;\n  margin:0;\n  max-width:200px;\n  border-width:1px;\n  border-style:solid;\n  border-color:#ccc;\n  line-height:22px;\n  text-align:center;\n  background:#fff;\n  color:#000;\n}\n.tutorials-content table.chart tr td img{\n  width:100%;\n}\n@media (max-width: 400px) {\n\n  .tutorials-content table.chart tr th{\n    padding:4px 1px;\n    font-size:12px;\n  }\n  .tutorials-content table.chart tr td{\n    font-size:12px;\n    padding:4px 1px;\n  line-height:18px;\n  }\n}\n</style>\n\n<table class=\"chart\">\n    <tr>\n      <th></th>\n      <th>Smart</th>\n      <th>馬克 1</th>\n      <th>Fly</th>\n  </tr>\n    <tr>\n      <td>照片</td>\n      <td><img src=\"../img/tutorials/smart-01-07-smart.jpg\"></td>\n      <td><img src=\"../img/tutorials/smart-01-07-mark1.jpg\"></td>\n      <td><img src=\"../img/tutorials/smart-01-07-fly.jpg\"></td>\n  </tr>\n    <tr>\n      <td>體積</td>\n      <td>小</td>\n      <td>略小</td>\n      <td>中</td>\n  </tr>\n    <tr>\n      <td>尺寸</td>\n      <td>3cm x 2.5cm x 1cm</td>\n      <td>4.5cm x 4cm x 2cm</td>\n      <td>6.5cm x 5cm x 2cm</td>\n  </tr>\n    <tr>\n      <td>價格</td>\n      <td>預計小於 NT$ 300</td>\n      <td>NT$ 840</td>\n      <td>NT$ 840</td>\n  </tr>\n    <tr>\n      <td>獨立運行</td>\n      <td>O</td>\n      <td>O</td>\n      <td>需搭配<br/>\nArduino UNO</td>\n  </tr>\n    <tr>\n      <td>Webduino Blockly</td>\n      <td>O</td>\n      <td>O</td>\n      <td>O</td>\n  </tr>\n    <tr>\n      <td>雲端 ( 遠端 ) 更新</td>\n      <td>O</td>\n      <td>O</td>\n      <td>O</td>\n  </tr>\n    <tr>\n      <td>Internet</td>\n      <td>O</td>\n      <td>O</td>\n      <td>O</td>\n  </tr>\n    <tr>\n      <td>WebSocket</td>\n      <td>O</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n  </tr>\n    <tr>\n      <td>藍芽</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n      <td>O</td>\n      <td>O</td>\n  </tr>\n    <tr>\n      <td>序列埠</td>\n      <td>X</td>\n      <td>X</td>\n      <td>O</td>\n  </tr>\n    <tr>\n      <td>韌體 OpenSource</td>\n      <td>X</td>\n      <td>Arduino 端</td>\n      <td>Arduino 端</td>\n  </tr>\n    <tr>\n      <td>內建元件</td>\n      <td>三色 LED ( 共陰 )<br/>\n光敏電阻<br/>\n微型按鈕開關</td>\n      <td>蜂鳴器</td>\n      <td>X</td>\n  </tr>\n    <tr>\n      <td>LED<br/>\n三色 LED<br/>\n繼電器<br/>\n光敏電阻<br/>\n按鈕開關<br/>\n震動開關</td>\n      <td>O</td>\n      <td>O</td>\n      <td>O</td>\n  </tr>\n    <tr>\n      <td>溫濕度<br/>\nLED 點矩陣<br/>\n伺服馬達<br/>\n人體紅外線偵測<br/>\n聲音偵測<br/>\n超音波距離偵測<br/>\n蜂鳴器</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n      <td>O</td>\n      <td>O</td>\n  </tr>\n    <tr>\n      <td>紅外線發射接收</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n  </tr>\n    <tr>\n      <td>RFID<br/>\n三軸加速度計</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n      <td>X</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n  </tr>\n    <tr>\n      <td>土壤偵測<br/>\n可變電阻</td>\n      <td>X</td>\n      <td>O</td>\n      <td>O</td>\n  </tr>\n    <tr>\n      <td>搖桿</td>\n      <td>X</td>\n      <td>X</td>\n      <td>遠端更新後支援<br/>( 需註冊雲端平台帳號 )</td>\n  </tr>\n  </table>\n\n\n\n<!-- @@close-->"},"smart-02-setup":{"tag":"smart","src":"smart-02-setup.html","title":"Webduino Smart 初始化設定","banner":"smart-02-setup.jpg","img":"smart-02-setup-s.jpg","date":20161001,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Webduino Smart 初始化設定 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"使用 Webduino Smart 之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino 開發板可以自動上網 ( Internet )，或是在區域網路透過 WebSocket 連線，有了初始化設定，我們也能夠自訂開發板的顯示名稱和密碼，更可以連上 internet 進行遠端更新。\">\n\n<meta itemprop=\"description\" content=\"使用 Webduino Smart 之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino 開發板可以自動上網 ( Internet )，或是在區域網路透過 WebSocket 連線，有了初始化設定，我們也能夠自訂開發板的顯示名稱和密碼，更可以連上 internet 進行遠端更新。\">\n\n<meta property=\"og:description\" content=\"使用 Webduino Smart 之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino 開發板可以自動上網 ( Internet )，或是在區域網路透過 WebSocket 連線，有了初始化設定，我們也能夠自訂開發板的顯示名稱和密碼，更可以連上 internet 進行遠端更新。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/board/smart-setup.html\">\n\n<meta property=\"og:title\" content=\"Webduino Smart 初始化設定\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-02-setup.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-02-setup-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-02-setup-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"webduino-smart-\">Webduino Smart 初始化設定</h1>\n<p>使用 Webduino Smart 之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino 開發板可以自動上網 ( Internet )，或是在區域網路透過 WebSocket 連線，有了初始化設定，我們也能夠自訂開發板的顯示名稱和密碼，更可以連上 internet 進行遠端更新。</p>\n<h2 id=\"webduino-smart-\">Webduino Smart 影片介紹</h2>\n<p>初始化設定步驟：</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/b-7B5fljwG4\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>第一次雲端更新 + 取得 Device ID：</p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/UtY4O5T7JgE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p><br/></p>\n<h2 id=\"-wi-fi-\">步驟一、接上電源，輸入 Wi-Fi 帳號密碼連線</h2>\n<p>和馬克一號與 Fly 同樣的第一步驟，就是設定 Wi-Fi 的帳號密碼，不過不同的是，設定完帳號密碼後，我們就可以讓 Smart 純粹透過 WebSocket 走區域網路連線，不需要連到外部的網路環境也能運作，如果想要連線到外部網路環境 ( Internet )，也因為設定了 Wi-Fi 帳密，就可以順利連接到網際網路了。</p>\n<p>第一步就是接上電源，這時候在具備 Wi-Fi 功能的電腦、筆電或行動裝置的 Wi-Fi 搜尋裡，就可以看到有個名為「Smart」的裝置，此時<strong>開發板會閃紅燈，接著紅燈恆亮</strong>，這是<strong>正常的狀況</strong>，因為開發板尚未連線至區域網路。( 不過如果你已經照著接下來的步驟設定完成，還是一樣紅燈恆亮應該就是設定錯誤或不正常了 )</p>\n<p><img src=\"../img/tutorials/smart-02-02.jpg\" alt=\"\"></p>\n<p>點選後輸入預設<strong>密碼 12345678</strong>，進行連線。 </p>\n<p><img src=\"../img/tutorials/smart-02-03.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-wi-fi-\">步驟二、設定 Wi-Fi 帳號密碼與顯示名稱</h2>\n<p>連線後打開瀏覽器 ( 建議使用 Chrome )，<strong>網址列輸入 192.168.4.1</strong>，就可以連線到 Smart 開發板的設定畫面，上面除了「一定要」設定的<strong>所在場所的 Wi-Fi SSID 與 PWD</strong>，接著也可以設定裝置在 Wi-Fi 搜尋中所顯示的名稱和密碼 ( 避免別人用 12345678 也可以連結到你的裝置 )，Device ID 的部分會在進行第一次韌體更新後配發 ( 下面的步驟會介紹 )，每塊 Smart 會配發唯一的一個 ID，因此您無法填寫與修改。</p>\n<p><img src=\"../img/tutorials/smart-02-04.jpg\" alt=\"\"></p>\n<p>設定完成後就可以按下 SUBMIT 儲存，出現 SAVE OK 的字樣表示儲存成功，此時 Smart 開發板<strong>會重啟並閃爍紅燈，當紅燈熄滅，且綠燈亮起一次之後</strong>，表示 Smart 開發板已經成功連結上家裡或環境內的 Wi-Fi 基地台。( 若紅燈持續閃爍或恆亮，請移除電源，重新操作步驟一與步驟二 )</p>\n<p><img src=\"../img/tutorials/smart-02-05.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-ip\">步驟三、獲得區域網路 IP</h2>\n<p>設定儲存完成後，移除開發板電源，重新接上開發板電源，這時開發板會開始閃紅燈，和區域網路連線後就會亮起綠燈，一秒後綠燈會消失 ( 若紅燈持續閃爍或亮紅燈，請返回步驟一重新設定 )，此時我們可以在電腦或行動裝置的 Wi-Fi 搜尋裡，看到「<strong>我們自訂的名稱_192.168.XXX.XXX</strong>」，以下方的例子來說就是「COOL_192.168.0.230」，記下後面這個 IP 數字，透過這個 IP 我們就可以用 WebSocket 來連線控制了。</p>\n<p><img src=\"../img/tutorials/smart-02-06.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-webduino-blockly-\">步驟四、打開 Webduino Blockly 進行測試</h2>\n<p>打開 Webudino Blockly ( <a href=\"http://blockly.webduino.io\">http://blockly.webduino.io</a>，如果是使用 WebSocket 連線，<strong>網址開頭必須為 http 不能是 https</strong>，要特別注意！)，放入開發板的積木，種類選擇 Smart，連線方式選擇 WebSocket，然後填入剛剛的 IP，接著放入三色 LED 燈的積木 ( 使用<strong>三色共陰</strong> )，紅色設定 15，綠色 12，藍色 13，並設定三色 LED 燈的顏色為紅色。( 欲使用 Device ID 控制請看步驟五與步驟六 )</p>\n<p><img src=\"../img/tutorials/smart-02-07.jpg\" alt=\"\"></p>\n<p>點選執行，就可以看到 Smart 開發板上頭的三色燈發出紅色光了。( 解答：<a href=\"http://blockly.webduino.io/#-KbJUDpxOP4DtqhWwR82\">http://blockly.webduino.io/#-KbJUDpxOP4DtqhWwR82</a> )</p>\n<p><img src=\"../img/tutorials/smart-02-09.gif\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-internet-\">步驟五、連線 Internet 更新韌體</h2>\n<p>Webduino Smart 有個很方便的特色功能，當我們透過步驟一到步驟三初始化設定成功後，就可以連上 Internet 進行遠端更新，方便大家獲取最新的韌體功能，更新的方式很簡單，在步驟三接上電源後，<strong>按住 Micro USB 旁的微型按鈕開關 ( 按住不放 )</strong>。</p>\n<p><img src=\"../img/tutorials/smart-02-10.jpg\" alt=\"\"></p>\n<p>按住<strong>直到綠燈亮起後，再放開按鈕開關，此時藍色燈會亮起 ，表示開始下載更新檔</strong>，下載完成後完成後藍色燈會熄滅，開始進行更新 ( 約 5~10 秒 )，更新完成後紅色燈會亮起，接著會閃紅燈進行連線，連線成功後綠色燈會亮起，當綠燈熄滅，表示我們可以重新開始控制開發板。\n( <strong>注意！進行更新的 5~10 秒請勿移除電源，否則可能會造成更新失敗而無法啟用開發板的狀況</strong> )</p>\n<p><img src=\"../img/tutorials/smart-02-11.jpg\" alt=\"\"></p>\n<p>更新完成後可再參考「步驟一」，透過 192.168.4.1 進入設定頁面，就可以看到版本號已經更新，同時也出現 Device ID 了。</p>\n<p><img src=\"../img/tutorials/smart-02-12.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-device-id-\">步驟六、使用 Device ID 控制</h2>\n<p>當我們已經透過步驟五的遠端更新取得 Device ID，如果不想用 WebSocket 操控，亦可用這組 Device ID 來控制，控制的方法就和 Webduino 馬克一號與 Webduino Fly 一樣，連線方式選擇 Wi-Fi，填入 Deivce ID 就可以操控。</p>\n<p><img src=\"../img/tutorials/smart-02-13.jpg\" alt=\"\"></p>\n<!-- @@close-->"},"smart-03-rgbled":{"tag":"smart","src":"smart-03-rgbled.html","title":"Smart 三色燈初體驗","banner":"smart-03-rgbled.jpg","img":"smart-03-rgbled-s.jpg","date":20161005,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Smart 三色燈初體驗 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino Smart 開發板有內建了一個微型三色 LED 燈 ( 共陰 )，預設的接腳為紅 15，綠 12，藍 13，這表示我們可以直接透過 Smart 發出各種顏色。\">\n\n<meta itemprop=\"description\" content=\"Webduino Smart 開發板有內建了一個微型三色 LED 燈 ( 共陰 )，預設的接腳為紅 15，綠 12，藍 13，這表示我們可以直接透過 Smart 發出各種顏色。\">\n\n<meta property=\"og:description\" content=\"Webduino Smart 開發板有內建了一個微型三色 LED 燈 ( 共陰 )，預設的接腳為紅 15，綠 12，藍 13，這表示我們可以直接透過 Smart 發出各種顏色。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/smart/smart-rgbled.html\">\n\n<meta property=\"og:title\" content=\"Smart 三色燈初體驗\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-03-rgbled.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-03-rgbled-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-03-rgbled-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"smart-\">Smart 三色燈初體驗</h1>\n<p>Webduino Smart 開發板有內建了一個微型三色 LED 燈 ( 共陰 )，預設的接腳為紅 15，綠 12，藍 13，這表示我們可以直接透過 Smart 發出各種顏色。</p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>首先我們放入開發板的積木，下拉選單選擇 WebSocket ( <strong>注意，使用 WebSocket 的工具網址必須是 http 開頭</strong> )，填入開發板的 ip 位址 ( 如果不清楚 ip 位址是什麼，請看 <a href=\"smart-02-setup.html\">Webduino Smart 初始化設定</a> ) </p>\n<p><img src=\"../img/tutorials/smart-03-02.jpg\" alt=\"\"></p>\n<p>放入三色共陰 LED 燈的積木，紅 15，綠 12，藍 13。 </p>\n<p><img src=\"../img/tutorials/smart-03-03.jpg\" alt=\"\"></p>\n<p>打開網頁互動的積木清單，使用按鈕 1 ~ 5 的積木，裏頭擺入不同的顏色。 </p>\n<p><img src=\"../img/tutorials/smart-03-04.jpg\" alt=\"\"></p>\n<p>點選右上方紅色按鈕執行，如此一來我們在網頁互動測試區裡點選不同的按鈕，就會出現不同的顏色。\n( 解答：<a href=\"http://blockly.webduino.io/#-KbJUkHomagX2_bcXNKX\">http://blockly.webduino.io/#-KbJUkHomagX2_bcXNKX</a> )</p>\n<p><img src=\"../img/tutorials/smart-03-05.gif\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-\">範例解析</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>程式碼的部分可以看到是走 WebSocket 的模式：<code>{board: &#39;Smart&#39;, url: &#39;192.168.0.230&#39;}</code>，其他的程式碼就只是純粹點選按鈕控制顏色的程式碼而已。</p>\n<pre><code>var rgbled;\n\nboardReady({board: &#39;Smart&#39;, url: &#39;192.168.0.230&#39;}, function (board) {\n  board.systemReset();\n  board.samplingInterval = 50;\n  rgbled = getRGBLedCathode(board, 15, 12, 13);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#ff0000&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#3333ff&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#009900&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#ffcc33&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn5&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#000000&#39;);\n  });\n});\n</code></pre><p>以上就是 Smart 三色燈初體驗。\n完整程式碼：<a href=\"http://bin.webduino.io/ruyed/1/edit?html,js,output\">http://bin.webduino.io/ruyed/1/edit?html,js,output</a>\n解答：<a href=\"http://blockly.webduino.io/#-KbJUkHomagX2_bcXNKX\">http://blockly.webduino.io/#-KbJUkHomagX2_bcXNKX</a></p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"smart-04-rgbled":{"tag":"smart","src":"smart-04-rgbled.html","title":"躍動的 Smart 三色燈","banner":"smart-04-rgbled.jpg","img":"smart-04-rgbled-s.jpg","date":20161005,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>躍動的 Smart 三色燈 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"在 Smart 三色燈初體驗 裡我們已經對操控 Smart 的三色燈有了基本的認識，這篇將透過「等待」與「迴圈」積木，實作出一個躍動的三色燈。\">\n\n<meta itemprop=\"description\" content=\"在 Smart 三色燈初體驗 裡我們已經對操控 Smart 的三色燈有了基本的認識，這篇將透過「等待」與「迴圈」積木，實作出一個躍動的三色燈。\">\n\n<meta property=\"og:description\" content=\"在 Smart 三色燈初體驗 裡我們已經對操控 Smart 的三色燈有了基本的認識，這篇將透過「等待」與「迴圈」積木，實作出一個躍動的三色燈。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/smart/basic/rgbled-colorful.html\">\n\n<meta property=\"og:title\" content=\"躍動的 Smart 三色燈\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-04-rgbled.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-04-rgbled-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-04-rgbled-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-smart-\">躍動的 Smart 三色燈</h1>\n<p>在 <a href=\"smart-03-rgbled.html\">Smart 三色燈初體驗</a> 裡我們已經對操控 Smart 的三色燈有了基本的認識，這篇將透過「等待」與「迴圈」積木，實作出一個躍動的三色燈。</p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>首先我們放入開發板的積木，下拉選單選擇 WebSocket ( <strong>注意，使用 WebSocket 的工具網址必須是 http 開頭</strong> )，填入開發板的 ip 位址，放入三色共陰 LED 燈的積木，紅 15，綠 12，藍 13。 </p>\n<p><img src=\"../img/tutorials/smart-04-02.jpg\" alt=\"\"></p>\n<p>放入「重複」的積木，設定為重複十次。 </p>\n<p><img src=\"../img/tutorials/smart-04-03.jpg\" alt=\"\"></p>\n<p>在迴圈裡放入「等待」的積木，設定等待時間為 0.5 秒，就可以每 0.5 秒切換顏色，因為是放在重複的積木內，所以當動作執行十次之後，就會把三色燈關起來 ( 設定為黑色 )。</p>\n<p><img src=\"../img/tutorials/smart-04-04.jpg\" alt=\"\"> </p>\n<p>點選右上方紅色按鈕執行，如此一來我們的三色LED燈就會不停地切換顏色，如躍動一般。\n( 解答：<a href=\"http://blockly.webduino.io/#-KbJVKgji5-EvGxORPDs\">http://blockly.webduino.io/#-KbJVKgji5-EvGxORPDs</a> )</p>\n<p><img src=\"../img/tutorials/smart-03-05.gif\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-\">範例解析</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>程式碼的部分可以看到是走 WebSocket 的模式：<code>{board: &#39;Smart&#39;, url: &#39;192.168.0.230&#39;}</code>，等待的部分我們使用了<code>awit</code>來實作。</p>\n<pre><code>(async function () {\n\nvar rgbled;\n\nboardReady({board: &#39;Smart&#39;, url: &#39;192.168.0.230&#39;}, async function (board) {\n  board.systemReset();\n  board.samplingInterval = 50;\n  rgbled = getRGBLedCathode(board, 15, 12, 13);\n  for (var count = 0; count &lt; 10; count++) {\n    rgbled.setColor(&#39;#ff0000&#39;);\n    await delay(0.5);\n    rgbled.setColor(&#39;#3366ff&#39;);\n    await delay(0.5);\n    rgbled.setColor(&#39;#009900&#39;);\n    await delay(0.5);\n    rgbled.setColor(&#39;#ffcc33&#39;);\n    await delay(0.5);\n  }\n  rgbled.setColor(&#39;#000000&#39;);\n});\n\n}());\n</code></pre><p>以上就是躍動的 Smart 三色燈 ( 顏色輪播切換 )。\n完整程式碼：<a href=\"http://bin.webduino.io/zudar/1/edit?html,js,output\">http://bin.webduino.io/zudar/1/edit?html,js,output</a>\n解答：<a href=\"http://blockly.webduino.io/#-KbJVKgji5-EvGxORPDs\">http://blockly.webduino.io/#-KbJVKgji5-EvGxORPDs</a></p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"smart-05-photocell":{"tag":"smart","src":"smart-05-photocell.html","title":"Smart 的光敏電阻","banner":"smart-05-photocell.jpg","img":"smart-05-photocell-s.jpg","date":20161006,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Smart 的光敏電阻 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino Smart 開發板的右上角內建了一顆光敏電阻 ( 腳位為 A0，也就是開發板的 AD 腳位 )，由這個光敏電阻我們就可以偵測環境的光線，做出許多簡單的光線偵測效果。\">\n\n<meta itemprop=\"description\" content=\"Webduino Smart 開發板的右上角內建了一顆光敏電阻 ( 腳位為 A0，也就是開發板的 AD 腳位 )，由這個光敏電阻我們就可以偵測環境的光線，做出許多簡單的光線偵測效果。\">\n\n<meta property=\"og:description\" content=\"Webduino Smart 開發板的右上角內建了一顆光敏電阻 ( 腳位為 A0，也就是開發板的 AD 腳位 )，由這個光敏電阻我們就可以偵測環境的光線，做出許多簡單的光線偵測效果。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/smart/smart-photocell.html\">\n\n<meta property=\"og:title\" content=\"Smart 的光敏電阻\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-05-photocell.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-05-photocell-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-05-photocell-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"smart-\">Smart 的光敏電阻</h1>\n<p>Webduino Smart 開發板的右上角內建了一顆光敏電阻 ( 腳位為 A0，也就是開發板的 AD 腳位 )，由這個光敏電阻我們就可以偵測環境的光線，做出許多簡單的光線偵測效果，不過也因為光敏電阻使用了 Smart 開發板的 AD 腳位，AD 腳位的插孔就不能給其他需要類比腳的感測器使用，要特別注意。</p>\n<div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>首先我們放入開發板的積木，下拉選單選擇 WebSocket ( <strong>注意，使用 WebSocket 的工具網址必須是 http 開頭</strong> )，填入開發板的 ip 位址，放入光敏電阻的積木，類比腳位選擇 A0。 </p>\n<p><img src=\"../img/tutorials/smart-05-02.jpg\" alt=\"\"></p>\n<p>放入光敏電阻開始偵測的積木，並讓偵測的數值顯示在網頁互動測試區域裡，點選右上方紅色按鈕執行，就會看到光的數值轉換為小數點呈現出來了。<br>( 解答：<a href=\"http://blockly.webduino.io/#-KbJWK4xVaxi0BEUct-U\">http://blockly.webduino.io/#-KbJWK4xVaxi0BEUct-U</a> )</p>\n<p><img src=\"../img/tutorials/smart-05-03.jpg\" alt=\"\"></p>\n<p>如果覺得直接類比訊號讀入的浮點數不是自己想要的數值，我們可以透過「四捨五入」和「尺度轉換」兩種積木，將光敏電阻的數值，轉換成 0 到 100 之間，小數點兩位的數值顯示。<br>( 解答：<a href=\"http://blockly.webduino.io/#-KbJWUprpSwvmWuBjfcU\">http://blockly.webduino.io/#-KbJWUprpSwvmWuBjfcU</a> )</p>\n<p><img src=\"../img/tutorials/smart-05-04.jpg\" alt=\"\"> </p>\n<p><img src=\"../img/tutorials/smart-05-05.jpg\" alt=\"\"></p>\n<p>還記得之前才提過的 <a href=\"smart-03-rgbled.html\">Smart 三色燈初體驗</a> 嗎？我們也可以透過簡單的邏輯判斷，讓數值 0~0.2 顯示紅色，0.2~0.4 顯示綠色，0.4~0.6 顯示藍色，大於 0.6 就，三色燈元件和光敏電阻的搭配，只需要一塊小小的 Smart 開發板就能搞定。</p>\n<p><img src=\"../img/tutorials/smart-05-06.jpg\" alt=\"\"></p>\n<p>點選右上方紅色按鈕執行，用手去遮住光敏電阻，或是用燈去照光敏電阻，就會看見 Smart 的三色燈出現不同的顏色。\n( 解答：<a href=\"http://blockly.webduino.io/#-KbJXCjhMYgmr6Pm7Gud\">http://blockly.webduino.io/#-KbJXCjhMYgmr6Pm7Gud</a> )</p>\n<p><img src=\"../img/tutorials/smart-05-07.gif\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-\">範例解析</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>程式碼的部分可以看到是走 WebSocket 的模式：<code>{board: &#39;Smart&#39;, url: &#39;192.168.0.230&#39;}</code>，我們純粹來看光敏電阻的用法，透過<code>on</code>的方法，光敏<code>.detectedVal</code>。</p>\n<pre><code>var photocell;\n\nboardReady({board: &#39;Smart&#39;, url: &#39;192.168.0.230&#39;}, function (board) {\n  board.systemReset();\n  board.samplingInterval = 50;\n  photocell = getPhotocell(board, 0);\n  photocell.on(function(val){\n    photocell.detectedVal = val;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = photocell.detectedVal;\n  });\n});\n</code></pre><p>以上就是 Smart 的光敏電阻操作介紹。\n完整程式碼：<a href=\"http://bin.webduino.io/kuwun/edit?html,js,output\">http://bin.webduino.io/kuwun/edit?html,js,output</a>\n解答：<a href=\"http://blockly.webduino.io/#-KbJXCjhMYgmr6Pm7Gud\">http://blockly.webduino.io/#-KbJXCjhMYgmr6Pm7Gud</a></p>\n<div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"smart-06-button":{"tag":"smart","src":"smart-06-button.html","title":"Smart 的按鈕開關","banner":"smart-06-button.jpg","img":"smart-06-button-s.jpg","date":20161120,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Smart 的按鈕開關 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino Smart 開發板的 USB 電源接孔附近有一個微型按鈕開關 ( 腳位為 4 )，我們可以透過這個按鈕開關，執行「按下」、「放開」或「長按」等動作，進一步操控網頁元素或電子零件。\">\n\n<meta itemprop=\"description\" content=\"Webduino Smart 開發板的 USB 電源接孔附近有一個微型按鈕開關 ( 腳位為 4 )，我們可以透過這個按鈕開關，執行「按下」、「放開」或「長按」等動作，進一步操控網頁元素或電子零件。\">\n\n<meta property=\"og:description\" content=\"Webduino Smart 開發板的 USB 電源接孔附近有一個微型按鈕開關 ( 腳位為 4 )，我們可以透過這個按鈕開關，執行「按下」、「放開」或「長按」等動作，進一步操控網頁元素或電子零件。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/smart/smart-button.html\">\n\n<meta property=\"og:title\" content=\"Smart 的按鈕開關\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-06-button.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-06-button-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-06-button-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"smart-\">Smart 的按鈕開關</h1>\n<p>Webduino Smart 開發板的 USB 電源接孔附近有一個微型按鈕開關 ( 腳位為 4 )，我們可以透過這個按鈕開關，執行「按下」、「放開」或「長按」等動作，進一步操控網頁元素或電子零件。</p>\n<p>雖然按鈕開關使用了 4 號腳位，但如果不使用按鈕開關的時候，我們仍然可以透過 4 號腳作為訊號的輸出 ( 不過要注意如果同時又使用了按鈕開關，就也會觸發開關的行為 )。</p>\n<p><img src=\"../img/tutorials/smart-06-02.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯器 ( <a href=\"http://blockly.webduino.io/?tags=smart\">http://blockly.webduino.io/?tags=smart</a> )，首先我們放入開發板的積木，下拉選單選擇 WebSocket ( <strong>注意，使用 WebSocket 的工具網址必須是 http 開頭</strong> )，填入開發板的 ip 位址，接著放入按鈕開關的積木，腳位預設為 4 ( 因為 Smart 的按鈕開關為「上拉按鈕」，所以要使用「上拉按鈕開關」 )。 </p>\n<p><img src=\"../img/tutorials/smart-06-03.jpg\" alt=\"\"></p>\n<p>分別放入按鈕開關「按下」、「放開」與「長按」的積木，並讓執行這些動作時候時，網頁互動區裡頭的「顯示文字」也會同時顯示對應的文字。   </p>\n<p><img src=\"../img/tutorials/smart-06-04.jpg\" alt=\"\"></p>\n<p>點選右上方紅色按鈕執行，用手指按壓按鈕開關，就會發現網頁的顯示文字也會跟著變化囉。( 記得要填入 WebSocket 的 ip )\n( 解答：<a href=\"http://blockly.webduino.io/#-KbJXzxrSLtDh9m6ITVb\">http://blockly.webduino.io/#-KbJXzxrSLtDh9m6ITVb</a> )</p>\n<p><br/></p>\n<h2 id=\"-\">範例解析</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>程式碼的部分可以看到是走 WebSocket 的模式：<code>{board: &#39;Smart&#39;, url: &#39;192.168.0.230&#39;}</code>，接著看到按鈕開關的程式碼，透過<code>.on</code>來操控，設定值如果是<code>pressed</code>表示按下，<code>released</code>表示放開，<code>longPress</code>則表示長按，後面接續的 function 就是要執行的動作。</p>\n<pre><code>var button;\n\nboardReady({board: &#39;Smart&#39;, url: &#39;192.168.0.230&#39;}, function (board) {\n  board.systemReset();\n  board.samplingInterval = 50;\n  button = getPullupButton(board, 4);\n  button.on(&quot;pressed&quot;, function(){\n    console.log(&quot;pressed&quot;);\n      document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = &#39;按下&#39;;\n\n  });\n  button.on(&quot;released&quot;, function(){\n    console.log(&quot;released&quot;);\n      document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = &#39;放開&#39;;\n\n  });\n  button.on(&quot;longPress&quot;, function(){\n    console.log(&quot;longPress&quot;);\n      document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = &#39;長按&#39;;\n\n  });\n});\n</code></pre><p>以上就是 Smart 的按鈕開關操作介紹。\n完整程式碼：<a href=\"http://bin.webduino.io/yeyez/edit?html,js,output\">http://bin.webduino.io/yeyez/edit?html,js,output</a>\n解答：<a href=\"http://blockly.webduino.io/#-KbJXzxrSLtDh9m6ITVb\">http://blockly.webduino.io/#-KbJXzxrSLtDh9m6ITVb</a></p>\n<div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"smart-07-button-youtube":{"tag":"smart","src":"smart-07-button-youtube.html","title":"Smart 按鈕開關控制 Youtube","banner":"smart-07-button-youtube.jpg","img":"smart-07-button-youtube-s.jpg","date":20161120,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>Smart 按鈕開關控制 Youtube :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"上一篇認識了 Webduino Smart 的按鈕開關，但如果只是按個按鈕顯示一下文字，功能實在是太陽春了，因此這一篇將介紹如何透過開關的行為，操控 Youtube 的影片播放，如此一來只要動動手指，就可以控制影片囉。\">\n\n<meta itemprop=\"description\" content=\"上一篇認識了 Webduino Smart 的按鈕開關，但如果只是按個按鈕顯示一下文字，功能實在是太陽春了，因此這一篇將介紹如何透過開關的行為，操控 Youtube 的影片播放，如此一來只要動動手指，就可以控制影片囉。\">\n\n<meta property=\"og:description\" content=\"上一篇認識了 Webduino Smart 的按鈕開關，但如果只是按個按鈕顯示一下文字，功能實在是太陽春了，因此這一篇將介紹如何透過開關的行為，操控 Youtube 的影片播放，如此一來只要動動手指，就可以控制影片囉。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/smart/basic/button-youtube.html\">\n\n<meta property=\"og:title\" content=\"Smart 按鈕開關控制 Youtube\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/smart-07-button-youtube.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/smart-07-button-youtube-s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/smart-07-button-youtube-s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"smart-youtube\">Smart 按鈕開關控制 Youtube</h1>\n<p>上一篇認識了 Webduino Smart 的按鈕開關，但如果只是按個按鈕顯示一下文字，功能實在是太陽春了，因此這一篇將介紹如何透過開關的行為，操控 Youtube 的影片播放，如此一來只要動動手指，就可以控制影片囉。</p>\n<div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯器 ( <a href=\"http://blockly.webduino.io/?tags=smart\">http://blockly.webduino.io/?tags=smart</a> )，首先我們放入開發板的積木，下拉選單選擇 WebSocket ( <strong>注意，使用 WebSocket 的工具網址必須是 http 開頭</strong> )，填入開發板的 ip 位址，接著放入按鈕開關的積木，腳位預設為 4 ( 因為 Smart 的按鈕開關為「上拉按鈕」，所以要使用「上拉按鈕開關」 )。  </p>\n<p><img src=\"../img/tutorials/smart-07-02.jpg\" alt=\"\"></p>\n<p>因為我們要使用 Youtube 的功能，所以我們要從左側積木功能選單選擇「載入 Youtube 模組」，拖拉進入編輯區域當中，這個功能會載入 Youtube 模組，記得「只需要載入一次」，如果要換影片則是使用「更換影片」的積木方塊。   </p>\n<p><img src=\"../img/tutorials/smart-07-03.jpg\" alt=\"\"></p>\n<p>不過只有放入載入模組的積木還不夠，還要填入 Youtube 影片的 id 或網址 才可以正確載入，獲取影片 id 的方法很簡單，只要打開 Youtube 影片，看到網址列，最後面 ?v= 接續的這串代碼就是影片 id。( 不包含 ?v= )</p>\n<p><img src=\"../img/tutorials/smart-07-04.jpg\" alt=\"\"> </p>\n<p>將網址或 id 填入積木欄位。</p>\n<p><img src=\"../img/tutorials/smart-07-05.jpg\" alt=\"\"></p>\n<p>放入按鈕的積木，這邊我們只需要兩個動作，一個是「按下」，另一個是「長按」。</p>\n<p><img src=\"../img/tutorials/smart-07-06.jpg\" alt=\"\"></p>\n<p>接著我們要透過「設定影片狀態」( 更換影片目前的狀態為播放、暫停、停止...等 ) 以及「當下影片狀態」( 獲取影片當下的狀態 )的積木，來做一些邏輯的判斷。</p>\n<p><img src=\"../img/tutorials/smart-07-07.jpg\" alt=\"\"></p>\n<p>邏輯的判斷很簡單，只需要在按下按鈕的當下，判斷影片的狀態是否為「正在播放」，只要是正在播放的狀態就把影片「暫停」，除此之外都是讓影片「播放」( 包含停止、播放結束、暫停、尚未開始 )</p>\n<p><img src=\"../img/tutorials/smart-07-08.jpg\" alt=\"\"></p>\n<p>網頁互動區選擇 Youtube，點選右上方紅色按鈕執行，就可以看到 Youtube 影片載入並開始播放，這時候我們就可以按壓按鈕，控制 Youtube 的影片播放了。( ip 記得換成自己的開發板 ip )\n( 解答：<a href=\"http://blockly.webduino.io/#-KbJYhqQUV_jUUCJRhMp\">http://blockly.webduino.io/#-KbJYhqQUV_jUUCJRhMp</a> )</p>\n<p><img src=\"../img/tutorials/smart-07-09.jpg\" alt=\"\"></p>\n<p><br/></p>\n<h2 id=\"-\">範例解析</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>首先看到 HTML 的部分，必須要有一個 id 為 youtube 的 div，作為 Youtube 模組使用。</p>\n<pre><code>&lt;div id=&quot;player&quot;&gt;&lt;/div&gt;\n</code></pre><p>JavaScript 的程式碼比較多一點，不過<code>boardReady</code>開頭的程式碼基本上都是一樣，所以我們直接從裡面的幾個分段開始看，這一段主要是 Youtube 模組的載入，使用 Youtube 官方的程式碼，包含了影片的高度、寬度、自動播放和控制項...等內容，而<code>events</code>則是一些影片的事件處理，例如載入的影片 id...等，<code>onPlayerStateChange</code>則是當 Youtube 狀態改變時要做些什麼行為的判斷。</p>\n<pre><code>var youtubePlay, youtubeStop, youtubePause;\nawait new Promise(function (resolve) {\n  var tag = document.createElement(&quot;script&quot;);\n  tag.src = &quot;https://www.youtube.com/iframe_api&quot;;\n  var scptTag = document.getElementsByTagName(&quot;script&quot;)[0];\n  scptTag.parentNode.insertBefore(tag, scptTag);\n  window.onYouTubeIframeAPIReady = function () {\n    youtube = new YT.Player(&quot;player&quot;, {\n      height: &quot;240&quot;,\n      width: &quot;96%&quot;,\n      playerVars: {\n        autoplay: 1,\n        controls: 1\n      },\n      events: {\n        onReady: function (evt) {\n          youtube.loadVideoById({\n            videoId:&quot;UKcTJeXjOmw&quot;\n          });\n          resolve();\n        },\n        onStateChange: onPlayerStateChange\n      }\n    });\n  };\n});\n\nfunction onPlayerStateChange(event) {\n  if(event.data == youtubeStop) {\n    youtubeStopCallback();\n  }else if(event.data == youtubePlay){\n    youtubePlayCallback();\n  }else if(event.data == youtubePause){\n    youtubePauseCallback();\n  }\n};\n</code></pre><p>接下來就是按鈕的方法，這裏可以看到當按下按鈕的時候，會判斷<code>youtube.getPlayerState()</code>是否為對應的數字，因此就可以決定影片要播放、暫停還是停止...等動作，而按鈕長按的事件，就直接將影片停下來，並將影片時間歸零。</p>\n<pre><code>button.on(&quot;pressed&quot;, async function(){\n  console.log(&quot;pressed&quot;);\n    if (youtube.getPlayerState() == 1) {\n    youtube.pauseVideo();\n  } else {\n    youtube.playVideo();\n  }\n\n});\nbutton.on(&quot;longPress&quot;, async function(){\n  console.log(&quot;longPress&quot;);\n    youtube.seekTo(0);\n  youtube.stopVideo();\n\n});\n</code></pre><p>以上就是使用 Smart 的微型按鈕開關，控制 Youtube 的操作介紹。\n完整程式碼：<a href=\"http://bin.webduino.io/fopag/1/edit?html,js,output\">http://bin.webduino.io/fopag/1/edit?html,js,output</a>\n解答：<a href=\"http://blockly.webduino.io/#-KbJYhqQUV_jUUCJRhMp\">http://blockly.webduino.io/#-KbJYhqQUV_jUUCJRhMp</a></p>\n<div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a>、<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"tutorial-01-led":{"tag":"tutorial","src":"tutorial-01-led.html","title":"控制單顆 LED 燈","banner":"tutorial-01-01.jpg","img":"tutorial-01-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 1：控制單顆 LED 燈 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"在基本的 Arduino 傳感器控制範例裡頭，控制單顆 LED 燈通常都是作為第一個範例使用，為什麼呢？因為這個範例最容易上手，也最容易藉由 LED 的明暗來測試程式是否有寫錯，因此進入了 Webduino 的世界之後，同樣也使用 LED 來作為第一個範例，而撰寫的程式也更為簡單，就像控制一張網頁圖片切換一樣的容易。\">\n\n<meta itemprop=\"description\" content=\"在基本的 Arduino 傳感器控制範例裡頭，控制單顆 LED 燈通常都是作為第一個範例使用，為什麼呢？因為這個範例最容易上手，也最容易藉由 LED 的明暗來測試程式是否有寫錯，因此進入了 Webduino 的世界之後，同樣也使用 LED 來作為第一個範例，而撰寫的程式也更為簡單，就像控制一張網頁圖片切換一樣的容易。\">\n\n<meta property=\"og:description\" content=\"在基本的 Arduino 傳感器控制範例裡頭，控制單顆 LED 燈通常都是作為第一個範例使用，為什麼呢？因為這個範例最容易上手，也最容易藉由 LED 的明暗來測試程式是否有寫錯，因此進入了 Webduino 的世界之後，同樣也使用 LED 來作為第一個範例，而撰寫的程式也更為簡單，就像控制一張網頁圖片切換一樣的容易。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/led.html\">\n\n<meta property=\"og:title\" content=\"教學範例 1：控制單顆 LED 燈\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-01-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-01-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-01-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-1-led-\">教學範例 1：控制單顆 LED 燈</h1>\n<p>在基本的 Arduino 傳感器控制範例裡頭，控制單顆 LED 燈通常都是作為第一個範例使用，為什麼呢？因為這個範例最容易上手，也最容易藉由 LED 的明暗來測試程式是否有寫錯，因此進入了 Webduino 的世界之後，同樣也使用 LED 來作為第一個範例，而撰寫的程式也更為簡單，就像控制一張網頁圖片切換一樣的容易。</p>\n<div class=\"buy-this\">\n    <span>LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">教學影片</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?&amp;page=tutorials/led-2\">https://blockly.webduino.io/?&amp;page=tutorials/led-2</a>  </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/8k6Lqu-aqVM\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>只有一顆 LED 燈的接線方式很簡單，首先，LED 燈有「長短腳」之分，長腳接「高電位」( 帶有數字的腳位 )，短腳接「低電位」( GND、接地 )，因此我們只要直接將 LED 插到腳位上即可，或使用麵包板與麵包線外接出來，在這裡<strong>長腳接 10，短腳接 GND</strong>。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-01-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-01-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-01-03.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，在第一個範例裡頭，我們將會點選網頁「燈泡圖案」來控制 LED 燈的切換，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「點擊燈泡」，就會出現讓我們可以點選燈泡的網頁。</p>\n<p><img src=\"../img/tutorials/tutorial-01-04.jpg\" alt=\"\"></p>\n<p>從編輯工具左側的積木選單中選擇「開發板」，將開發板放到畫面當中，填入對應的 Webduino 開發板名稱 ( Device 名稱，不要勾選串連 )，接著選擇「LED 燈」的積木，將 LED 燈的積木放到開發板積木的缺口內，腳位設定為 10 ( 因為剛剛把長腳接在 10 號腳 )。</p>\n<p><img src=\"../img/tutorials/tutorial-01-05.jpg\" alt=\"\"></p>\n<p>因為要和網頁互動，所以我們要從積木選單的最下方「網頁互動」，點選「點擊燈泡」，就會看到很多點擊網頁燈泡圖片互動的選項。</p>\n<p><img src=\"../img/tutorials/tutorial-01-06.jpg\" alt=\"\"></p>\n<p>把「點擊燈泡執行」的積木放到編輯畫面裡，代表點擊燈泡時要做些什麼事情。</p>\n<p><img src=\"../img/tutorials/tutorial-01-07.jpg\" alt=\"\"></p>\n<p>在執行的內容放入「邏輯」的積木，判斷點擊燈泡時，依據當時的狀態做出相對的反應，而我們也可以利用邏輯積木上面「藍色小齒輪」，添增邏輯選項。</p>\n<p><img src=\"../img/tutorials/tutorial-01-08.jpg\" alt=\"\"></p>\n<p>根據邏輯，判斷「當燈泡是 on」的話，點擊燈泡就會變成「off」，反之就是「on」。</p>\n<p><img src=\"../img/tutorials/tutorial-01-09.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以開始。</p>\n<p><img src=\"../img/tutorials/tutorial-01-10.jpg\" alt=\"\"></p>\n<p>點擊內嵌網頁裡的燈泡圖片，就可以輕鬆地控制 LED 燈的明暗，然而我們也可以點選「JavaScript 頁籤」，就可以看到完整的程式碼邏輯，同時也可以複製這些代碼，貼到自己的網頁原始碼當中，就可以在自己的網頁裡實現一模一樣的行為囉！<br>( 解答：<a href=\"https://blockly.webduino.io/#-K4pR8RaEF6IkiWdAYk7\">https://blockly.webduino.io/#-K4pR8RaEF6IkiWdAYk7</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/tetig/edit?html,css,js,output\">看完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>一開始先在 HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>接著看到 HTML 的 body 裡頭，放入一個 id 為 demo-area-02-light 的圖片區域，裡面含有兩張分別是亮起的燈泡與不亮的燈泡圖片，目的在於點選的時候，圖片也會從不亮的燈泡轉變為亮起的燈泡。</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>控制燈泡圖片亮暗的是使用 CSS 的方式，用圖片顯示的切換 <code>display:none;</code> 來達到相關效果，下面是 CSS 的程式碼。</p>\n<pre><code>#demo-area-02-light img{\n  height:200px;\n  display:none;\n}\n#demo-area-02-light.on #demo-area-02-on{\n  display:inline-block;\n}\n#demo-area-02-light.off #demo-area-02-off{\n  display:inline-block;\n}\n</code></pre><p>再來就是最重點的 javascript 部分，下面的範例程式開始先要確認開發板上線 ( 使用 <code>boardReady</code> ) 之後就可以開始進行動作，執行的方式也簡單，先設定一個名為 led 的變數，使用 <code>getLed</code> 設定腳位為 10，然後綁定圖片的點擊事件，再使用 LED 的 API 來操作。</p>\n<pre><code>var led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  led = getLed(board, 10);\n  document.getElementById(&quot;demo-area-02-light&quot;).addEventListener(&quot;click&quot;,function(){\n    if (document.getElementById(&quot;demo-area-02-light&quot;).className == &quot;on&quot;) {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n      led.off();\n    } else {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n      led.on();\n    }\n  });\n});\n</code></pre><p>因為程式碼由 Blockly 自動生成，可能會有一些重複或累贅的程式碼，我們可以將上面這段程式碼簡化成下面這樣，目的只是把重複的 <code>document.getElementById(&quot;demo-area-02-light&quot;)</code> 變成一個變數 light 而已，就會乾淨許多。</p>\n<pre><code>var led;\nvar light;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  led = getLed(board, 10);\n    light = document.getElementById(&quot;demo-area-02-light&quot;);\n  light.addEventListener(&quot;click&quot;,function(){\n    if (light.className == &quot;on&quot;) {\n      light.className = &quot;off&quot;;\n      led.off();\n    } else {\n      light.className = &quot;on&quot;;\n      led.on();\n    }\n  });\n});\n</code></pre><p>以上就是點選圖片控制 LED 燈的基本範例。<br>完整程式碼：<a href=\"http://bin.webduino.io/tetig/edit?html,css,js,output\">http://bin.webduino.io/tetig/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K4pR8RaEF6IkiWdAYk7\">https://blockly.webduino.io/#-K4pR8RaEF6IkiWdAYk7</a></p>\n<h2 id=\"led-\">LED 的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/led-1#-Jvaz_tuEFYtNaVBi0i2\">Webduino Blockly 課程 1-1：點亮 LED 燈</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/led-2#-Jvb-r0TiTHKsL-rMGw9\">Webduino Blockly 課程 1-2：點選圖片控制 LED 燈</a></p>\n<div class=\"buy-this\">\n    <span>LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"tutorial-02-2led":{"tag":"tutorial","src":"tutorial-02-2led.html","title":"兩顆 LED 交互閃爍","banner":"tutorial-02-01.jpg","img":"tutorial-02-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 2：兩顆 LED 交互閃爍 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"熟悉了第一個 webduino 的範例之後，接下來就要做點延伸的應用，在這個範例裡頭，將會利用點選燈泡圖片，操控兩顆 LED 燈，做出兩顆 LED 燈交互閃動的效果。\">\n\n<meta itemprop=\"description\" content=\"熟悉了第一個 webduino 的範例之後，接下來就要做點延伸的應用，在這個範例裡頭，將會利用點選燈泡圖片，操控兩顆 LED 燈，做出兩顆 LED 燈交互閃動的效果。\">\n\n<meta property=\"og:description\" content=\"熟悉了第一個 webduino 的範例之後，接下來就要做點延伸的應用，在這個範例裡頭，將會利用點選燈泡圖片，操控兩顆 LED 燈，做出兩顆 LED 燈交互閃動的效果。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/component/led-2.html\">\n\n\n<meta property=\"og:title\" content=\"教學範例 2：兩顆 LED 交互閃爍\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-02-2led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-02-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-02-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-2-led-\">教學範例 2：兩顆 LED 交互閃爍</h1>\n<p>熟悉了 <a href=\"tutorial-01-led.html\">第一個範例</a> 之後，接下來就要做點延伸的應用，在這個範例裡頭，將會利用點選燈泡圖片，操控兩顆 LED 燈，做出兩顆 LED 燈交互閃動的效果。</p>\n<div class=\"buy-this\">\n    <span>LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">教學影片</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?&amp;page=tutorials/led-4\">https://blockly.webduino.io/?&amp;page=tutorials/led-4</a>  </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/X3s_WoOVyxk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>因為我們這次有使用到兩顆 LED 燈，所以必須要使用麵包板來進行，將一顆 LED 燈長腳接在 11，另外一顆 LED 燈長腳接在 10，兩顆 LED 燈共用一個 GND ( 地線 )。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-02-02.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-02-02-fly.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-02-03.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<div class=\"buy-this\">\n    <span>LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例也會點選網頁「燈泡圖案」來控制，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「點擊燈泡」，就會出現讓我們可以點選燈泡的網頁。</p>\n<p><img src=\"../img/tutorials/tutorial-02-04.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<p>在編輯畫面放入開發板，填入對應的 Webduino 開發板名稱，在開發板內放入兩個 LED，分別設定 10 與 11 腳位，也分別設定名稱為 led1 和 led2，完成後接著擺上「點擊燈泡就執行」的積木。</p>\n<p><img src=\"../img/tutorials/tutorial-02-05.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<p>和 <a href=\"tutorial-01-led.html\">第一個範例</a> 的作法類似，點下燈泡圖片之後，就要進行邏輯的判斷，所以這裡我們就先把邏輯積木放進去，並且判斷「如果燈泡是 off」，就把燈泡 on，反之就把燈泡 off 起來。</p>\n<p><img src=\"../img/tutorials/tutorial-02-06.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<p>再來先看到打開燈泡時要做什麼事情，這裏將用到「進階功能」裡的「重複」積木，重複的積木除了可以指定重複次數，更可以設定一個變數來做「不斷重複」，同時可以停止這個變數的不斷重複。</p>\n<p><img src=\"../img/tutorials/tutorial-02-07.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<p>把不斷重複的積木放進畫面中，計時器的名稱就用預設的 timer，在第一個狀態內放入 led1 on 和 led2 off 的積木，第二個狀態內放入 led1 off 和 led2 on 的積木，時間都設定為 0.5 秒，如此一來當燈泡圖片亮起，兩顆 LED 燈就會交互閃爍。( 如果需要更多狀態，就可以點選藍色小齒輪新增，做法和邏輯的積木類似 )</p>\n<p><img src=\"../img/tutorials/tutorial-02-08.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<p>既然有開始就一定會有停止，所以當燈泡圖片熄滅時，就把計時器 timer 停止，同時把 led1 和 led2 的狀態都設為 off。</p>\n<p><img src=\"../img/tutorials/tutorial-02-09.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以開始。</p>\n<p><img src=\"../img/tutorials/tutorial-02-10.jpg\" alt=\"教學範例 2：兩顆 LED 交互閃爍\"></p>\n<p>點擊內嵌網頁裡的燈泡圖片，就可以讓兩顆 LED 交互閃爍或是停止，然而我們也可以點選「JavaScript 頁籤」，就可以看到完整的程式碼邏輯，同時也可以複製這些代碼，貼到自己的網頁原始碼當中，就可以在自己的網頁裡實現一模一樣的行為囉！\n( 解答：<a href=\"https://blockly.webduino.io/#-K4q6FT6L5mx8WZ5NuJW\">https://blockly.webduino.io/#-K4q6FT6L5mx8WZ5NuJW</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/harol/edit?html,css,js,output\">看完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>接著看到 HTML 的 body 裡頭，放入一個 id 為 demo-area-02-light 的圖片區域，裡面含有兩張分別是亮起的燈泡與不亮的燈泡圖片，目的在於點選的時候，圖片也會從不亮的燈泡轉變為亮起的燈泡。</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>控制燈泡圖片亮暗的是使用 CSS 的方式，用圖片顯示的切換 <code>display:none;</code> 來達到相關效果，下面是 CSS 的程式碼。</p>\n<pre><code>#demo-area-02-light img{\n  height:200px;\n  display:none;\n}\n#demo-area-02-light.on #demo-area-02-on{\n  display:inline-block;\n}\n#demo-area-02-light.off #demo-area-02-off{\n  display:inline-block;\n}\n</code></pre><p>重點看到 javascript 的部分，因為有兩顆 LED 燈，所以分別用 led1 和 led2 兩個變數來表示，然後計時器的變數為 timer，燈泡是 light，比較特別的是這裡使用了 JS6 的 <code>Promise</code>來作為計時器使用，這可以幫助我們確認當該狀態確定完成後，才會繼續執行，此外裏頭又用了 <code>setTimeout</code> 這個延遲執行的方法，做成一個不斷循環重複的指令，而停止的時候，只需要用 <code>clearTimeout</code> 就可以停下來了。</p>\n<pre><code>var led1;\nvar led2;\nvar timer;\nvar light;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  led1 = getLed(board, 10);\n  led2 = getLed(board, 11);\n  light = document.getElementById(&quot;demo-area-02-light&quot;);\n\n  light.addEventListener(&quot;click&quot;,function(){\n    if (light.className == &quot;off&quot;) {\n      light.className = &quot;on&quot;;\n      var repeat = function(){\n        var time;\n        var repeatDelay = function(time){\n          return new Promise(function(resolve){\n            timer = setTimeout(resolve,time);\n          });\n        };\n        var repeatPromise = function(){\n          repeatDelay(1).then(function(){\n              led1.on();\n        led2.off();\n            return repeatDelay(500);\n          }).then(function(){\n              led1.off();\n        led2.on();\n            return repeatDelay(500);\n          }).then(function(){\n              repeatPromise();\n          });\n        };\n        repeatPromise();\n      };\n      repeat();\n    } else {\n      light.className = &quot;off&quot;;\n      clearTimeout(timer);\n      led1.off();\n      led2.off();\n    }\n  });\n});\n</code></pre><p>以上就是點選圖片控制兩顆 LED 燈交互閃爍的範例。<br>完整程式碼：<a href=\"http://bin.webduino.io/harol/edit?html,css,js,output\">http://bin.webduino.io/harol/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K4q6FT6L5mx8WZ5NuJW\">https://blockly.webduino.io/#-K4q6FT6L5mx8WZ5NuJW</a></p>\n<h2 id=\"-led-\">兩顆 LED 的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/led-3#-JvMuD8cPViCJFD4VRSr\">Webduino Blockly 課程 1-3：控制兩顆 LED 燈</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/led-4#-JvMuhwaEGs7oMUz-bpm\">Webduino Blockly 課程 1-4：兩顆 LED 燈交互閃爍</a></p>\n<div class=\"buy-this\">\n    <span>LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-03-rgbled":{"tag":"tutorial","src":"tutorial-03-rgbled.html","title":"控制 三色 LED","banner":"tutorial-03-01.jpg","img":"tutorial-03-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 3：控制 三色 LED :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"三色 LED 是由紅色、綠色與藍色三種不同顏色的 LED 所組成，因此可以發出最少三種顏色的光，也由於三色 LED 內部含有三顆 LED 燈，所以它具有 VCC、R、B、G 四支針腳，我們也可以分別控制個個顏色的強弱，進一步達到混合顏色的效果。這個 webduino 的範例主要介紹如何設定與使用三色 LED，下一個章節會繼續介紹如何利用三色 LED 做調色盤。\">\n\n<meta itemprop=\"description\" content=\"三色 LED 是由紅色、綠色與藍色三種不同顏色的 LED 所組成，因此可以發出最少三種顏色的光，也由於三色 LED 內部含有三顆 LED 燈，所以它具有 VCC、R、B、G 四支針腳，我們也可以分別控制個個顏色的強弱，進一步達到混合顏色的效果。這個 webduino 的範例主要介紹如何設定與使用三色 LED，下一個章節會繼續介紹如何利用三色 LED 做調色盤。\">\n\n<meta property=\"og:description\" content=\"三色 LED 是由紅色、綠色與藍色三種不同顏色的 LED 所組成，因此可以發出最少三種顏色的光，也由於三色 LED 內部含有三顆 LED 燈，所以它具有 VCC、R、B、G 四支針腳，我們也可以分別控制個個顏色的強弱，進一步達到混合顏色的效果。這個 webduino 的範例主要介紹如何設定與使用三色 LED，下一個章節會繼續介紹如何利用三色 LED 做調色盤。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/rgbled.html\">\n\n<meta property=\"og:title\" content=\"教學範例 3：控制 三色 LED\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-03-rgbled.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-03-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-03-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-3-led\">教學範例 3：控制三色 LED</h1>\n<p>三色 LED 是由紅、綠、藍，三種不同顏色的 LED 所組成，因此可以發出最少三種顏色的光，也由於三色 LED 內部含有三顆 LED 燈，所以它具有 VCC、R、B、G 四支針腳，我們也可以分別控制個個顏色的強弱，進一步達到混合顏色的效果。這個範例主要介紹如何設定與使用三色 LED，下一個章節會繼續介紹如何利用三色 LED 做調色盤。</p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">教學影片</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/rgbled-2\">https://blockly.webduino.io/?page=tutorials/rgbled-2</a>  </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/VN4sKngbiGI\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>要控制三色 LED 燈，我們必須要使用 PWM 的腳位 ( Pulse Width Modulation，脈衝寬度調變 )，這是一種將類比信號轉換為波段並且輸出的腳位，可以改變輸出的信號大小，透過輸出信號的強弱，我們就可以做出各種不同顏色的混合，然而在 Webduino 裏，可以用的 PWM 腳位是 3、5、6、9、10、11 這幾個腳位，但因為開發板的不同，我們可以選擇對應的腳位來使用 ( 基本上在 Arduino 的開發板，有「~」記號的就是 PWM 腳位 )。</p>\n<p>接線的方式就是將三色 LED 燈接上杜邦線 ( 一公一母 ) ，把 v 接在 3.3v 的位置 ( 避免電壓過高，造成三色 LED 燈會發出微弱的光線 )，R ( 紅色 ) 接在 10，B ( 藍色 ) 接在 6，G ( 綠色 ) 接在 9，如果沒有這些腳位，可以選擇其他有 PWM 的腳位來接 ( 3、5、11 )。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-03-02.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-03-02-fly.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-03-04.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p><img src=\"../img/tutorials/tutorial-03-03.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例也會點選網頁「按鈕行為」來控制，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「按鈕行為」，就會出現有五顆按鈕的網頁，我們就可以分別點擊這五顆按鈕，產生五種不同顏色。</p>\n<p><img src=\"../img/tutorials/tutorial-03-05.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>因為要控制按鈕，所以左側選單也要選擇「按鈕行為」的程式積木。</p>\n<p><img src=\"../img/tutorials/tutorial-03-06.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>首先我們一樣把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入三色 LED 的積木，名稱設定為 rgbled，腳位設定為紅色 10，綠色 9，藍色 6。( 三色 LED 積木腳位已經鎖定只能選擇 PWM 的數字 )</p>\n<p><img src=\"../img/tutorials/tutorial-03-07.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>最後就是把點選哪個按鈕會出現哪種顏色的行為設定好，如果設定「黑色」，三色 LED 燈就會沒有顏色 ( 也就是關起來的意思 )</p>\n<p><img src=\"../img/tutorials/tutorial-03-08.jpg\" alt=\"教學範例 3：控制三色 LED\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕後，選網頁裡不同的按鈕，就會看到三色 LED 出現不同的顏色。，然而我們也可以點選「JavaScript 頁籤」，就可以看到完整的程式碼邏輯，同時也可以複製這些代碼，貼到自己的網頁原始碼當中，就可以在自己的網頁裡實現一模一樣的行為囉！<br>( 解答：<a href=\"https://blockly.webduino.io/#-K4rh2jD43Y9VSEAC8fT\">https://blockly.webduino.io/#-K4rh2jD43Y9VSEAC8fT</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/rugu/edit?html,css,js,output\">看完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 的 body 裡頭有五個按鈕，名字就是按鈕 1 到 5，各自都有對應一個 HTML 標籤的 id，這樣我們才可以在 JavaScript 裡經由 id 來控制按鈕行為，class 則是讓這些按鈕有固定的樣式，當然如果要用預設的樣式也可以，就不需要設定 CSS。</p>\n<pre><code>&lt;button id=&quot;demo-area-05-btn1&quot; class=&quot;db5&quot;&gt;按鈕 1&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn2&quot; class=&quot;db5&quot;&gt;按鈕 2&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn3&quot; class=&quot;db5&quot;&gt;按鈕 3&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn4&quot; class=&quot;db5&quot;&gt;按鈕 4&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn5&quot; class=&quot;db5&quot;&gt;按鈕 5&lt;/button&gt;\n</code></pre><p>因為只是純粹的按鈕，所以就不看 CSS，直接來看 JavaScript 該怎麼寫，按鈕的點擊事件，使用 JavaScript 的 <code>addEventListener</code> 來監聽 <code>click</code> 事件，設定三色 LED 燈的顏色，則是交給 <code>setColor</code> 來進行，裡面放入 16 進位的色碼 ( 也支援十進位的格式 )，如此一來就會呈現對應的顏色。</p>\n<pre><code>var rgbled;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  rgbled = getRGBLed(board, 10, 9, 6);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#ff0000&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#3333ff&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#009900&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#ffcc66&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn5&quot;).addEventListener(&quot;click&quot;,function(){\n    rgbled.setColor(&#39;#000000&#39;);\n  });\n});\n</code></pre><p>以上就是點選不同的按鈕，由三色 LED 呈現不同顏色的範例。<br>完整程式碼：<a href=\"http://bin.webduino.io/rugu/edit?html,css,js,output\">http://bin.webduino.io/rugu/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K4rh2jD43Y9VSEAC8fT\">https://blockly.webduino.io/#-K4rh2jD43Y9VSEAC8fT</a></p>\n<h2 id=\"-led-\">三色 LED 的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rgbled-1#-JvMrEKwwqW2P607oFz2\">Webduino Blockly 課程 2-1：三色 LED 燈</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rgbled-2#-JvMroBFx1XYaMemJmOm\">Webduino Blockly 課程 2-2：三色 LED 燈切換顏色</a></p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"tutorial-04-rgbled-palette":{"tag":"tutorial","src":"tutorial-04-rgbled-palette.html","title":"三色 LED 調色盤","banner":"tutorial-04-01.jpg","img":"tutorial-04-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 4：三色 LED 調色盤 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"這一篇 Webduino 的範例，將要來更換部分接腳，並利用 Web 裡頭常見的 slider range ( 拉霸 )，來控制三色 LED 燈的顏色強弱，同時在網頁裡頭對應相同的色彩。\">\n\n<meta itemprop=\"description\" content=\"這一篇 Webduino 的範例，將要來更換部分接腳，並利用 Web 裡頭常見的 slider range ( 拉霸 )，來控制三色 LED 燈的顏色強弱，同時在網頁裡頭對應相同的色彩。\">\n\n<meta property=\"og:description\" content=\"這一篇 Webduino 的範例，將要來更換部分接腳，並利用 Web 裡頭常見的 slider range ( 拉霸 )，來控制三色 LED 燈的顏色強弱，同時在網頁裡頭對應相同的色彩。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/component/rgbled-palette.html\">\n\n<meta property=\"og:title\" content=\"教學範例 4：三色 LED 調色盤\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-04-rgbled-palette.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-04-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-04-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-4-led-\">教學範例 4：三色 LED 調色盤</h1>\n<p><a href=\"tutorial-03-rgbled.html\">上一篇</a> 介紹過三色 LED 的原理，這篇將利用 HTML5 裏頭新的 input 類型「color」，來控制三色 LED 燈的顏色變換，同時在網頁裡頭對應相同的色彩。( 影片中則是展示使用 input 的「range」類型來切換顏色 )</p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?&amp;page=tutorials/rgbled-3\">https://blockly.webduino.io/?&amp;page=tutorials/rgbled-3</a> </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/uSfBbvd4ViE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>接線的方式和上一個範例相同，就是將三色 LED 燈接上杜邦線 ( 一公一母 ) ，把 v 接在 3.3v 的位置 ( 避免電壓過高，造成三色 LED 燈會發出微弱的光線 )，R ( 紅色 ) 接在 10，B ( 藍色 ) 接在 6，G ( 綠色 ) 接在 9，如果沒有這些腳位，可以選擇其他有 PWM 的腳位來接 ( 3、5、11 )。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-04-02.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-04-02-fly.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-04-04.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p><img src=\"../img/tutorials/tutorial-04-03.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例也會點選網頁「顏色調整」來控制，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顏色調整」，就會出現有一個可以選擇顏色的按鈕，和一個顯示顏色的區域，我們待會除了讓三色 LED 燈呈現我們選擇的顏色外，也會把顏色顯示在網頁上。</p>\n<p><img src=\"../img/tutorials/tutorial-04-05.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p>左側選單同樣選擇「顏色調整」的程式積木，利用這些積木來完成我們要做的行為。</p>\n<p><img src=\"../img/tutorials/tutorial-04-06.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p>首先把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入三色 LED 的積木，名稱設定為 rgbled，腳位設定為紅色 10，綠色 9，藍色 6，接著放入「選擇顏色後執行」的積木，在裡頭就可以設定區域的顏色，還有三色 LED 燈的顏色。</p>\n<p><img src=\"../img/tutorials/tutorial-04-07.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以利用顏色選取工具，來改變三色 LED 燈的顏色了。 \n( 解答：<a href=\"https://blockly.webduino.io/#-K4wrsITVd2C5wsXOLCn\">https://blockly.webduino.io/#-K4wrsITVd2C5wsXOLCn</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-04-08.jpg\" alt=\"教學範例 4：三色 LED 調色盤\"></p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/xajar/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 的 body 裡頭只有兩個東西，一個是 input 標籤，type 設定為 color，另外一個是呈現顏色的 div。</p>\n<pre><code>選擇顏色：&lt;input id=&quot;demo-area-04-color&quot; type=&quot;color&quot;&gt;\n&lt;div id=&quot;demo-area-04-area&quot;&gt;&lt;/div&gt;\n</code></pre><p>JavaScript 在這裏就是把選取顏色當下的色彩數值，傳給區域背景色，以及三色 LED 的顏色使用 ( 利用 oninput 的事件行為 )</p>\n<pre><code>var rgbled;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  rgbled = getRGBLed(board, 10, 9, 6);\n  document.getElementById(&quot;demo-area-04-color&quot;).oninput = function(_color){\n  _color = this.value;\n    document.getElementById(&quot;demo-area-04-area&quot;).style.background = _color;\n    rgbled.setColor(_color);\n  };\n});\n</code></pre><p>以上就是利用顏色工具，由三色 LED 以及網頁區域，呈現不同顏色的範例。<br>完整程式碼：<a href=\"http://bin.webduino.io/xajar/edit?html,css,js,output\">http://bin.webduino.io/xajar/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K4wrsITVd2C5wsXOLCn\">https://blockly.webduino.io/#-K4wrsITVd2C5wsXOLCn</a></p>\n<h2 id=\"-led-\">三色 LED 的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rgbled-3#-JvMsJupKMuIUdAJs_RK\">Webduino Blockly 課程 2-3：三色 LED 燈調色盤</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rgbled-4#-JvMswgK2Q1h4GjAPx7u\">Webduino Blockly 課程 2-4：轉吧七彩霓虹燈</a></p>\n<div class=\"buy-this\">\n    <span>三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-05-ultrasonic":{"tag":"tutorial","src":"tutorial-05-ultrasonic.html","title":"控制超音波傳感器","banner":"tutorial-05-01.jpg","img":"tutorial-05-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 5：控制超音波傳感器 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"超音波傳感器顧名思義就是會發送超音波，藉由超音波碰撞到物體之後反射回來的時間差，就可以計算超音波傳感器與相對應物體之間的距離，在這個 Webduino 的範例裡頭使用的超音波傳感器 HC-SR04 上頭有兩個類似喇叭的裝置，其中一個是 Trig，負責發送超音波，另外一個是 Echo，負責接收反射回來的超音波，最後會得到一個單位為「公分」的數值，就是超音波傳感器與待測物體之間的距離。\">\n\n<meta itemprop=\"description\" content=\"超音波傳感器顧名思義就是會發送超音波，藉由超音波碰撞到物體之後反射回來的時間差，就可以計算超音波傳感器與相對應物體之間的距離，在這個 Webduino 的範例裡頭使用的超音波傳感器 HC-SR04 上頭有兩個類似喇叭的裝置，其中一個是 Trig，負責發送超音波，另外一個是 Echo，負責接收反射回來的超音波，最後會得到一個單位為「公分」的數值，就是超音波傳感器與待測物體之間的距離。\">\n\n<meta property=\"og:description\" content=\"超音波傳感器顧名思義就是會發送超音波，藉由超音波碰撞到物體之後反射回來的時間差，就可以計算超音波傳感器與相對應物體之間的距離，在這個 Webduino 的範例裡頭使用的超音波傳感器 HC-SR04 上頭有兩個類似喇叭的裝置，其中一個是 Trig，負責發送超音波，另外一個是 Echo，負責接收反射回來的超音波，最後會得到一個單位為「公分」的數值，就是超音波傳感器與待測物體之間的距離。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/sensor/ultrasonic.html\">\n\n<meta property=\"og:title\" content=\"教學範例 5：控制超音波傳感器\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-05-ultrasonic.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-05-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-05-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-5-\">教學範例 5：控制超音波傳感器</h1>\n<p>超音波傳感器顧名思義就是會發送超音波，藉由超音波碰撞到物體之後反射回來的時間差，就可以計算超音波傳感器與相對應物體之間的距離，在這個範例裡頭使用的超音波傳感器 HC-SR04 上頭有兩個類似喇叭的裝置，其中一個是 Trig，負責發送超音波，另外一個是 Echo，負責接收反射回來的超音波，最後會得到一個單位為「公分」的數值，就是超音波傳感器與待測物體之間的距離，不過因為超音波有指向性，如果今天受測的物體是傾斜的，超音波可能就會被反彈到別的地方，或是今天待測物會吸收聲波，可能測出來的距離就會有不準確的情形發生。</p>\n<div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/ultrasonic-1\">https://blockly.webduino.io/?page=tutorials/ultrasonic-1</a>  </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/e6gbwMUzSZ8\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>我們使用的超音波傳感器的型號為 HC-SR04，接線的方式只要將 VCC 接在 3.3v 或 VCC 的位置，GND 接在 GND 的位置，Trig 和 Echo 接在數字腳位上即可。( 在這篇我們將 Trig 接在 11，Echo 接在 10 )</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-05-02.jpg\" alt=\"教學範例 5：控制超音波傳感器\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-05-02-fly.jpg\" alt=\"教學範例 5：控制超音波傳感器\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-05-03.jpg\" alt=\"教學範例 5：控制超音波傳感器\"></p>\n<div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例也會點選網頁「顯示文字」來顯示超音波傳感器偵測到的數值，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」，就會出現一個文字區域，我們也會將超音波所測得的距離顯示在這邊。</p>\n<p><img src=\"../img/tutorials/tutorial-05-04.jpg\" alt=\"教學範例 5：控制超音波傳感器\"></p>\n<p>待會在左側工具列會用到「顯示文字」相關的積木，我們可以設定顯示文字的大小、顏色、行高。</p>\n<p><img src=\"../img/tutorials/tutorial-05-05.jpg\" alt=\"教學範例 5：控制超音波傳感器\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入超音波積木，名稱設定為 ultrasonic，腳位設定為 Trig 11，Echo 10，接著放入每 500 毫秒偵測一次的積木。(建議設定 200 毫秒以上)</p>\n<p><img src=\"../img/tutorials/tutorial-05-06.jpg\" alt=\"教學範例 5：控制超音波傳感器\"></p>\n<p>最後就是把顯示的數值，顯示在網頁裡頭。</p>\n<p><img src=\"../img/tutorials/tutorial-05-07.jpg\" alt=\"教學範例 5：控制超音波傳感器\"></p>\n<p>當然這邊你也可以做點變化，利用「邏輯」的積木，讓距離大於 30 公分的時候，文字顏色會變成紅色。</p>\n<p><img src=\"../img/tutorials/tutorial-05-08.jpg\" alt=\"教學範例 5：控制超音波傳感器\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，用手或是遮蔽物在超音波傳感器前後晃動，就會看到右側的網頁文字變成距離數值而且會變色了。\n( 解答：<a href=\"https://blockly.webduino.io/#-K4x-T2x2FErHgjUUTem\">https://blockly.webduino.io/#-K4x-T2x2FErHgjUUTem</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/sane/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>)</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>因為只有顯示文字，所以在 HTML 裏頭只有放入一個 span 來顯示文字而已。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;要顯示的文字&lt;/span&gt;\n</code></pre><p>JavaScript 的部分使用了 <code>ping</code> 這個超音波傳感器的偵測方法，裡面是一個帶有一個參數的函式，這個參數就是偵測到的距離 ( 也可以用 <code>.distance</code> 屬性來表示 )，然後我們只要用一個 if 和 else 的判斷，就可以在不同距離，顯示不同文字顏色。</p>\n<pre><code>var ultrasonic;\n\nboardReady(&#39;開發板名稱&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 11, 10);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ultrasonic.distance;\n    if (ultrasonic.distance &gt; 30) {\n      document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#ff0000&#39;;\n    } else {\n      document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#000000&#39;;\n    }\n  }, 500);\n});\n</code></pre><p>因為是 Blockly 工具產生，有些重複的代碼，我們可以用一個變數來表示，將其簡化，讓程式碼看起來更乾淨。</p>\n<pre><code>var ultrasonic;\nvar show;\n\nboardReady(&#39;開發板名稱&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 11, 10);\n  show = document.getElementById(&quot;demo-area-01-show&quot;);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    show.innerHTML = ultrasonic.distance;\n    if (ultrasonic.distance &gt; 30) {\n      show.style.color = &#39;#ff0000&#39;;\n    } else {\n      show.style.color = &#39;#000000&#39;;\n    }\n  }, 500);\n});\n</code></pre><p>以上就是利用超音波傳感器，偵測並顯示距離的範例。<br>完整程式碼：<a href=\"http://bin.webduino.io/sane/edit?html,css,js,output\">http://bin.webduino.io/sane/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K4x-T2x2FErHgjUUTem\">https://blockly.webduino.io/#-K4x-T2x2FErHgjUUTem</a></p>\n<h2 id=\"-\">超音波傳感器的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/ultrasonic-1#-JvS-HS4kdS5Mn9tlXmD\">Webduino Blockly 課程 3-1：超音波傳感器</a> </p>\n<div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-06-ultrasonic-imagesize":{"tag":"tutorial","src":"tutorial-06-ultrasonic-imagesize.html","title":"超音波傳感器改變圖片大小","banner":"tutorial-06-01.jpg","img":"tutorial-06-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 6：超音波傳感器改變圖片大小 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"我們了解了超音波傳感器的運作原理，在這個 Webduino 的範例就來做點應用，藉由超音波傳感器回傳的公分數值，對應到網頁裡頭圖片的寬度，就可以非常輕鬆地做出一個利用超音波傳感器控制圖片大小的實例囉。\">\n\n<meta itemprop=\"description\" content=\"我們了解了超音波傳感器的運作原理，在這個 Webduino 的範例就來做點應用，藉由超音波傳感器回傳的公分數值，對應到網頁裡頭圖片的寬度，就可以非常輕鬆地做出一個利用超音波傳感器控制圖片大小的實例囉。\">\n\n<meta property=\"og:description\" content=\"我們了解了超音波傳感器的運作原理，在這個 Webduino 的範例就來做點應用，藉由超音波傳感器回傳的公分數值，對應到網頁裡頭圖片的寬度，就可以非常輕鬆地做出一個利用超音波傳感器控制圖片大小的實例囉。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/sensor/ultrasonic-imagesize.html\">\n\n<meta property=\"og:title\" content=\"教學範例 6：超音波傳感器改變圖片大小\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-06-ultrasonic-imagesize.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-06-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-06-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-6-\">教學範例 6：超音波傳感器改變圖片大小</h1>\n<p>在 <a href=\"tutorial-05-ultrasonic.html\">上一個範例</a> 我們了解了超音波傳感器的運作原理，在這個範例就來做點應用，藉由超音波傳感器回傳的公分數值，對應到網頁裡頭圖片的寬度，就可以非常輕鬆地做出一個利用超音波傳感器控制圖片大小的實例囉。</p>\n<div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/ultrasonic-2\">https://blockly.webduino.io/?page=tutorials/ultrasonic-2</a>  </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/NXJ3xmqHm8o\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>和上一個範例完全一樣，只要把超音波傳感器的 VCC 接在 3.3v，Trig 接在 11，Echo 接在 10，GND 就接在 GND 的腳位，你可以用麵包板接出來，也可以直接就把超音波傳感器跟 Webduino 開發板組合即可。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-06-02.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-06-02-fly.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-06-03.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「控制圖片」來對圖片做放大縮小或旋轉的控制，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「控制圖片」，就會出現一張圖片，我們會將超音波所測得的距離來控制這張圖片。</p>\n<p><img src=\"../img/tutorials/tutorial-06-04.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入超音波積木，名稱設定為 ultrasonic，腳位設定為 Trig 11，Echi 10，接著放入每 500 毫秒偵測一次的積木，接著把左側網頁互動裡，控制圖片角度的積木擺放進去，讓圖片旋轉的角度就是超音波偵測到的距離。( 可以把原本的數值 0 刪除，放入偵測到的距離 )</p>\n<p><img src=\"../img/tutorials/tutorial-06-05.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>或是你也可以用超音波的數值設定為圖片的長寬。</p>\n<p><img src=\"../img/tutorials/tutorial-06-06.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>如果不想按照 1:1 的比例，也可以用數學式來計算長寬。</p>\n<p><img src=\"../img/tutorials/tutorial-06-07.jpg\" alt=\"教學範例 6：超音波傳感器改變圖片大小\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，用手或是遮蔽物在超音波傳感器前後晃動，就會看到圖片開始旋轉或是大小開始改變了。\n( 解答：<a href=\"https://blockly.webduino.io/#-K5LUv3-l1992A51-gX4\">https://blockly.webduino.io/#-K5LUv3-l1992A51-gX4</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/jufiq/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裡就是一張圖片，放在一個 div 裡頭，圖片和 div 分別都有 id 方便我們去控制。</p>\n<pre><code>&lt;div id=&quot;demo-area-03-container&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/webduino-logo.jpg&quot; id=&quot;demo-area-03-image&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>CSS 在外面的 div 設定了長寬，比較需要注意的是 <code>position: relative;</code>，當我們這樣設定，內部的圖片位置設定為 <code>position: absolute</code>，就可以由 div 的位置出發，透過 <code>top</code> 和 <code>left</code> 來設定圖片位置，然後這裏也用了 <code>transform-origin</code> 來定義圖片的中心點，並且加上 <code>transition</code> 來設定圖片漸變的時間，這裏設定為 0.3 秒。</p>\n<pre><code>#demo-area-03-container {\n  position: relative;\n  width: 150px;\n  height: 150px;\n}\n\n#demo-area-03-image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 150px;\n  height: 150px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  transform-origin: 75px 75px;\n  -webkit-transform-origin: 75px 75px;\n  -moz-transform-origin: 75px 75px;\n}\n</code></pre><p>javascript 寫起來還滿容易的，就只是把 <code>ping</code> 所回傳的公分數，轉換為圖片的大小，純粹就是一些格式大小的運算，如果要將其簡化。</p>\n<pre><code>var ultrasonic;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 11, 10);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    var imageWidth = ultrasonic.distance;\n    var imageHeight = (ultrasonic.distance * 1.5);\n    document.getElementById(&quot;demo-area-03-image&quot;).style.width = imageWidth+&quot;px&quot;;\n    document.getElementById(&quot;demo-area-03-image&quot;).style.height = imageHeight+&quot;px&quot;;\n  }, 500);\n});\n</code></pre><p>以上就是利用超音波傳感器，偵測並用距離來改變圖片大小或角度的範例。<br>完整程式碼：<a href=\"http://bin.webduino.io/jufiq/edit?html,css,js,output\">http://bin.webduino.io/jufiq/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K5LUv3-l1992A51-gX4\">https://blockly.webduino.io/#-K5LUv3-l1992A51-gX4</a></p>\n<h2 id=\"-\">超音波傳感器的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/ultrasonic-2#-JvS-qZVOxcFtjlMhYlP\">Webduino Blockly 課程 3-2：超音波傳感器改變圖片大小</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/ultrasonic-3#-JvS09LhPCGEY4M1-juO\">Webduino Blockly 課程 3-3：超音波傳感器改變音量大小</a> </p>\n<div class=\"buy-this\">\n    <span>超音波傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n\n\n\n\n\n<!-- @@close-->"},"tutorial-07-ultrasonic-led":{"tag":"tutorial","src":"tutorial-07-ultrasonic-led.html","title":"超音波傳感器控制 LED 燈","banner":"tutorial-07-01.jpg","img":"tutorial-07-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 7：超音波傳感器控制 LED 燈 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"對於直接寫 C/C++ 來控制 Arduino 的人來說，用超音波傳感器控制 LED 應該是小菜一碟，但對於要用 Web 技術來實現就沒那麼容易，不過在我們由前面幾個 webduino 範例了解相關傳感器運作原理之後，就可以很輕鬆的做出來用超音波傳感器控制 LED 燈的實例，也因為是透過 Web 的方式，所以當行為觸發時，網頁端同時也可以收到動作的發生 ( 圖片也會改變 )，相當的方便。\">\n\n<meta itemprop=\"description\" content=\"對於直接寫 C/C++ 來控制 Arduino 的人來說，用超音波傳感器控制 LED 應該是小菜一碟，但對於要用 Web 技術來實現就沒那麼容易，不過在我們由前面幾個 webduino 範例了解相關傳感器運作原理之後，就可以很輕鬆的做出來用超音波傳感器控制 LED 燈的實例，也因為是透過 Web 的方式，所以當行為觸發時，網頁端同時也可以收到動作的發生 ( 圖片也會改變 )，相當的方便。\">\n\n<meta property=\"og:description\" content=\"對於直接寫 C/C++ 來控制 Arduino 的人來說，用超音波傳感器控制 LED 應該是小菜一碟，但對於要用 Web 技術來實現就沒那麼容易，不過在我們由前面幾個 webduino 範例了解相關傳感器運作原理之後，就可以很輕鬆的做出來用超音波傳感器控制 LED 燈的實例，也因為是透過 Web 的方式，所以當行為觸發時，網頁端同時也可以收到動作的發生 ( 圖片也會改變 )，相當的方便。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/sensor/ultrasonic-led.html\">\n\n<meta property=\"og:title\" content=\"教學範例 7：超音波傳感器控制 LED 燈\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-07-ultrasonic-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-07-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-07-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<p>#教學範例 7：超音波傳感器控制 LED 燈</p>\n<p>對於直接寫 C/C++ 來控制 Arduino 的人來說，用超音波傳感器控制 LED 應該是小菜一碟，但對於要用 Web 技術來實現就沒那麼容易，不過在我們由前面幾個範例了解相關傳感器運作原理之後，就可以很輕鬆的做出來用超音波傳感器控制 LED 燈的實例，也因為是透過 Web 的方式，所以當行為觸發時，網頁端同時也可以收到動作的發生 ( 圖片也會改變 )，相當的方便。</p>\n<div class=\"buy-this\">\n    <span>超音波傳感器與 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/pRMjbzPXWvw\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>因為超音波傳感器與 LED 都必須用到 GND 的腳位，所以我們必須要用到麵包板和電線，同樣用電線引出腳位，把超音波傳感器的 VCC 接在 3.3v，Trig 接在 11，Echo 接在 10，GND 就接在 GND 的腳位，然後再用另外的電線將 LED 接在 9 的腳位上。( 因為超音波傳感器在實際的接線會朝外，所以實際的照片電線會有反轉的情形，不要接錯了。 )</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-07-02-new.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-07-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-07-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-07-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>超音波傳感器與 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「點擊燈泡」，在 LED 燈亮起時，同時網頁燈泡也會亮起，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「控制圖片」，就會出現一張圖片，我們會將超音波所測得的距離來控制這張圖片。</p>\n<p><img src=\"../img/tutorials/tutorial-07-05.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入超音波積木，名稱設定為 ultrasonic，腳位設定為 Trig 11，Echi 10，然後放入 LED 燈的積木，名稱設定 led，腳位設定為 9。</p>\n<p><img src=\"../img/tutorials/tutorial-07-06.jpg\" alt=\"\"></p>\n<p>然後我們每 500 毫秒擷取一次距離，利用「邏輯」來判斷，當距離小於 15 公分時，同時點亮 LED 燈以及右側的燈泡圖片，反之距離大於 15 公分時，就熄滅 LED 燈還有右側燈泡圖片。</p>\n<p><img src=\"../img/tutorials/tutorial-07-07.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，用手或是遮蔽物在超音波傳感器前後晃動，就會看到 LED 燈被點亮了。\n( 解答：<a href=\"https://blockly.webduino.io/#-K5LaeMqraW0_friFzcj\">https://blockly.webduino.io/#-K5LaeMqraW0_friFzcj</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/nofi/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裡就是兩張一明一暗的燈泡圖片，利用 CSS 來控制哪張出現。</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>CSS 就是設定 on 的時候燈泡圖片亮起，off 的時候燈泡圖片熄滅。</p>\n<pre><code>#demo-area-02-light img {\n  height: 200px;\n  display: none;\n}\n\n#demo-area-02-light.on #demo-area-02-on {\n  display: inline-block;\n}\n\n#demo-area-02-light.off #demo-area-02-off {\n  display: inline-block;\n}\n</code></pre><p>JavaScript 主要在 <code>ping</code> 的函示內，寫入 <code>if</code> 和 <code>else</code> 的判斷，判斷小於 15 時讓 <code>led.on()</code>。</p>\n<pre><code>var ultrasonic;\nvar led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 11, 10);\n  led = getLed(board, 9);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    if (ultrasonic.distance &lt; 15) {\n      led.on();\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n    } else {\n      led.off();\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n    }\n  }, 500);\n});\n</code></pre><p>以上就是利用超音波傳感器，偵測距離當在某距離範圍內時，LED 燈會亮起。<br>完整程式碼：<a href=\"http://bin.webduino.io/nofi/edit?html,css,js,output\">http://bin.webduino.io/nofi/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K5LaeMqraW0_friFzcj\">https://blockly.webduino.io/#-K5LaeMqraW0_friFzcj</a></p>\n<h2 id=\"-\">超音波傳感器的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/ultrasonic-2#-JvS-qZVOxcFtjlMhYlP\">Webduino Blockly 課程 3-2：超音波傳感器改變圖片大小</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/ultrasonic-3#-JvS09LhPCGEY4M1-juO\">Webduino Blockly 課程 3-3：超音波傳感器改變音量大小</a> </p>\n<div class=\"buy-this\">\n    <span>超音波傳感器與 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<!-- @@close-->"},"tutorial-08-ultrasonic-rgbled":{"tag":"tutorial","src":"tutorial-08-ultrasonic-rgbled.html","title":"超音波傳感器控制三色 LED 燈","banner":"tutorial-08-01.jpg","img":"tutorial-08-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 8：超音波傳感器控制三色 LED 燈 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"當我們由上一個範例學會了用超音波傳感器控制 LED 燈之後，這個範例應該就輕鬆不少，這個 webduino 範例最主要是希望能藉由三色 LED 燈顏色上的變化，對應距離的改變，如此一來我們就可以藉由燈號來判斷距離。\">\n\n<meta itemprop=\"description\" content=\"當我們由上一個範例學會了用超音波傳感器控制 LED 燈之後，這個範例應該就輕鬆不少，這個 webduino 範例最主要是希望能藉由三色 LED 燈顏色上的變化，對應距離的改變，如此一來我們就可以藉由燈號來判斷距離。\">\n\n<meta property=\"og:description\" content=\"當我們由上一個範例學會了用超音波傳感器控制 LED 燈之後，這個範例應該就輕鬆不少，這個 webduino 範例最主要是希望能藉由三色 LED 燈顏色上的變化，對應距離的改變，如此一來我們就可以藉由燈號來判斷距離。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/sensor/ultrasonic-rgbled.html\">\n\n<meta property=\"og:title\" content=\"教學範例 8：超音波傳感器控制三色 LED 燈\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-08-ultrasonic-rgbled.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-08-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-08-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-8-led-\">教學範例 8：超音波傳感器控制三色 LED 燈</h1>\n<p>當我們由上一個範例學會了用超音波傳感器控制 LED 燈之後，這個範例應該就輕鬆不少，這個範例最主要是希望能藉由三色 LED 燈顏色上的變化，對應距離的改變，如此一來我們就可以藉由燈號來判斷距離。</p>\n<div class=\"buy-this\">\n    <span>超音波傳感器與三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/ultrasonic-4\">https://blockly.webduino.io/?page=tutorials/ultrasonic-4</a> </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/8lDL6_2io1Y\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>##接線與實作</p>\n<p>雖然超音波傳感器與三色 LED 可以分別用 webduino 的兩個排插來接，因為三色 LED 燈需要用到 PWM 腳位 ( 不能接在 7 和 8 )，所以我們必須要用到麵包板與杜邦線，用電線引出腳位，把超音波傳感器的 VCC 接在 VCC，Trig 接在 7，Echo 接在 8，GND 就接在 GND 的腳位，三色 LED 的 VCC 接在 3.3v 的腳位，紅色 R 接 10，藍色 B 接 6，綠色 G 接 9。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-08-02.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-08-02-fly.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-08-03.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p><img src=\"../img/tutorials/tutorial-08-04.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p><img src=\"../img/tutorials/tutorial-08-05.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<div class=\"buy-this\">\n    <span>超音波傳感器與三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「顏色調整」來將超音波不同距離的顏色顯示在出來，同時三色 LED 燈也會跟著變色，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顏色調整」，就會出現個顏色區域，我們會將超音波所測得的距離來顯示不同顏色在上面。</p>\n<p><img src=\"../img/tutorials/tutorial-08-06.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入超音波積木，名稱設定為 ultrasonic，腳位設定為 Trig 7，Echi 8，接著放入三色 LED 燈的積木，名稱為 rgbled，紅色腳位 10，綠色腳位 9，藍色腳位 8。</p>\n<p><img src=\"../img/tutorials/tutorial-08-07.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>放入每 500 毫秒偵測一次的積木，裡面先放入「邏輯」的積木，不過因為我們有許多距離要判斷，因此除了「否則」，還要有一些「否則如果」的積木缺口。</p>\n<p><img src=\"../img/tutorials/tutorial-08-08.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>接著要使用另外兩塊邏輯積木，「且」這個邏輯積木，表示「and」，也就是左右兩個條件都滿足時才會成立。</p>\n<p><img src=\"../img/tutorials/tutorial-08-09.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>就這樣我們可以組合出 0 ~ 10、10 ~ 20、20 ~ 30 和大於 30 公分四種距離的顏色。</p>\n<p><img src=\"../img/tutorials/tutorial-08-10.jpg\" alt=\"教學範例 8：超音波傳感器控制三色 LED 燈\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，用手或是遮蔽物在超音波傳感器前後晃動，就會看到在不同的距離，三色 LED 燈出現不同的顏色。\n( 解答：<a href=\"https://blockly.webduino.io/#-K5Lw1ZXmFnLvA971IbJ\">https://blockly.webduino.io/#-K5Lw1ZXmFnLvA971IbJ</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/coqub/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裡頭有一個 div，負責顯示顏色。</p>\n<pre><code>&lt;div id=&quot;demo-area-04-area&quot;&gt;&lt;/div&gt;\n</code></pre><p>CSS 也就是這個 div 的長寬尺寸和預設的顏色。</p>\n<pre><code>#demo-area-04-area {\n  width: 90%;\n  height: 150px;\n  background: #ccc;\n}\n</code></pre><p>JavaScript 用了許多的 <code>if</code>、<code>elseif</code> 和 <code>else</code>，「且」這個積木在程式碼裡就是 <code>&amp;&amp;</code> 的符號表示，由這些邏輯判斷，就可以在不同距離顯示不同顏色。</p>\n<pre><code>var ultrasonic;\nvar rgbled;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  ultrasonic = getUltrasonic(board, 7, 8);\n  rgbled = getRGBLed(board, 10, 9, 6);\n  ultrasonic.ping(function(cm){\n    console.log(ultrasonic.distance);\n    if (ultrasonic.distance &gt; 0 &amp;&amp; ultrasonic.distance &lt;= 10) {\n      rgbled.setColor(&#39;#ff0000&#39;);\n      document.getElementById(&quot;demo-area-04-area&quot;).style.background = &#39;#ff0000&#39;;\n    } else if (ultrasonic.distance &gt; 10 &amp;&amp; ultrasonic.distance &lt;= 20) {\n      rgbled.setColor(&#39;#3333ff&#39;);\n      document.getElementById(&quot;demo-area-04-area&quot;).style.background = &#39;#3333ff&#39;;\n    } else if (ultrasonic.distance &gt; 20 &amp;&amp; ultrasonic.distance &lt;= 30) {\n      rgbled.setColor(&#39;#ffcc33&#39;);\n      document.getElementById(&quot;demo-area-04-area&quot;).style.background = &#39;#ffcc33&#39;;\n    } else {\n      rgbled.setColor(&#39;#000000&#39;);\n      document.getElementById(&quot;demo-area-04-area&quot;).style.background = &#39;#000000&#39;;\n    }\n  }, 500);\n});\n</code></pre><p>以上就是利用超音波傳感器，偵測並用距離來同時改變三色 LED 燈以及網頁區域的顏色。<br>完整程式碼：<a href=\"http://bin.webduino.io/coqub/edit?html,css,js,output\">http://bin.webduino.io/coqub/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K5Lw1ZXmFnLvA971IbJ\">https://blockly.webduino.io/#-K5Lw1ZXmFnLvA971IbJ</a></p>\n<h2 id=\"-\">超音波傳感器的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/ultrasonic-4#-JvS1HjBSLU7wbtmLxKB\">Webduino Blockly 課程 3-4：超音波傳感器控制三色 LED 燈顏色</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/ultrasonic-6#-JxEs_Z0dmBi0nu3Pylw\">Webduino Blockly 課程 3-6：超音波傳感器控制 Youtube 播放速度</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/ultrasonic-5#-JwgqGd0PtGFPC8GNcfY\">Webduino Blockly 課程 3-5：超音波傳感器控制 youtube 的音量</a> </p>\n<div class=\"buy-this\">\n    <span>超音波傳感器與三色 LED 燈相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n\n\n<!-- @@close-->"},"tutorial-09-button-led":{"tag":"tutorial","src":"tutorial-09-button-led.html","title":"按鈕開關","banner":"tutorial-09-01.jpg","img":"tutorial-09-01s.jpg","date":20150425,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 9：按鈕開關 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"開關是日常生活中很常見的電子零件，藉由開和關的訊號，可以控制各種不同的家電，這個範例將會展示，如何藉由獲得按鈕開關的訊號，並且進一步由訊號來控制網頁裡的圖片或 LED 燈的明暗。\">\n\n<meta itemprop=\"description\" content=\"開關是日常生活中很常見的電子零件，藉由開和關的訊號，可以控制各種不同的家電，這個範例將會展示，如何藉由獲得按鈕開關的訊號，並且進一步由訊號來控制網頁裡的圖片或 LED 燈的明暗。\">\n\n<meta property=\"og:description\" content=\"開關是日常生活中很常見的電子零件，藉由開和關的訊號，可以控制各種不同的家電，這個範例將會展示，如何藉由獲得按鈕開關的訊號，並且進一步由訊號來控制網頁裡的圖片或 LED 燈的明暗。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/button.html\">\n\n<meta property=\"og:title\" content=\"教學範例 9：按鈕開關\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-09-button-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-09-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-09-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-9-\">教學範例 9：按鈕開關</h1>\n<p>開關是日常生活中很常見的電子零件，藉由開和關的訊號，可以控制各種不同的家電，這個範例將會展示，如何藉由獲得按鈕開關的訊號，並且進一步由訊號來控制網頁裡的圖片或 LED 燈的明暗。</p>\n<div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/button-1\">https://blockly.webduino.io/?page=tutorials/button-1</a> </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Y2I42DsAov8\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>按鈕開關是一個很常見的元件，當我們進行點壓的時候，按鈕上的四隻腳會呈現全部通路的情形，為了避免有短路的發生，所以我們要接一顆電阻進行保護，下圖是按鈕開關的原理圖。</p>\n<p><img src=\"../img/tutorials/tutorial-09-02.jpg\" alt=\"\"></p>\n<p>按鈕開關的接法剛好利用麵包板中間斷路的設計，將四隻腳兩兩成對橫跨兩邊，如此一來按下開關就會四隻腳通路，然後在接 GND 的一側用電阻連接 ( 這種方式稱作下拉電阻，如果接在正電的一側稱之上拉電組 )</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-09-03.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-09-03-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-09-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-09-05.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「顯示文字」來根據開關的狀態，顯示不同的文字，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」。</p>\n<p><img src=\"../img/tutorials/tutorial-09-06.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入按鈕積木，名稱設定為 button，腳位設定為 11，接著放入三個按鈕的動作，分別是按下、放開和長按，並且讓不同的動作會顯示不同的文字。</p>\n<p><img src=\"../img/tutorials/tutorial-09-07.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕就可以按按看按鈕開關，就會看到顯示文字顯示出對應的文字了。\n( 解答：<a href=\"https://blockly.webduino.io/#-K7EhniKOnrgyWt18E4t\">https://blockly.webduino.io/#-K7EhniKOnrgyWt18E4t</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-09-08.jpg\" alt=\"\"></p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/vaku/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裡頭有一個 span，負責顯示文字。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript 可以看到 button 具有一個 on 的事件，裡面第一個參數就是按鈕開關的動作，pressed 是按下，released 是放開，longPress 則是長按，第二個參數是回呼函式，把要做什麼事情寫在這邊就可以。</p>\n<pre><code>var button;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  button = getButton(board, 11);\n  button.on(&quot;pressed&quot;,function(){\n    console.log(&quot;pressed&quot;);\n      window.alert(&#39;AAA&#39;);\n  });\n  button.on(&quot;released&quot;,function(){\n    console.log(&quot;released&quot;);\n      window.alert(&#39;BBB&#39;);\n  });\n  button.on(&quot;longPress&quot;,function(){\n    console.log(&quot;longPress&quot;);\n      window.alert(&#39;CCC&#39;);\n  });\n});\n</code></pre><p>以上就是利用按鈕開關的按下、放開與長按，來改變網頁裡面的顯示文字。<br>完整程式碼：<a href=\"http://bin.webduino.io/vaku/edit?html,css,js,output\">http://bin.webduino.io/vaku/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7EhniKOnrgyWt18E4t\">https://blockly.webduino.io/#-K7EhniKOnrgyWt18E4t</a></p>\n<h2 id=\"-\">按鈕開關的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/button-2#-JvWu7mS_OoeRvE-m6mD\">Webduino Blockly 課程 4-2：點擊按鈕開關增加數字</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/button-3#-JvWuaeLK-rrGi66lVIM\">Webduino Blockly 課程 4-3：點擊按鈕開關改變圖片位置</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/button-4#-JvY90I0qUoJR2yi34lj\">Webduino Blockly 課程 4-4：點擊按鈕開關玩賽跑小遊戲</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/button-4#-JvY90I0qUoJR2yi34lj\">Webduino Blockly 課程 4-4：點擊按鈕開關玩賽跑小遊戲</a> \n<a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/button-5#-JxJpqetsCxULbi4Iier\">Webduino Blockly 課程 4-5：點擊按鈕開關控制 Youtube</a> </p>\n<div class=\"buy-this\">\n    <span>按鈕開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<!-- @@close-->"},"tutorial-10-temperature-humidity-sensor":{"tag":"tutorial","src":"tutorial-10-temperature-humidity-sensor.html","title":"溫濕度傳感器","banner":"tutorial-10-01.jpg","img":"tutorial-10-01s.jpg","date":20150601,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 10：溫濕度傳感器 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"溫濕度傳感器是接收外界環境變數最基本的傳感器，透過溫濕度傳感器，可以準確的偵測溫度與溼度的即時變化，若再搭配一些樣式表 ( CSS )、圖表工具 ( D3.js、Google Chart ) 或後端資料庫，就可以整合成為非常有用的數據收集應用。\">\n\n<meta itemprop=\"description\" content=\"溫濕度傳感器是接收外界環境變數最基本的傳感器，透過溫濕度傳感器，可以準確的偵測溫度與溼度的即時變化，若再搭配一些樣式表 ( CSS )、圖表工具 ( D3.js、Google Chart ) 或後端資料庫，就可以整合成為非常有用的數據收集應用。\">\n\n<meta property=\"og:description\" content=\"溫濕度傳感器是接收外界環境變數最基本的傳感器，透過溫濕度傳感器，可以準確的偵測溫度與溼度的即時變化，若再搭配一些樣式表 ( CSS )、圖表工具 ( D3.js、Google Chart ) 或後端資料庫，就可以整合成為非常有用的數據收集應用。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/sensor/dht.html\">\n\n<meta property=\"og:title\" content=\"教學範例 10：溫濕度傳感器\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-10-temperature-humidity-sensor.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-10-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-10-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-10-\">教學範例 10：溫濕度傳感器</h1>\n<p>溫濕度傳感器是接收外界環境變數最基本的傳感器，透過溫濕度傳感器，可以準確的偵測溫度與溼度的即時變化，若再搭配一些樣式表 ( CSS )、圖表工具 ( D3.js、Google Chart ) 或後端資料庫，就可以整合成為非常有用的數據收集應用。</p>\n<div class=\"buy-this\">\n    <span>溫濕度傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/dht-1\">https://blockly.webduino.io/?page=tutorials/dht-1</a> </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/T8sZL-UaUP0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>溫濕度傳感器有四隻針腳，第一隻針腳為 v ( 接 3.3V )，第二隻為 data ( 接 11 )，第三隻沒有作用，為 N/C，第四隻為 GND。</p>\n<p><img src=\"../img/tutorials/tutorial-10-02.jpg\" alt=\"\"></p>\n<p>可以直接將溫濕度傳感器接在馬克 1 號上，或利用麵包板接線出來。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-10-03.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-10-03-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-10-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>溫濕度傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「顯示文字」來顯示溫度或濕度，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」。</p>\n<p><img src=\"../img/tutorials/tutorial-10-05.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入溫濕度積木，名稱設定為 dht，腳位設定為 11，接著放入每多久偵測一次溫濕度的積木，時間設定為 1000 毫秒 ( 1 秒 )。</p>\n<p><img src=\"../img/tutorials/tutorial-10-06.jpg\" alt=\"\"></p>\n<p>因為顯示文字只有一個，要同時顯示溫濕度的話就要使用「建立字串」的積木，建立字串積木預設只有一個缺口，我們可以點選藍色小齒輪，增加缺口的數量。</p>\n<p><img src=\"../img/tutorials/tutorial-10-07.jpg\" alt=\"\"></p>\n<p>增加了缺口後，在缺口內填入對應的文字以及偵測到的溫濕度。</p>\n<p><img src=\"../img/tutorials/tutorial-10-08.jpg\" alt=\"\"></p>\n<p>如果顯示出來的文字太大，或者行高太窄，我們也可以利用文字樣式的積木來調整，這裏將文字和行高都設為 20。</p>\n<p><img src=\"../img/tutorials/tutorial-10-09.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以看到當下的溫濕度，如果用吹風機或嘴呼氣，就會看到溫濕度的變化了。\n( 解答：<a href=\"https://blockly.webduino.io/#-K79kCuHvGneUStvVcye\">https://blockly.webduino.io/#-K79kCuHvGneUStvVcye</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-10-10.jpg\" alt=\"\"></p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/coca/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裡頭有一個 span，負責顯示文字。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript 用了一個 <code>read</code> 的方法來讀取溫濕度，<code>read</code> 的第一個參數是做動作的函式，第二個參數是時間，可以看到這裡時間設定為 1000 ( 毫秒 )，然後顯示文字使用了 innerHTML 來呈現，字體大小與行高則是用 <code>style</code> 來修改。  </p>\n<pre><code>var dht;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  dht = getDht(board, 11);\n  document.getElementById(&quot;demo-area-01-show&quot;).style.fontSize = 20+&quot;px&quot;;\n  document.getElementById(&quot;demo-area-01-show&quot;).style.lineHeight = 20+&quot;px&quot;;\n  dht.read(function(evt){\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ([&#39;溫度：&#39;,dht.temperature,&#39;度，&#39;,&#39;濕度：&#39;,dht.humidity,&#39;%&#39;].join(&#39;&#39;));\n  }, 1000);\n});\n</code></pre><p>以上就是利用溫濕度傳感器，來偵測環境溫濕度的教學範例。<br>完整程式碼：<a href=\"http://bin.webduino.io/coca/edit?html,css,js,output\">http://bin.webduino.io/coca/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K79kCuHvGneUStvVcye\">https://blockly.webduino.io/#-K79kCuHvGneUStvVcye</a></p>\n<h2 id=\"-\">溫濕度傳感器的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/dht-2#-Jvwiwd_Lr9F5j5Oz4-N\">Webduino Blockly 課程 5-2：繪製溫濕度圖表</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/dht-3#-JxAbDN7TNVwWDlh85y4\">Webduino Blockly 課程 5-3：使用 Firebase 紀錄溫濕度數值</a></p>\n<div class=\"buy-this\">\n    <span>溫濕度傳感器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<!-- @@close-->"},"tutorial-11-shock-button":{"tag":"tutorial","src":"tutorial-11-shock-button.html","title":"震動開關改變網頁數值","banner":"tutorial-11-01.jpg","img":"tutorial-11-01s.jpg","date":20150602,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 11：震動開關改變網頁數值 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"震動開關裡頭有一個金屬導電彈簧以及金屬導電腳，金屬彈簧延伸到塑膠外殼外部是一條比較細的金屬線，因此在晃動的時候，內部互相接觸進而短路導電，原理和之前所提到的按鈕類似，只是震動開關利用震動的方式，控制電路的開或關。\">\n\n<meta itemprop=\"description\" content=\"震動開關裡頭有一個金屬導電彈簧以及金屬導電腳，金屬彈簧延伸到塑膠外殼外部是一條比較細的金屬線，因此在晃動的時候，內部互相接觸進而短路導電，原理和之前所提到的按鈕類似，只是震動開關利用震動的方式，控制電路的開或關。\">\n\n<meta property=\"og:description\" content=\"震動開關裡頭有一個金屬導電彈簧以及金屬導電腳，金屬彈簧延伸到塑膠外殼外部是一條比較細的金屬線，因此在晃動的時候，內部互相接觸進而短路導電，原理和之前所提到的按鈕類似，只是震動開關利用震動的方式，控制電路的開或關。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/shake-button.html\">\n\n<meta property=\"og:title\" content=\"教學範例 11：震動開關改變網頁數值\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/ttutorial-11-shock-button.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-11-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-11-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-11-\">教學範例 11：震動開關改變網頁數值</h1>\n<p>震動開關的結構如下圖所示，裡頭有一個金屬導電彈簧以及金屬導電腳，金屬彈簧延伸到塑膠外殼外部是一條比較細的金屬線，因此在晃動的時候，內部互相接觸進而短路導電，原理和之前所提到的按鈕類似，只是震動開關利用震動的方式，控制電路的開或關。</p>\n<div class=\"buy-this\">\n    <span>震動開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<p><img src=\"../img/tutorials/tutorial-11-07.jpg\" alt=\"\"></p>\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/shock-1\">https://blockly.webduino.io/?page=tutorials/shock-1</a> </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Xv85frAw4uI\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>震動開關有一粗一細的針腳，粗的針腳接 11，細的針腳接 3.3V，為了避免開關開的時候瞬間短路，在電路裡頭加上一個電阻，按照下圖的接法與 GND 相連，在把震動開關放上麵包板時，可以清楚地看到一粗一細的針腳，不用擔心細的針腳無法感應，與粗的針腳同樣安插進入麵包板內即可。</p>\n<p>馬克一號接線示意圖：\n<img src=\"../img/tutorials/tutorial-11-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：<br><img src=\"../img/tutorials/tutorial-11-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-11-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-11-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>震動開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「顯示文字」來顯示按鈕開關當下數字，增加以後的數字也會不斷累加出來，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」。</p>\n<p><img src=\"../img/tutorials/tutorial-11-09.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入震動開關積木，名稱設定為 shock，腳位設定為 11。</p>\n<p><img src=\"../img/tutorials/tutorial-11-06.jpg\" alt=\"\"></p>\n<p>放入一個「變數」的積木，選擇「新變量」設定新的變量名稱，並且賦予這個變量數值 0 ( 使用數學式積木 )。</p>\n<p><img src=\"../img/tutorials/tutorial-11-08.jpg\" alt=\"\"></p>\n<p>接著放入偵測到震動開關通路的積木，裡面擺入一個數學式，內容為「a = a + 1」，這表示每次偵測到震動開關通電時，a 的數值就會加 1，同時把 a 顯示在網頁裡。</p>\n<p><img src=\"../img/tutorials/tutorial-11-10.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，輕觸震動開關，就會看到數字往上開始累加上去了。( 解答：<a href=\"https://blockly.webduino.io/#-K7A61JY3A5XBRan10Kz\">https://blockly.webduino.io/#-K7A61JY3A5XBRan10Kz</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-11-11.jpg\" alt=\"\"></p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/suyam/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裡頭有一個 span，負責顯示文字。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript 和按鈕開關類似，都是使用 <code>on</code> 的方法，只是裡面如果是 <code>high</code> 就是通電，<code>low</code> 就是斷電，通電時讓 a = a + 1，然後用 <code>innerHTML</code> 來顯示。</p>\n<pre><code>var shock;\nvar a;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  shock = getShock(board, 11);\n  a = 0;\n  document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = a;\n  shock.on(&quot;high&quot;,function(){\n    console.log(&quot;high&quot;);\n      a = a + 1;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = a;\n\n  });\n});\n</code></pre><p>以上就是利用震動開關，來增加數值並顯示在網頁上。<br>完整程式碼：<a href=\"http://bin.webduino.io/suyam/edit?html,css,js,output\">http://bin.webduino.io/suyam/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7A61JY3A5XBRan10Kz\">https://blockly.webduino.io/#-K7A61JY3A5XBRan10Kz</a></p>\n<h2 id=\"-\">震動開關的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/shock-2#-Jw1KUKUyvZIS_b4pQJ9\">Webduino Blockly 課程 10-2：震動按鈕開關改變圖片位置</a></p>\n<div class=\"buy-this\">\n    <span>震動開關相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<!-- @@close-->"},"tutorial-12-sound-sensor":{"tag":"tutorial","src":"tutorial-12-sound-sensor.html","title":"聲音偵測點亮 LED 與網頁燈泡","banner":"tutorial-12-01.jpg","img":"tutorial-12-01s.jpg","date":20150603,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 12：聲音偵測點亮 LED 與網頁燈泡 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"聲音偵測傳感器類似一個微型的麥克風，不過它的功能並不如麥克風一般的強大，主要作用為偵測是否有聲音，在聲音偵測傳感器上頭有一個小型的十字旋鈕，可以用螺絲起子旋轉調整零敏度，靈敏度如果太高，可能連同一些風吹草動的聲音都會偵測到，靈敏度過低可能拍手拍得再大聲都偵測不到。\">\n\n<meta itemprop=\"description\" content=\"聲音偵測傳感器類似一個微型的麥克風，不過它的功能並不如麥克風一般的強大，主要作用為偵測是否有聲音，在聲音偵測傳感器上頭有一個小型的十字旋鈕，可以用螺絲起子旋轉調整零敏度，靈敏度如果太高，可能連同一些風吹草動的聲音都會偵測到，靈敏度過低可能拍手拍得再大聲都偵測不到。\">\n\n<meta property=\"og:description\" content=\"聲音偵測傳感器類似一個微型的麥克風，不過它的功能並不如麥克風一般的強大，主要作用為偵測是否有聲音，在聲音偵測傳感器上頭有一個小型的十字旋鈕，可以用螺絲起子旋轉調整零敏度，靈敏度如果太高，可能連同一些風吹草動的聲音都會偵測到，靈敏度過低可能拍手拍得再大聲都偵測不到。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/sensor/sound.html\">\n\n<meta property=\"og:title\" content=\"教學範例 12：聲音偵測點亮 LED 與網頁燈泡\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-12-sound-sensor.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-12-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-12-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-12-led-\">教學範例 12：聲音偵測點亮 LED 與網頁燈泡</h1>\n<p>聲音偵測傳感器類似一個微型的麥克風，不過它的功能並不如麥克風一般的強大，主要作用為偵測是否有聲音，在聲音偵測傳感器上頭有一個小型的十字旋鈕，可以用螺絲起子旋轉調整零敏度，靈敏度如果太高，可能連同一些風吹草動的聲音都會偵測到，靈敏度過低可能拍手拍得再大聲都偵測不到，而且由於聲音傳感器本身有傳輸的時間差，因此在接收到聲音後也會有些微的延遲現象。這個範例將會利用聲音偵測傳感器，當偵測到有聲音，就自動點亮 LED 燈，同時也會點亮網頁裡頭的燈泡。</p>\n<div class=\"buy-this\">\n    <span>聲音偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/sound-2\">https://blockly.webduino.io/?page=tutorials/sound-2</a> </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/0NFEsS-FvMw\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>首先把聲音偵測傳感器和 LED 燈接在麵包板上，聲音偵測傳感器的 +5V 接在開發板的 VCC，GND 接在 GND，Out 則接在 10 的腳位，然後再用電線將 GND 引出給 LED 的短腳使用，LED 的長腳接在 9 的腳位。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-12-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-12-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-12-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-12-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>聲音偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「點擊燈泡」來跟 LED 燈互相搭配，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「點擊燈泡」。</p>\n<p><img src=\"../img/tutorials/tutorial-12-06.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入聲音偵測積木，名稱設定為 sound，腳位設定為 10，再放入 LED 積木，名稱設定為 led，腳位設定為 9。</p>\n<p><img src=\"../img/tutorials/tutorial-12-07.jpg\" alt=\"\"></p>\n<p>接著放入有偵測到聲音變化的積木，如果有偵測到，就點亮 LED 燈同時也把網頁裡的燈泡圖片換成發亮的燈泡。</p>\n<p><img src=\"../img/tutorials/tutorial-12-08.jpg\" alt=\"\"></p>\n<p>因為偵測到聲音和沒有偵測到聲音有可能會同時發生 ( 因為可能像拍手一樣，只發出一個聲響後就停了 )，所以我們要多放入一個「沒有」偵測到聲音變化的積木，延遲一秒後觸發動作，這樣如果一秒鐘之後沒有聲音，就會把 LED 燈和燈泡熄滅。</p>\n<p><img src=\"../img/tutorials/tutorial-12-09.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，對著聲音偵測傳感器拍手或發出聲音，就會看到 LED 燈和燈泡圖片亮起。( 解答：<a href=\"https://blockly.webduino.io/#-K7ACr4VwFNkORu2-3fS\">https://blockly.webduino.io/#-K7ACr4VwFNkORu2-3fS</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/padab/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>接著看到 HTML 的 body 裡頭，放入一個 id 為 demo-area-02-light 的圖片區域，裡面含有兩張分別是亮起的燈泡與不亮的燈泡圖片，目的在於點選的時候，圖片也會從不亮的燈泡轉變為亮起的燈泡。</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>控制燈泡圖片亮暗的是使用 CSS 的方式，用圖片顯示的切換 display:none; 來達到相關效果，下面是 CSS 的程式碼。</p>\n<pre><code>#demo-area-02-light img{\n  height:200px;\n  display:none;\n}\n#demo-area-02-light.on #demo-area-02-on{\n  display:inline-block;\n}\n#demo-area-02-light.off #demo-area-02-off{\n  display:inline-block;\n}\n</code></pre><p>JavaScript 使用 on 這個方法來偵測，當第一個參數是 <code>detected</code> 就表示有偵測到聲音，就去做裡面的行為，如果是 <code>ended</code> 就是沒有偵測到有聲音，就把燈泡和 LED 給熄滅，燈泡圖片的熄滅純粹使用 <code>className</code> 來做切換。</p>\n<pre><code>var sound;\nvar led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  sound = getSound(board, 10);\n  led = getLed(board, 9);\n  sound.on(&quot;detected&quot;,function(){\n      led.on();\n    document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n\n  });\n  sound.on(&quot;ended&quot;,function(){\n    setTimeout(function(){\n      setTimeout(function () {\n      led.off();\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n    }, 1000);\n\n    },300);\n  });\n});\n</code></pre><p>以上就是利用聲音偵測傳感器，來偵測有無聲音變化並且點亮 LED 燈。<br>完整程式碼：<a href=\"http://bin.webduino.io/padab/edit?html,css,js,output\">http://bin.webduino.io/padab/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7ACr4VwFNkORu2-3fS\">https://blockly.webduino.io/#-K7ACr4VwFNkORu2-3fS</a></p>\n<h2 id=\"-\">聲音偵測傳感器的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/sound-1#-JvxeaQ60xcOYLuXKCke\">Webduino Blockly 課程 7-1：偵測聲音</a></p>\n<div class=\"buy-this\">\n    <span>聲音偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-13-buzzer":{"tag":"tutorial","src":"tutorial-13-buzzer.html","title":"蜂鳴器播放自製音樂","banner":"tutorial-13-01.jpg","img":"tutorial-13-01s.jpg","date":20150604,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 13：蜂鳴器播放自製音樂 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"蜂鳴器是一個可以產生聲音信號的裝置，使用直流電供電，接通訊號源之後，音訊信號電流通過電磁線圈，使電磁線圈產生磁場，造成 振動膜片週期性地振動發聲，而 Webduino 更可以藉由 HTML5 Attribute 來填入音符代碼，每個代碼都會對應到一個數值，這個數值相對應蜂鳴器聲音的頻率，因此藉由純粹的 HTML5 或 javascript 就可以編輯音樂，透過蜂鳴器發聲。\">\n\n<meta itemprop=\"description\" content=\"蜂鳴器是一個可以產生聲音信號的裝置，使用直流電供電，接通訊號源之後，音訊信號電流通過電磁線圈，使電磁線圈產生磁場，造成 振動膜片週期性地振動發聲，而 Webduino 更可以藉由 HTML5 Attribute 來填入音符代碼，每個代碼都會對應到一個數值，這個數值相對應蜂鳴器聲音的頻率，因此藉由純粹的 HTML5 或 javascript 就可以編輯音樂，透過蜂鳴器發聲。\">\n\n<meta property=\"og:description\" content=\"蜂鳴器是一個可以產生聲音信號的裝置，使用直流電供電，接通訊號源之後，音訊信號電流通過電磁線圈，使電磁線圈產生磁場，造成 振動膜片週期性地振動發聲，而 Webduino 更可以藉由 HTML5 Attribute 來填入音符代碼，每個代碼都會對應到一個數值，這個數值相對應蜂鳴器聲音的頻率，因此藉由純粹的 HTML5 或 javascript 就可以編輯音樂，透過蜂鳴器發聲。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/buzzer.html\">\n\n<meta property=\"og:title\" content=\"教學範例 13：蜂鳴器播放自製音樂\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-13-buzzer.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-13-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-13-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-13-\">教學範例 13：蜂鳴器播放自製音樂</h1>\n<p>蜂鳴器是一個可以產生聲音信號的裝置，使用直流電供電，接通訊號源之後，音訊信號電流通過電磁線圈，使電磁線圈產生磁場，造成 振動膜片週期性地振動發聲，而 Webduino 更可以藉由 HTML5 Attribute 來填入音符代碼，每個代碼都會對應到一個數值，這個數值相對應蜂鳴器聲音的頻率，因此藉由純粹的 HTML5 或 javascript 就可以編輯音樂，透過蜂鳴器發聲。</p>\n<div class=\"buy-this\">\n    <span>蜂鳴器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/buzzer-1\">https://blockly.webduino.io/?page=tutorials/buzzer-1</a> </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/StNG2NHS240\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>蜂鳴器在電路板的附近，有標示「+」和「-」的符號，「-」接在開發板的 GND，「+」接在 11 的腳位 ( 其實接反也沒關係 )，可以用杜邦線接出來，如果是馬克 1 號，也可以直接安插在上面。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-13-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-13-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-13-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-13-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>蜂鳴器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「網頁按鈕」來點選不同按鈕播放不同音樂，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「按鈕行為」，這邊的按鈕跟實體的按鈕開關是不一樣的，這邊的按鈕指的是網頁上面的按鈕。</p>\n<p><img src=\"../img/tutorials/tutorial-13-05.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入蜂鳴器積木，名稱設定為 buzzer，腳位設定為 11。</p>\n<p><img src=\"../img/tutorials/tutorial-13-06.jpg\" alt=\"\"></p>\n<p>再來建立我們的第一首音樂，放入「建立音樂」的積木，名稱命名為 m1，裏頭擺入音符與節奏，「音符」第一個下拉選單有「無聲、C、CS、D、DS、E、F、FS、G、GS、A、AS、B」，可以想像成鋼琴的黑鍵與白鍵，有 S 的就是黑鍵，第二個下拉選單就是有幾個八度音，這裏可以設定七個八度音，數字越大聲越高，「節奏」就是幾分之一秒，最少可以到 1/10 秒。</p>\n<p><img src=\"../img/tutorials/tutorial-13-07.jpg\" alt=\"\"></p>\n<p>建立了音樂，接著就設定按下按鈕 1 的事件，當按下按鈕 1，就用 buzzer 播放 m1。</p>\n<p><img src=\"../img/tutorials/tutorial-13-08.jpg\" alt=\"\"></p>\n<p>除了一個個放入音符和節奏外，也可以直接用輸入的方式，這裏就只是把剛剛的音符與節奏，合併成兩個欄位，如果節奏沒有按照音符數量填寫 ( 如果節奏比較少 )，則多出來的音符就會用最後一個節奏的時間去播放，用這種方式做的第二首音樂 m2，點選按鈕 2 來播放。</p>\n<p><img src=\"../img/tutorials/tutorial-13-09.jpg\" alt=\"\"></p>\n<p>接著按下按鈕 3 的事件，這裏就用同樣做音樂的方法作首 m3 的音樂，內容就直接選一首資料庫的音樂放入。</p>\n<p><img src=\"../img/tutorials/tutorial-13-10.jpg\" alt=\"\"></p>\n<p>按鈕 4 綁定停止播放的行為。</p>\n<p><img src=\"../img/tutorials/tutorial-13-11.jpg\" alt=\"\"></p>\n<p>到這邊大致上已經完成了一個點選按鈕控制播放的蜂鳴器程式積木，但最後一步我們要在按鈕 1 到 3 多加一段停止播放的行為，避免按下按鈕的時候，如果前一首還沒播完，就會重疊在一起播放。</p>\n<p><img src=\"../img/tutorials/tutorial-13-12.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，分別按下不同按鈕，就會聽到蜂鳴器播放出不同的音樂。( 解答：<a href=\"https://blockly.webduino.io/#-KDEaW-S-kRRaEkkyRGH\">https://blockly.webduino.io/#-KDEaW-S-kRRaEkkyRGH</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"https://bin.webduino.io/lihov/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裡有五個按鈕，分別有各自的 id，屆時就可以由 id 來判斷按下哪顆按鈕。</p>\n<pre><code>&lt;button id=&quot;demo-area-05-btn1&quot; class=&quot;db5&quot;&gt;按鈕 1&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn2&quot; class=&quot;db5&quot;&gt;按鈕 2&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn3&quot; class=&quot;db5&quot;&gt;按鈕 3&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn4&quot; class=&quot;db5&quot;&gt;按鈕 4&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn5&quot; class=&quot;db5&quot;&gt;按鈕 5&lt;/button&gt;\n</code></pre><p>JavaScript 看起來很多，但實際上很單純，先看到 m1 這首歌，其實就是建立兩個陣列 ( notes 和 tempos )，然後把音符和節奏分別拋到這兩個陣列裡，一開始的程式就是音樂播放的主程式，可以清楚地看到裡面放入了兩個物件，分別是 notes 和 tempos，而這兩個物件內容都是陣列。</p>\n<pre><code>var buzzer;\nvar m1;\nvar m2;\nvar m3;\n\nfunction buzzer_music(m) {\n  var musicNotes = {};\n  musicNotes.notes = [];\n  musicNotes.tempos = [];\n  if(m.length&gt;1){\n    for(var i=0; i&lt;m.length; i++){\n      if(Array.isArray(m[i].notes)){\n        var cn = musicNotes.notes.concat(m[i].notes);\n        musicNotes.notes = cn;\n      }else{\n        musicNotes.notes.push(m[i].notes);\n      }\n      if(Array.isArray(m[i].tempos)){\n        var ct = musicNotes.tempos.concat(m[i].tempos);\n        musicNotes.tempos = ct;\n      }else{\n        musicNotes.tempos.push(m[i].tempos);\n      }\n    }\n  }else{\n    musicNotes.notes = [m[0].notes];\n    musicNotes.tempos = [m[0].tempos];\n  }\n  return musicNotes;\n}\n</code></pre><p>接著看到開發板的程式，可以看到我們建立的音樂，就是把一串陣列丟給這首音樂的 notes 和 tempos 物件，如此一來蜂鳴器就會按照這些音符節奏播放。</p>\n<pre><code>boardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  buzzer = getBuzzer(board, 11);\n  m1 = buzzer_music([  {notes:&quot;C6&quot;,tempos:&quot;3&quot;},{notes:&quot;D6&quot;,tempos:&quot;7&quot;},{notes:&quot;E6&quot;,tempos:&quot;3&quot;},{notes:&quot;F6&quot;,tempos:&quot;7&quot;}]);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    buzzer.stop();\n    buzzer.play(m1.notes, m1.tempos);\n  });\n  m2 = buzzer_music([  {notes : [&quot;C6&quot;,&quot;D6&quot;,&quot;E6&quot;,&quot;F6&quot;,&quot;G6&quot;,&quot;A6&quot;,&quot;B6&quot;] , tempos : [&quot;8&quot;,&quot;8&quot;,&quot;8&quot;,&quot;8&quot;,&quot;8&quot;,&quot;8&quot;,&quot;8&quot;] }]);\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    buzzer.stop();\n    buzzer.play(m2.notes, m2.tempos);\n  });\n  m3 = buzzer_music([  {notes:[&quot;E7&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;G7&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;0&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;E6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;A6&quot;,&quot;0&quot;,&quot;B6&quot;,&quot;0&quot;,&quot;AS6&quot;,&quot;A6&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;G7&quot;,&quot;A7&quot;,&quot;0&quot;,&quot;F7&quot;,&quot;G7&quot;,&quot;0&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;D7&quot;,&quot;B6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;0&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;E6&quot;,&quot;0&quot;,&quot;0&quot;,&quot;A6&quot;,&quot;0&quot;,&quot;B6&quot;,&quot;0&quot;,&quot;AS6&quot;,&quot;A6&quot;,&quot;0&quot;,&quot;G6&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;G7&quot;,&quot;A7&quot;,&quot;0&quot;,&quot;F7&quot;,&quot;G7&quot;,&quot;0&quot;,&quot;E7&quot;,&quot;0&quot;,&quot;C7&quot;,&quot;D7&quot;,&quot;B6&quot;,&quot;0&quot;,&quot;0&quot;] , tempos:[&quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;]}]);\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    buzzer.stop();\n    buzzer.play(m3.notes, m3.tempos);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    buzzer.stop();\n  });\n});\n</code></pre><p>以上就是利用蜂鳴器和網頁的按鈕，來製作與播放音樂。<br>完整程式碼：<a href=\"https://bin.webduino.io/lihov/edit?html,css,js,output\">https://bin.webduino.io/lihov/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-KDEaW-S-kRRaEkkyRGH\">https://blockly.webduino.io/#-KDEaW-S-kRRaEkkyRGH</a></p>\n<h2 id=\"-\">蜂鳴器的延伸教學：</h2>\n<p><a href=\"http://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/buzzer-2#-KDCNtS1o_l57m9Aq46h\">Webduino Blockly 課程 9-2：蜂鳴器播放音樂</a><br><a href=\"http://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/buzzer-3#-KDCOHhM5eAHX6GbAkw8\">Webduino Blockly 課程 9-3：切換音樂，用蜂鳴器播放</a><br><a href=\"http://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/buzzer-4#-KDCOxfqbxJmc3MaY_rg\">Webduino Blockly 課程 9-4：蜂鳴器的播放、暫停、停止 ( 按鈕開關控制 ) </a></p>\n<div class=\"buy-this\">\n    <span>蜂鳴器相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-14-relay":{"tag":"tutorial","src":"tutorial-14-relay.html","title":"繼電器控制風扇旋轉","banner":"tutorial-14-01.jpg","img":"tutorial-14-01s.jpg","date":20150604,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 14：繼電器控制風扇旋轉 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"繼電器是一種電子控制器件，它具有控制系統和被控制系統，通常應用於自動控制電路中，是用較小的電流去控制較大電流的一種「自動開關」，在電路中起著自動調節、安全保護、轉換電路等作用，當我們開始用 Webduino 控制繼電器，就可以非常簡單的做出利用網頁控制的智慧插座或自動開關。\">\n\n<meta itemprop=\"description\" content=\"繼電器是一種電子控制器件，它具有控制系統和被控制系統，通常應用於自動控制電路中，是用較小的電流去控制較大電流的一種「自動開關」，在電路中起著自動調節、安全保護、轉換電路等作用，當我們開始用 Webduino 控制繼電器，就可以非常簡單的做出利用網頁控制的智慧插座或自動開關。\">\n\n<meta property=\"og:description\" content=\"繼電器是一種電子控制器件，它具有控制系統和被控制系統，通常應用於自動控制電路中，是用較小的電流去控制較大電流的一種「自動開關」，在電路中起著自動調節、安全保護、轉換電路等作用，當我們開始用 Webduino 控制繼電器，就可以非常簡單的做出利用網頁控制的智慧插座或自動開關。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/relay.html\">\n\n<meta property=\"og:title\" content=\"教學範例 14：繼電器控制風扇旋轉\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-14-relay.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-14-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-14-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-14-\">教學範例 14：繼電器控制風扇旋轉</h1>\n<p>繼電器是一種電子控制器件，它具有控制系統和被控制系統，通常應用於自動控制電路中，是用較小的電流去控制較大電流的一種「自動開關」，在電路中起著自動調節、安全保護、轉換電路等作用，當我們開始用 Webduino 控制繼電器，就可以非常簡單的做出利用網頁控制的智慧插座或自動開關。</p>\n<div class=\"buy-this\">\n    <span>繼電器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Z3x_qW7fXzM\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>開始接線前，先認識一下繼電器，繼電器的內部構造有一個電磁鐵，在沒有訊號提供時，內部的簧片會在上方，這時候「常閉」與「公共端」是通路，「常開」和「公共端」是斷路，當電磁鐵透過訊號通電，就會將內部的簧片往下吸附，此時「常閉」與「公共端」變成斷路，「常開」和「公共端」變成通路，藉由這個方式，我們就可以很容易的控制電器用品的開和關。</p>\n<p><img src=\"../img/tutorials/tutorial-14-02.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-14-03.jpg\" alt=\"\"></p>\n<p>因為是用小電流控制大電流，所以在這個範例會用到兩組電源，其中一組電源提供 Webduino 開發板使用，另外一組電源則是供應繼電器使用，在繼電器上頭有紅燈綠燈的一側，具有三個腳位，將 VCC 接在 Webduino 3.3V 的腳位，GND 接在 GND 的腳位，IN 接在 9 的位置，繼電器的另外一側需要用十字螺絲起子來接線 ( 因為這一側通常會接大電流的電器 )，將風扇的其中一條電線接在繼電器的「常開」，另外一條電線和電源接上，而電源的另外一條線則接在繼電器的「公共端」。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-14-04.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-14-04-fly.jpg\" alt=\"\"></p>\n<p>繼電器的大電流一端的接線，利用十字螺絲起子，將電線旋緊。</p>\n<p><img src=\"../img/tutorials/tutorial-14-05.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-14-08.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-14-06.jpg\" alt=\"\"></p>\n<p>斷路時繼電器會亮紅色的燈，通路時會亮綠色的燈。</p>\n<p><img src=\"../img/tutorials/tutorial-14-07.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>繼電器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「點擊燈泡」來作為繼電器的開關，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「點擊燈泡」。</p>\n<p><img src=\"../img/tutorials/tutorial-14-09.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入繼電器積木，名稱設定為 relay，腳位設定為 9。</p>\n<p><img src=\"../img/tutorials/tutorial-14-10.jpg\" alt=\"\"></p>\n<p>接著放入點擊燈泡的積木，裏頭放入邏輯積木，如果燈泡是亮，就執行某些動作，如果燈泡是滅，就執行另外的動作。</p>\n<p><img src=\"../img/tutorials/tutorial-14-11.jpg\" alt=\"\"></p>\n<p>如果燈泡是亮，點擊時就會關閉繼電器和燈泡圖片，反之就是打開繼電器和燈泡圖片。</p>\n<p><img src=\"../img/tutorials/tutorial-14-12.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以用網頁上的燈泡作為繼電器的開關，控制風扇的運轉了。( 解答：<a href=\"https://blockly.webduino.io/#-K7AhYxEGXf0cAfMTzqW\">https://blockly.webduino.io/#-K7AhYxEGXf0cAfMTzqW</a> )</p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/tecig/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>接著看到 HTML 的 body 裡頭，放入一個 id 為 demo-area-02-light 的圖片區域，裡面含有兩張分別是亮起的燈泡與不亮的燈泡圖片，目的在於點選的時候，圖片也會從不亮的燈泡轉變為亮起的燈泡。</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>控制燈泡圖片亮暗的是使用 CSS 的方式，用圖片顯示的切換 display:none; 來達到相關效果，下面是 CSS 的程式碼。</p>\n<pre><code>#demo-area-02-light img{\n  height:200px;\n  display:none;\n}\n#demo-area-02-light.on #demo-area-02-on{\n  display:inline-block;\n}\n#demo-area-02-light.off #demo-area-02-off{\n  display:inline-block;\n}\n</code></pre><p>從 JavaScript 可以看到，其實繼電器和 LED 燈非常類似，只是用 on 和 off 作為開和關使用，控制燈泡圖片就也只是用了 <code>className</code> 的切換而已。</p>\n<pre><code>var relay;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  relay = getRelay(board, 9);\n  document.getElementById(&quot;demo-area-02-light&quot;).addEventListener(&quot;click&quot;,function(){\n    if (document.getElementById(&quot;demo-area-02-light&quot;).className == &quot;on&quot;) {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n      relay.off();\n    } else {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n      relay.on();\n    }\n  });\n});\n</code></pre><p>以上就是利用網頁的燈泡圖片，來控制繼電器的開關，進一步控制電器。<br>完整程式碼：<a href=\"http://bin.webduino.io/tecig/edit?html,css,js,output\">http://bin.webduino.io/tecig/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7AhYxEGXf0cAfMTzqW\">https://blockly.webduino.io/#-K7AhYxEGXf0cAfMTzqW</a></p>\n<h2 id=\"-\">繼電器的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/relay-1#-K-WQYB34rMa4f2GgSam\">Webduino Blockly 課程 11-1：控制繼電器</a> </p>\n<div class=\"buy-this\">\n    <span>繼電器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> \n\n\n<!-- @@close-->"},"tutorial-15-pir-led":{"tag":"tutorial","src":"tutorial-15-pir-led.html","title":"人體紅外線偵測控制 LED","banner":"tutorial-15-01.jpg","img":"tutorial-15-01s.jpg","date":20150604,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 15：人體紅外線偵測控制 LED :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"人體紅外線偵測傳感器 ( PIR ) 可以偵測紅外線的反應變化，當接收到人體發射的紅外線，就會觸發相對應的動作，這個範例利用 Webduino，在人體紅外線傳感器接收到訊號時，觸發網頁的燈泡亮起，同時也讓 LED 燈發光。\">\n\n<meta itemprop=\"description\" content=\"人體紅外線偵測傳感器 ( PIR ) 可以偵測紅外線的反應變化，當接收到人體發射的紅外線，就會觸發相對應的動作，這個範例利用 Webduino，在人體紅外線傳感器接收到訊號時，觸發網頁的燈泡亮起，同時也讓 LED 燈發光。\">\n\n<meta property=\"og:description\" content=\"人體紅外線偵測傳感器 ( PIR ) 可以偵測紅外線的反應變化，當接收到人體發射的紅外線，就會觸發相對應的動作，這個範例利用 Webduino，在人體紅外線傳感器接收到訊號時，觸發網頁的燈泡亮起，同時也讓 LED 燈發光。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/sensor/pir.html\">\n\n<meta property=\"og:title\" content=\"教學範例 15：人體紅外線偵測控制 LED\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-15-pir-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-15-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-15-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-15-led\">教學範例 15：人體紅外線偵測控制 LED</h1>\n<p>人體紅外線偵測傳感器 ( PIR ) 可以偵測紅外線的反應變化，當接收到人體發射的紅外線，就會觸發相對應的動作，這個範例利用 Webduino，在人體紅外線傳感器接收到訊號時，觸發網頁的燈泡亮起，同時也讓 LED 燈發光。</p>\n<div class=\"buy-this\">\n    <span>人體紅外線偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/pir-2\">https://blockly.webduino.io/?page=tutorials/pir-2</a> </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/3873nza-ywo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>我們將人體紅外線偵測傳感器的 VCC 接在 Webduino 開發板 VCC 的位置，GND 接在 GND 的位置，訊號源接在 11 號腳位，LED 燈與人體紅外線偵測傳感器共用 GND，長腳則接在 10 的位置，人體紅外線偵測傳感器上頭有兩顆旋鈕，SX 是靈敏度，TX 是偵測到訊號後延遲的時間，可用十字螺絲起子或用手指進行調整。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-15-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-15-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-15-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-15-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-15-05.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-15-06.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>人體紅外線偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「點擊燈泡」來跟 LED 燈互相搭配，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「點擊燈泡」。</p>\n<p><img src=\"../img/tutorials/tutorial-15-07.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入人體紅外線偵測積木，名稱設定為 pir，腳位設定為 11，LED 的積木名稱設定為 led，腳位設定 10。</p>\n<p><img src=\"../img/tutorials/tutorial-15-08.jpg\" alt=\"\"></p>\n<p>接著放入「有」偵測到人體紅外線的積木，裡面放入點亮 LED 和燈泡的積木，反之「沒有」偵測到人體紅外線的積木，就是熄滅 LED 燈和燈泡圖案。</p>\n<p><img src=\"../img/tutorials/tutorial-15-09.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以用遮蔽物遮住人體紅外線傳感器，把遮蔽物移開並用手在傳感器前面晃呀晃，就可以看到 LED 燈和燈泡圖片被點亮。( 解答：<a href=\"https://blockly.webduino.io/#-K7AzpcgHb2gua5SK_N8\">https://blockly.webduino.io/#-K7AzpcgHb2gua5SK_N8</a></p>\n<h2 id=\"-\">程式碼解析 ( <a href=\"http://bin.webduino.io/labu/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</h2>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>接著看到 HTML 的 body 裡頭，放入一個 id 為 demo-area-02-light 的圖片區域，裡面含有兩張分別是亮起的燈泡與不亮的燈泡圖片，目的在於點選的時候，圖片也會從不亮的燈泡轉變為亮起的燈泡。</p>\n<pre><code>&lt;div id=&quot;demo-area-02-light&quot; class=&quot;off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/off.png&quot; id=&quot;demo-area-02-off&quot;&gt;\n  &lt;img src=&quot;https://blockly.webduino.io/media/on.png&quot; id=&quot;demo-area-02-on&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>控制燈泡圖片亮暗的是使用 CSS 的方式，用圖片顯示的切換 display:none; 來達到相關效果，下面是 CSS 的程式碼。</p>\n<pre><code>#demo-area-02-light img{\n  height:200px;\n  display:none;\n}\n#demo-area-02-light.on #demo-area-02-on{\n  display:inline-block;\n}\n#demo-area-02-light.off #demo-area-02-off{\n  display:inline-block;\n}\n</code></pre><p>JavaScript 主要用到兩個人體紅外線偵測的 API：<code>detected</code>、<code>ended</code>，分別表示偵測到紅外線以及結束偵測，內容放上對應的事件即可。</p>\n<pre><code>var pir;\nvar led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  pir = getPir(board, 11);\n  led = getLed(board, 10);\n  pir.on(&quot;detected&quot;,function(){\n    led.on();\n    document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n\n  });\n  pir.on(&quot;ended&quot;,function(){\n    led.off();\n    document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n\n  });\n});\n</code></pre><p>以上就是利用人體紅外線偵測傳感器，來偵測有無人體紅外線變化並且點亮 LED 燈。<br>完整程式碼：<a href=\"http://bin.webduino.io/labu/edit?html,css,js,output\">http://bin.webduino.io/labu/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7AzpcgHb2gua5SK_N8\">https://blockly.webduino.io/#-K7AzpcgHb2gua5SK_N8</a></p>\n<h2 id=\"-\">人體紅外線偵測傳感器的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/pir-1#-JvxRwAXj4ccyigeuI8o\">Webduino Blockly 課程 6-1：偵測人體紅外線</a> </p>\n<div class=\"buy-this\">\n    <span>人體紅外線偵測相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> \n\n\n<!-- @@close-->"},"tutorial-16-servo":{"tag":"tutorial","src":"tutorial-16-servo.html","title":"控制伺服馬達轉動角度","banner":"tutorial-16-01.jpg","img":"tutorial-16-01s.jpg","date":20150625,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 16：控制伺服馬達轉動角度 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"人體紅外線偵測傳感器 ( PIR ) 可以偵測紅外線的反應變化，當接收到人體發射的紅外線，就會觸發相對應的動作，這個範例利用 Webduino，在人體紅外線傳感器接收到訊號時，觸發網頁的燈泡亮起，同時也讓 LED 燈發光。\">\n\n<meta itemprop=\"description\" content=\"人體紅外線偵測傳感器 ( PIR ) 可以偵測紅外線的反應變化，當接收到人體發射的紅外線，就會觸發相對應的動作，這個範例利用 Webduino，在人體紅外線傳感器接收到訊號時，觸發網頁的燈泡亮起，同時也讓 LED 燈發光。\">\n\n<meta property=\"og:description\" content=\"人體紅外線偵測傳感器 ( PIR ) 可以偵測紅外線的反應變化，當接收到人體發射的紅外線，就會觸發相對應的動作，這個範例利用 Webduino，在人體紅外線傳感器接收到訊號時，觸發網頁的燈泡亮起，同時也讓 LED 燈發光。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/servo.html\">\n\n<meta property=\"og:title\" content=\"教學範例 16：控制伺服馬達轉動角度\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-16-servo.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-16-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-16-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-16-\">教學範例 16：控制伺服馬達轉動角度</h1>\n<p>伺服馬達之所以叫做「伺服」馬達，是因為「伺服 servo」表示馬達會依照指示命令動作，由程式要馬達轉幾度，馬達就會轉幾度，但伺服馬達有機械結構上的限制，旋轉的角度是 180 度，但並非完全的 180 度，可能是 1 度到 180 度，或是 -2 度到 177 度都有可能，不過這些誤差都不影響這個範例的實作，這個範例將會介紹如何用 Blockly、HTML 與 javascript 去控制伺服馬達。</p>\n<div class=\"buy-this\">\n    <span>伺服馬達相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?page=tutorials/servo-1\">https://blockly.webduino.io/?page=tutorials/servo-1</a> </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Dar2pSWCSL8\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>由於伺服馬達需要的電流量較大，因此我們必須採用獨立電源，才能供應伺服馬達足夠的電流量 ( 其實也可以用電晶體的方式，但還是用獨立電源比較容易上手 )，伺服馬達具有三條電線。紅色的為正電，深咖啡色是接地 GND，橘色的則是訊號線，我們利用麵包板，將獨立電源、Webduino 開發板和伺服馬達共地 ( GND 接在一起 )，伺服馬達的訊號源接在 11 的腳位即可。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-16-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-16-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-16-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-16-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-16-05.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>伺服馬達相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「拉霸滑桿」來控制伺服馬達旋轉角度，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「拉霸操作」。</p>\n<p><img src=\"../img/tutorials/tutorial-16-06.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入伺服馬達積木，名稱設定為 servo，腳位設定為 11。</p>\n<p><img src=\"../img/tutorials/tutorial-16-07.jpg\" alt=\"\"></p>\n<p>接著放入「拉霸設定」的積木，裡面可以設定最小值、最大值、每次拖拉的間距以及預設值，因為伺服馬達最多不會超過 180 度，所以最大值和最小值就用 0 到 180 度，設定完成後就放入「顯示數值」以及「伺服馬達旋轉角度」的積木。</p>\n<p><img src=\"../img/tutorials/tutorial-16-08.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，用滑鼠拖動拉霸滑桿，就會看到伺服馬達的旋轉角度跟著變化。( 解答：<a href=\"https://blockly.webduino.io/#-K7B3_Wn1LxGIYcrhejk\">https://blockly.webduino.io/#-K7B3_Wn1LxGIYcrhejk</a></p>\n<p>##範例解析 ( <a href=\"http://bin.webduino.io/xisa/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 放入一個 span 來顯示當前角度，並放入一個 type 為 range 的 input，這也就是我們的拉霸滑桿，裡面可以設定最大值 max、最小值 min、間距 step 和預設值 value。</p>\n<pre><code>數值：&lt;span id=&quot;demo-area-06-input-value&quot;&gt;90&lt;/span&gt;&lt;br&gt;\n拉霸：&lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;180&quot; step=&quot;5&quot; value=&quot;90&quot; id=&quot;demo-area-06-input&quot;&gt;\n</code></pre><p>JavaScript 利用<code>oninput</code>把拉霸改變的的數值 value 輸入給n伺服馬達的 angle，如此一來伺服馬達就會在拉霸改變的當下，一起旋轉角度。</p>\n<pre><code>var servo;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  servo = getServo(board, 11);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;min&quot;,0);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;max&quot;,180);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;step&quot;,5);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;value&quot;,90);\n  document.getElementById(&quot;demo-area-06-input&quot;).oninput = function(_value){\n    _value = this.value;\n    document.getElementById(&quot;demo-area-06-input-value&quot;).innerHTML = _value;\n    servo.angle = _value;\n  };\n});\n</code></pre><p>以上就是利用網頁拉霸滑桿，來控制伺服馬達的旋轉角度。<br>完整程式碼：<a href=\"http://bin.webduino.io/xisa/edit?html,css,js,output\">http://bin.webduino.io/xisa/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7B3_Wn1LxGIYcrhejk\">https://blockly.webduino.io/#-K7B3_Wn1LxGIYcrhejk</a></p>\n<h2 id=\"-\">人體紅外線偵測傳感器的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/servo-2#-Jw01xYLefgu_1IvUaVM\">Webduino Blockly 課程 8-2：使用按鈕開關控制伺服馬達</a></p>\n<div class=\"buy-this\">\n    <span>伺服馬達相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>  \n\n\n<!-- @@close-->"},"tutorial-17-photocell":{"tag":"tutorial","src":"tutorial-17-photocell.html","title":"光敏電阻獲取亮度數值","banner":"tutorial-17-01.jpg","img":"tutorial-17-01s.jpg","date":20160113,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 17：光敏電阻獲取亮度數值 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"光敏電阻常見於小夜燈裡面，光敏電阻主要是利用光電導效應的一種特殊的電阻，當有光線照射時，電阻內原本處於穩定狀態的電子受到激發，成為自由電子。所以光線越強，產生的自由電子也就越多，電阻就會越小，透過會變化的電阻值，進一步產生輸出強弱訊號。\">\n\n<meta itemprop=\"description\" content=\"光敏電阻常見於小夜燈裡面，光敏電阻主要是利用光電導效應的一種特殊的電阻，當有光線照射時，電阻內原本處於穩定狀態的電子受到激發，成為自由電子。所以光線越強，產生的自由電子也就越多，電阻就會越小，透過會變化的電阻值，進一步產生輸出強弱訊號。\">\n\n<meta property=\"og:description\" content=\"光敏電阻常見於小夜燈裡面，光敏電阻主要是利用光電導效應的一種特殊的電阻，當有光線照射時，電阻內原本處於穩定狀態的電子受到激發，成為自由電子。所以光線越強，產生的自由電子也就越多，電阻就會越小，透過會變化的電阻值，進一步產生輸出強弱訊號。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/sensor/photocell.html\">\n\n<meta property=\"og:title\" content=\"教學範例 17：光敏電阻獲取亮度數值\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-17-photocell.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-17-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-17-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-17-\">教學範例 17：光敏電阻獲取亮度數值</h1>\n<p>光敏電阻常見於小夜燈裡面，光敏電阻主要是利用光電導效應的一種特殊的電阻，當有光線照射時，電阻內原本處於穩定狀態的電子受到激發，成為自由電子。所以光線越強，產生的自由電子也就越多，電阻就會越小，透過會變化的電阻值，進一步產生輸出強弱訊號。</p>\n<div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/jSarWRDj7Gk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>由於每個光敏的電阻值範圍不同，有些甚至會趨近於 0，因此在接線上我們必須要用到一個普通電阻在線路裡頭，作為避免短路的「保護」作用，而光敏電阻的訊號腳會接在類比腳 ( A 開頭的腳位 )，這裏把訊號腳接在 A3 腳位，兩支腳都可當作訊號腳，若其中一支作為訊號腳，則另外一支就是 VCC 或 GND，這裡我們把另外一支腳接在 3.3V ( VCC )，訊號腳另外接一個電阻連到 GND ( VCC 和 GND 顛倒過來也可以，但數值也會跟著顛倒過來 )。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-17-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-17-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-17-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-17-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「顯示文字」來顯示光敏電阻數值，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」。</p>\n<p><img src=\"../img/tutorials/tutorial-17-05.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入光敏電阻積木，名稱設定為 photocell，腳位設定為 A3。</p>\n<p><img src=\"../img/tutorials/tutorial-17-06.jpg\" alt=\"\"></p>\n<p>接著放入「開始偵測」的積木，開始偵測之後，就可以顯示偵測到的數值。</p>\n<p><img src=\"../img/tutorials/tutorial-17-07.jpg\" alt=\"\"></p>\n<p>偵測的速率決定在開發板的類比取樣速度 ( 每塊開發板只會有一個類比取樣速率 )，我們可以從開發板的下拉選單中進行設定，這裏設定為 100ms ( 0.1 秒 )。</p>\n<p><img src=\"../img/tutorials/tutorial-17-08.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以看到光源強度已經轉換成數字呈現，用手去遮蔽光敏電阻更可以看出數值變化。( 解答：<a href=\"https://blockly.webduino.io/#-K7yYM3Gz3ZilYYbG2E0\">https://blockly.webduino.io/#-K7yYM3Gz3ZilYYbG2E0</a></p>\n<p><img src=\"../img/tutorials/tutorial-17-09.jpg\" alt=\"\"></p>\n<p>不過純粹的類比取出來的數值會有很多小數點，區間也可能不是我們要的區間 ( 例如我可能想要 0 到 100 之間的數值 )，這時候就要用到「進階功能」積木的「數值轉換」，它可以幫助我們做四捨五入以及轉換區間。</p>\n<p><img src=\"../img/tutorials/tutorial-17-10.jpg\" alt=\"\"></p>\n<p>把剛剛我們從有光到無光的數值大概記下來，填入「原始」的最大值與最小值，加上四捨五入，就可以得到相當漂亮的數字。</p>\n<p><img src=\"../img/tutorials/tutorial-17-11.jpg\" alt=\"\"></p>\n<p>完成後，同樣的，確認開發板上線後 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以看到光源強度已經轉換成數字呈現，這些數字也已經經過轉換，是 0 到 100 之間小數點兩位的數字囉。( 解答：<a href=\"https://blockly.webduino.io/#-K7yYHx909mnp_IAlGpO\">https://blockly.webduino.io/#-K7yYHx909mnp_IAlGpO</a></p>\n<p><img src=\"../img/tutorials/tutorial-17-12.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"http://bin.webduino.io/maqun/5/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 只需要一個 span 來顯示光敏電阻的數值。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript 裡面可以看到光敏電阻具有<code>on</code>的方法，表示開始偵測，偵測後在裡面回呼的函式有個 val 的數值就是光敏電阻接收到的值，再利用<code>innerHTML</code>顯示出來。</p>\n<pre><code>var photocell;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  photocell = getPhotocell(board, 3);\n  photocell.on(function(val){\n    photocell.detectedVal = val;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = photocell.detectedVal;\n  });\n});\n</code></pre><p>如果你使用進一步數值轉換的積木，就會發現多了一堆數學計算式，目的只是幫我們做數值轉換而已。</p>\n<pre><code>var photocell;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  photocell = getPhotocell(board, 3);\n  photocell.on(function(val){\n    photocell.detectedVal = val;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = Math.round(((photocell.detectedVal - (0.007)) * (1/((0.1407)-(0.007)))) * ((100)-(0)) + (0));\n  });\n});\n</code></pre><p>以上就是利用光敏電阻，將光源強度轉換成數值，進一步做數值的轉換。<br>完整程式碼：<a href=\"http://bin.webduino.io/maqun/5/edit?html,css,js,output\">http://bin.webduino.io/maqun/5/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7yYHx909mnp_IAlGpO\">https://blockly.webduino.io/#-K7yYHx909mnp_IAlGpO</a></p>\n<h2 id=\"-\">光敏電阻的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/photocell-1#-K0oVQzwFXfXTj5xmlrU\">Webduino Blockly 課程 12-1：控制光敏電阻</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/photocell-2#-K0objWF2mEVwsHYux8W\">Webduino Blockly 課程 12-2：使用光敏電阻點亮 LED 燈</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/photocell-3#-K2kvxmwFHNiGl0P-_7S\">Webduino Blockly 課程 12-3：轉換光敏 ( 可變 ) 電阻數值</a>  </p>\n<div class=\"buy-this\">\n    <span>光敏電阻相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-18-max7219":{"tag":"tutorial","src":"tutorial-18-max7219.html","title":"LED 點矩陣顯示圖形","banner":"tutorial-18-01.jpg","img":"tutorial-18-01s.jpg","date":20160113,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 18：LED 點矩陣顯示圖形 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"LED 點矩陣顧名思義，就是用許多 LED 燈所組成的元件，最常見到的就是在火車、公車...等大眾運輸裡常見的文字跑馬燈，在這個單位裡頭將會使用 8 × 8 的 LED 點矩陣，型號為 MAX7219，因此可以做出 8 × 8 的圖形或是文字。\">\n\n<meta itemprop=\"description\" content=\"LED 點矩陣顧名思義，就是用許多 LED 燈所組成的元件，最常見到的就是在火車、公車...等大眾運輸裡常見的文字跑馬燈，在這個單位裡頭將會使用 8 × 8 的 LED 點矩陣，型號為 MAX7219，因此可以做出 8 × 8 的圖形或是文字。\">\n\n<meta property=\"og:description\" content=\"LED 點矩陣顧名思義，就是用許多 LED 燈所組成的元件，最常見到的就是在火車、公車...等大眾運輸裡常見的文字跑馬燈，在這個單位裡頭將會使用 8 × 8 的 LED 點矩陣，型號為 MAX7219，因此可以做出 8 × 8 的圖形或是文字。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/maxmatrix.html\">\n\n<meta property=\"og:title\" content=\"教學範例 18：LED 點矩陣顯示圖形\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-18-max7219.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-18-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-18-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-18-led-\">教學範例 18：LED 點矩陣顯示圖形</h1>\n<p>LED 點矩陣顧名思義，就是用許多 LED 燈所組成的元件，最常見到的就是在火車、公車...等大眾運輸裡常見的文字跑馬燈，在這個單位裡頭將會使用 8 × 8 的 LED 點矩陣，型號為 MAX7219，因此可以做出 8 × 8 的圖形或是文字。</p>\n<div class=\"buy-this\">\n    <span>LED 點矩陣相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/nY5zBP7BLdo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>MAX7219 LED 點矩陣有五支接腳，分別是 VCC、GND、D in ( Dout )、CS ( 晶片選擇 ) 和 CLK ( 時脈 )，在這裡把 D in 接 7、CS 接 8，CLK 接 9，VCC 接 VCC ( 不要接 3.3V 怕電壓不夠 )，然後GND接GND的位置。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-18-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-18-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-18-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-18-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>LED 點矩陣相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用讓我們點擊網頁「按鈕」來用 LED 點矩陣顯示不同的圖案或動畫，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「按鈕行為」。 ( 請參考：<a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">韌體檔案燒錄教學</a>，選擇有 MaxMatrix 檔名的韌體 )</p>\n<p><img src=\"../img/tutorials/tutorial-18-05.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入 LED 點矩陣的積木，名稱設定為 matrix，腳位設定為 7、8、9。</p>\n<p><img src=\"../img/tutorials/tutorial-18-06.jpg\" alt=\"\"></p>\n<p>放入點擊按鈕 1 的積木，讓點擊按鈕 1 的時候，matrix 會顯示圖形，在 LED 點矩陣裡顯示的圖形是由「<strong>八組兩兩成對十六進位代碼組成 ( 共十六碼，可以更多，但須兩兩字母或數字成對 )</strong>」，如果要由圖形產生代碼，可以<strong>在積木上按「右鍵」，選擇「說明」</strong>，就會開啟代碼產生器網頁 ( <a href=\"http://webduinoio.github.io/demo/max7219/\">http://webduinoio.github.io/demo/max7219/</a> )。</p>\n<p><img src=\"../img/tutorials/tutorial-18-07.jpg\" alt=\"\"></p>\n<p>在代碼產生網頁裡，我們可以直接用滑鼠點選畫圖，或直接用下拉選單產生預設文字、數字或圖形，完成後點選「複製」，就可以將代碼複製起來，再貼回 Blockly 編輯工具即可。此外，代碼產生網頁還可以直接和你的裝置互動，在最上方 Board 的地方輸入裝置的 device ID，你畫的圖形就會直接出現在 LED 點矩陣裡。( 可以參考這段影片：<a href=\"https://www.youtube.com/watch?v=U3jEqpWve8I\">https://www.youtube.com/watch?v=U3jEqpWve8I</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-18-08.jpg\" alt=\"\"></p>\n<p>再來設定按鈕 2 的動作，這裏使用「跑馬燈」的積木，可以讓我們設定的圖案往左跑或是往右跑，比較特別的是，對於 LED 點矩陣來說，因為代碼是可以超過十六個字母或數字 ( <strong>須符合十六進位，並兩兩成對</strong> )，所以我們可以畫出很長的一串圖形，透過 LED 點矩陣實現跑馬燈。( 例如可以複製這段代碼，貼到 Blockly 裡執行看看會如何：「0c1e3e7c3e1e0c000c12224422120c00」 )</p>\n<p><img src=\"../img/tutorials/tutorial-18-09.jpg\" alt=\"\"></p>\n<p>在執行之前有個很重要的動作要先做，因為跑馬燈使用了動畫效果，所以在切換按鈕時，要先把動畫停止下來，這時候可以再按按鈕之前都先加入「停止動畫」的積木，避免動畫重疊播放。</p>\n<p><img src=\"../img/tutorials/tutorial-18-10.jpg\" alt=\"\"></p>\n<p>因為剛剛跑馬燈只能往左或往右，如果要做各種圖形組合的動畫，就需要用「列表」來製作，這裏第三個按鈕我們用「列表」來播動畫，然後第四個按鈕就把 LED 點矩陣關起來。</p>\n<p><img src=\"../img/tutorials/tutorial-18-11.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，點擊不同的按鈕，LED 點矩陣就會出現不同的圖案或動畫了。( 解答：<a href=\"https://blockly.webduino.io/#-K7z4OcyEOftPgFGh5PR\">https://blockly.webduino.io/#-K7z4OcyEOftPgFGh5PR</a></p>\n<p>##範例解析 ( <a href=\"http://bin.webduino.io/xoma/7/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裏頭放了五顆按鈕，大小樣式大家就可以自行去做設定。</p>\n<pre><code>&lt;button id=&quot;demo-area-05-btn1&quot; class=&quot;db5&quot;&gt;按鈕 1&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn2&quot; class=&quot;db5&quot;&gt;按鈕 2&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn3&quot; class=&quot;db5&quot;&gt;按鈕 3&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn4&quot; class=&quot;db5&quot;&gt;按鈕 4&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn5&quot; class=&quot;db5&quot;&gt;按鈕 5&lt;/button&gt;\n</code></pre><p>JavaScript 的部分，停止動畫的方法是<code>animateStop()</code>，顯示圖案的方法是<code>on</code>，動畫則是用<code>animate</code>來播放一個陣列，這個陣列裡面就是我們剛剛填入的代碼，例如：<code>[&#39;080c0effff0e0c08&#39;, &#39;183c7eff18181818&#39;, &#39;103070ffff707010&#39;]</code>，至於跑馬燈的部分，這裏利用<code>split</code>、<code>splice</code>和<code>push</code>這些處理陣列數值的 JavaScript 做一些手腳，也就是把一段超過 16 的字母或數字的代碼，轉換成陣列的形式呈現，再用<code>animate</code>播放，就會變成跑馬燈的效果了。</p>\n<pre><code>var matrix;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  matrix = getMax7219(board, 7, 8, 9);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    matrix.animateStop();\n    matrix.on(&#39;1026464040462610&#39;);\n  });\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    matrix.animateStop();\n    var a = &#39;0c1e3e7c3e1e0c000c12224422120c00&#39;;\n    var b = a.split(&quot;&quot;);\n    var d = [];\n    for(var i=0; i&lt;a.length/2; i++){\n      aa(i);\n    }\n    function aa(j){\n      var c=b.splice(0,2);\n      b.push(c[0],c[1]);\n      d[j] = b.join(&quot;&quot;);\n    }\n    console.log(d);\n    matrix.animate(d,100);\n  });\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    matrix.animateStop();\n    var varData = [&#39;080c0effff0e0c08&#39;, &#39;183c7eff18181818&#39;, &#39;103070ffff707010&#39;];\n    matrix.animate(varData,100);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    matrix.off();\n  });\n});\n</code></pre><p>以上就是利用 LED 點矩陣，點擊不同的網頁按鈕，顯示圖形或是動畫。<br>完整程式碼：<a href=\"http://bin.webduino.io/xoma/7/edit?html,css,js,output\">http://bin.webduino.io/xoma/7/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7z4OcyEOftPgFGh5PR\">https://blockly.webduino.io/#-K7z4OcyEOftPgFGh5PR</a></p>\n<h2 id=\"led-\">LED 點矩陣的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/max7219-1#-K0opTxaF_E2ncQkc6JC\">Webduino Blockly 課程 13-1：點矩陣顯示圖形</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/max7219-2#-K0os-k9zK8b2uN9iOMK\">Webduino Blockly 課程 13-2：點矩陣製作動畫</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/max7219-3#-K0ou2rmQYkM46jiooWV\">Webduino Blockly 課程 13-3：點矩陣跑馬燈效果</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/max7219-4#-K0p0BGifwqYvndb35GK\">Webduino Blockly 課程 13-4：點選按鈕切換點矩陣效果</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/max7219-5#-K0p4uO2W-zcVOU7FF0A\">Webduino Blockly 課程 13-5：利用超音波傳感器改變點矩陣圖形</a> </p>\n<div class=\"buy-this\">\n    <span>LED 點矩陣相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> \n\n\n<!-- @@close-->"},"tutorial-19-rfid":{"tag":"tutorial","src":"tutorial-19-rfid.html","title":"RFID","banner":"tutorial-19-01.jpg","img":"tutorial-19-01s.jpg","date":20160113,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 19：RFID :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"RFID 是 Radio Frequency IDentification 的縮寫，中文翻譯為「無線射頻辨識」，是一種常見的無線通訊技術，透過 RFID 識別裝置 ( 讀卡器 ) 所產生的「電磁場」，能讓附著在物品上的「電子標籤」獲得能量進而發送無線電頻率的訊號，RFID 在今日相當的普及，常見於庫存、資產、人員等的追蹤與管理，甚至許多的防偽、畜產管理也都有 RFID 的身影存在。\">\n\n<meta itemprop=\"description\" content=\"RFID 是 Radio Frequency IDentification 的縮寫，中文翻譯為「無線射頻辨識」，是一種常見的無線通訊技術，透過 RFID 識別裝置 ( 讀卡器 ) 所產生的「電磁場」，能讓附著在物品上的「電子標籤」獲得能量進而發送無線電頻率的訊號，RFID 在今日相當的普及，常見於庫存、資產、人員等的追蹤與管理，甚至許多的防偽、畜產管理也都有 RFID 的身影存在。\">\n\n<meta property=\"og:description\" content=\"RFID 是 Radio Frequency IDentification 的縮寫，中文翻譯為「無線射頻辨識」，是一種常見的無線通訊技術，透過 RFID 識別裝置 ( 讀卡器 ) 所產生的「電磁場」，能讓附著在物品上的「電子標籤」獲得能量進而發送無線電頻率的訊號，RFID 在今日相當的普及，常見於庫存、資產、人員等的追蹤與管理，甚至許多的防偽、畜產管理也都有 RFID 的身影存在。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/sensor/rfid.html\">\n\n<meta property=\"og:title\" content=\"教學範例 19：RFID\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-19-rfid.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-19-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-19-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-19-rfid\">教學範例 19：RFID</h1>\n<p>RFID 是 Radio Frequency IDentification 的縮寫，中文翻譯為「無線射頻辨識」，是一種常見的無線通訊技術，透過 RFID 識別裝置 ( 讀卡器 ) 所產生的「電磁場」，能讓附著在物品上的「電子標籤」獲得能量進而發送無線電頻率的訊號，RFID 在今日相當的普及，常見於庫存、資產、人員等的追蹤與管理，甚至許多的防偽、畜產管理也都有 RFID 的身影存在。</p>\n<div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/RrCAOgtPHdo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>這裏我們使用的 RFID 識別裝置的型號為 RC522，RC522 主要針對 13.56MHZ 的無線電頻率識別，工作電壓為 3.3V ，上頭共有八支接腳，分別是 SDA、SCK、MOSI、MISO、IRQ、GND、RST、VCC，其中 SDA、SCK、MOSI、MISO 負責訊號的輸入和輸出。</p>\n<p><img src=\"../img/tutorials/tutorial-19-02.jpg\" alt=\"\"></p>\n<p>由於 Arduino UNO 本身的數位腳各自有各自的功能，13 對應 Serial Clock ( SCK )，12 對應 Master-in slave-out ( MISO )，11 是 Master-out slave-in ( MOSI )，10 是 Slave select ( SS )，因此我們將 SDA 接 10，SCK 接 13，MOSI 接 11，MISO 接 12。</p>\n<p>IRQ 是中斷的腳位，RST 是重置的腳位，因為在本範例中不會用到，所以這裡就不需要接這兩個接腳，GND 接在 GND，VCC 接在 3.3V 的位置，此外因為腳位限制，所以在這個範例<strong>必須使用 Arudino UNO 和 Webduino UNO 雲端擴充板搭配進行</strong>。</p>\n<p><img src=\"../img/tutorials/tutorial-19-03.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-19-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-19-05.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-19-06.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「顯示文字」來顯示 RFID 磁卡或磁扣的識別碼，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」，此外，記得要先燒錄 RFID 的韌體檔喔！ ( 請參考：<a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">韌體檔案燒錄教學</a>，選擇有 MFRC522 檔名的韌體 )</p>\n<p><img src=\"../img/tutorials/tutorial-19-07.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入 RFID 的積木，名稱設定為 rfid，腳位設定為 10、13、11、12，因為腳位限定，所以下拉選單也無法改變腳位。</p>\n<p><img src=\"../img/tutorials/tutorial-19-08.jpg\" alt=\"\"></p>\n<p>放入「偵測訊號」的積木，在我們拿 RFID 磁卡或磁扣去感應讀卡器的時候，右邊的網頁就會顯示對應的識別碼。</p>\n<p><img src=\"../img/tutorials/tutorial-19-09.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，用不同的磁卡或磁扣去感應讀卡器，就會出現識別碼，如果你發現某些磁卡或磁扣無法出現識別碼，最大的可能性是頻率和 RFID-RC522 讀卡器不同所導致的。( 解答：<a href=\"https://blockly.webduino.io/#-K7zNrV4FojmGdLfbhmM\">https://blockly.webduino.io/#-K7zNrV4FojmGdLfbhmM</a></p>\n<p><img src=\"../img/tutorials/tutorial-19-10.jpg\" alt=\"\"></p>\n<p>不過只有這樣有點太乏味，我們可以加入一些識別，再來我們會用不同的磁卡，讓文字的顏色變色，我們先加入「文字顏色」的積木，在感應的當下把文字變成黑色 ( 這樣其他卡片感應時才會呈現黑色 )，然後加入「判斷」的積木，當出現對應的識別碼，就把文字變成紅色。</p>\n<p><img src=\"../img/tutorials/tutorial-19-11.jpg\" alt=\"\"></p>\n<p>同樣的方式，我們可以偵測第二張磁卡或磁扣，感應到之後把文字變成藍色。</p>\n<p><img src=\"../img/tutorials/tutorial-19-12.jpg\" alt=\"\"></p>\n<p>完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，用不同的磁卡或磁扣去感應讀卡器，就會看到文字呈現對應的顏色了。( 解答：<a href=\"https://blockly.webduino.io/#-K7zPzNNag4ggJ_7qp96\">https://blockly.webduino.io/#-K7zPzNNag4ggJ_7qp96</a></p>\n<p><img src=\"../img/tutorials/tutorial-19-13.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/yevog/1/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裏頭只有一個 span，用來顯示 RFID 磁卡或磁扣的識別碼。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript 使用<code>on</code>的方法，回呼函式裡面會有一個變數，回傳值就是 RFID 的識別碼，在裡面可以寫上判斷式，判斷對應的字串就執行對應的動作，這裏的動作除了用<code>innerHTML</code>顯示識別碼之外，也用<code>style</code>來改變顏色。</p>\n<pre><code>var rfid;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  rfid = getRFID(board);\n  rfid.read();\n  rfid.on(&quot;enter&quot;,function(_uid){\n    rfid._uid = _uid;\n    document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#000000&#39;;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = rfid._uid;\n    if(rfid._uid == &#39;679D4F55&#39;){\n      document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#ff0000&#39;;\n    }\n    if(rfid._uid == &#39;B4AE2E00&#39;){\n      document.getElementById(&quot;demo-area-01-show&quot;).style.color = &#39;#3333ff&#39;;\n    }\n  });\n});\n</code></pre><p>以上就是利用 RFID-RC522 來讀取 RFID 磁卡或磁扣，並將識別碼顯示在網頁裡，而且還會根據不同的磁卡或磁扣變色。<br>完整程式碼：<a href=\"https://bin.webduino.io/yevog/1/edit?html,css,js,output\">https://bin.webduino.io/yevog/1/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7zPzNNag4ggJ_7qp96\">https://blockly.webduino.io/#-K7zPzNNag4ggJ_7qp96</a></p>\n<h2 id=\"rfid-\">RFID 的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rfid-1#-K45oDB4TmzOFSNMPGGG\">Webduino Blockly 課程 16-1：偵測 RFID</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rfid-2#-K45qdjcmCYGz9YaNcUp\">Webduino Blockly 課程 16-2：RFID 紅綠燈</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rfid-3#-K462IpY3cfK91yLDK3M\">Webduino Blockly 課程 16-3：RFID 控制 Youtube</a> </p>\n<div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>    \n\n\n<!-- @@close-->"},"tutorial-20-rfid-youtube":{"tag":"tutorial","src":"tutorial-20-rfid-youtube.html","title":"RFID 控制 Youtube","banner":"tutorial-20-01.jpg","img":"tutorial-20-01s.jpg","date":20160113,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 20：RFID 控制 Youtube :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"上一篇我們介紹過 RFID 的基本原理還有可以根據不同的磁卡或磁扣切換顏色，這一篇範例要來實作更進階的 RFID：控制 Youtube，利用不同的磁卡或磁扣，來切換不同的 Youtube 影片。\">\n\n<meta itemprop=\"description\" content=\"上一篇我們介紹過 RFID 的基本原理還有可以根據不同的磁卡或磁扣切換顏色，這一篇範例要來實作更進階的 RFID：控制 Youtube，利用不同的磁卡或磁扣，來切換不同的 Youtube 影片。\">\n\n<meta property=\"og:description\" content=\"上一篇我們介紹過 RFID 的基本原理還有可以根據不同的磁卡或磁扣切換顏色，這一篇範例要來實作更進階的 RFID：控制 Youtube，利用不同的磁卡或磁扣，來切換不同的 Youtube 影片。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/sensor/rfid-youtube.html\">\n\n<meta property=\"og:title\" content=\"教學範例 20：RFID 控制 Youtube\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-20-rfid-youtube.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-20-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-20-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-20-rfid-youtube\">教學範例 20：RFID 控制 Youtube</h1>\n<p>上一篇我們介紹過 RFID 的基本原理還有可以根據不同的磁卡或磁扣切換顏色，這一篇範例要來實作更進階的 RFID：控制 Youtube，利用不同的磁卡或磁扣，來切換不同的 Youtube 影片。</p>\n<div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/RrCAOgtPHdo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>接線方式和上一篇範例一模一樣，將 SDA 接 10，SCK 接 13，MOSI 接 11，MISO 接 12，GND 接在 GND，VCC 接在 3.3V 的位置，此外因為腳位限制，所以在這個範例<strong>必須使用 Arudino UNO 和 Webduino FLY 雲端擴充板搭配進行</strong>。</p>\n<p><img src=\"../img/tutorials/tutorial-20-02.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-20-03.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會「先」用網頁「顯示文字」來顯示 RFID 磁卡或磁扣的識別碼，記下識別碼之後，就要使用「Youtube」來播放，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」，待會會用到「Youtube」。 ( 請參考：<a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">韌體檔案燒錄教學</a>，選擇有 MFRC522 檔名的韌體 )</p>\n<p><img src=\"../img/tutorials/tutorial-20-04.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入 RFID 的積木，名稱設定為 rfid，腳位設定為 10、13、11、12，因為腳位限定，所以下拉選單也無法改變腳位，放入「偵測訊號」的積木，在我們拿 RFID 磁卡或磁扣去感應讀卡器的時候，右邊的網頁就會顯示對應的識別碼。</p>\n<p><img src=\"../img/tutorials/tutorial-20-05.jpg\" alt=\"\"></p>\n<p>這邊完成後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，用不同的磁卡或磁扣去感應讀卡器，就會出現識別碼，這時我們先把這些對應的代碼記下來，待會就要用這些代碼來判斷。</p>\n<p><img src=\"../img/tutorials/tutorial-20-06.jpg\" alt=\"\"></p>\n<p>Youtube 的積木都在左邊網頁互動裡面，一開始我們要先載入 Youtube 模組，<strong>注意！模組只需要載入一次</strong>，因此該積木不要放到 RFID 偵測到訊號的肚子裡，不然會變成每次偵測都會載入一次模組，就會出錯了。</p>\n<p><img src=\"../img/tutorials/tutorial-20-07.jpg\" alt=\"\"></p>\n<p>影片的 id 只要打開 Youtube，從網址列就可以看到這段 id，複製下來貼進去就可以。</p>\n<p><img src=\"../img/tutorials/tutorial-20-08.jpg\" alt=\"\"></p>\n<p>如果說我們想要利用磁扣切換播放的影片，只要放入「更換 Youtube 影片 id」的積木，把要更換的 id 填進去就可以切換。</p>\n<p><img src=\"../img/tutorials/tutorial-20-09.jpg\" alt=\"\"></p>\n<p>如果不是想要切換影片，想要更改音量大小或是播放速度，只要選擇對應的 Youtube 積木就可以完成。</p>\n<p><img src=\"../img/tutorials/tutorial-20-10.jpg\" alt=\"\"></p>\n<p>做好之後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，用不同的磁卡或磁扣去感應讀卡器，就會看到 Youtube 的影片開始切換，或是音量、播放速度的變化了。( 解答：<a href=\"https://blockly.webduino.io/#-K7zgePAA41wamJK4U-w\">https://blockly.webduino.io/#-K7zgePAA41wamJK4U-w</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-20-11.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"http://bin.webduino.io/tihah/edit?html,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>，比較特別的是因為要控制 Youtube ，所以要額外載入<code>iframe_api</code>這支程式。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://www.youtube.com/iframe_api&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裏頭只有一個 div，也就是 Youtube 影片會顯示的區域。</p>\n<pre><code>&lt;div id=&quot;player&quot;&gt;&lt;/div&gt;\n</code></pre><p>JavaScript 雖然比較長，但是大部分都是 Youtube 的程式 ( 如果看不懂可以先不用理它，或是到 Youtube API 的網站閱讀詳細文件：<a href=\"https://www.youtube.com/yt/dev/zh-TW/api-resources.html\">https://www.youtube.com/yt/dev/zh-TW/api-resources.html</a> )，除此之外，RFID 的控制方式純粹用<code>on</code>來開始偵測，然後判斷磁卡或磁扣的識別碼，接著再呼叫 Youtube 的程式就可以了。</p>\n<pre><code>var rfid;\nvar youtube;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 500;\n  rfid = getRFID(board);\n  var checkYoutubeLoad=0;\n  onYouTubeIframeAPIReady();\n  function onYouTubeIframeAPIReady() {\n    youtube = new YT.Player(&quot;player&quot;, {\n      height: &quot;240&quot;,\n      width: &quot;96%&quot;,\n      videoId: &quot;YLoRXX2jMkc&quot;,\n      playerVars: {\n        &quot;autoplay&quot;: 1,\n        &quot;controls&quot;: 1},\n      events: {\n        &quot;onReady&quot;: onPlayerReady,\n        &quot;onStateChange&quot;: onPlayerStateChange\n      }\n    });\n  }\n  function onPlayerReady(event) {\n    event.target.playVideo();\n    checkYoutubeLoad=1;\n  }\n  var done = false;\n  function onPlayerStateChange(event) {\n    if (event.data == YT.PlayerState.PLAYING &amp;&amp; !done) {\n      done = true;\n    }\n  }\n  function stopVideo() {\n    youtube.stopVideo();\n  }\n  rfid.read();\n  rfid.on(&quot;enter&quot;,function(_uid){\n    rfid._uid = _uid;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = rfid._uid;\n    if(rfid._uid == &#39;679D4F55&#39;){\n      youtube.loadVideoById(&#39;PIZ3p8LTDaA&#39;);\n    }\n    if(rfid._uid == &#39;B4AE2E00&#39;){\n      youtube.loadVideoById(&#39;YLoRXX2jMkc&#39;);\n    }\n  });\n});\n</code></pre><p>以上就是利用 RFID-RC522 來讀取 RFID 磁卡或磁扣，進一步控制 Youtube 的播放。<br>完整程式碼：<a href=\"http://bin.webduino.io/tihah/edit?html,js,output\">http://bin.webduino.io/tihah/edit?html,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K7zgePAA41wamJK4U-w\">https://blockly.webduino.io/#-K7zgePAA41wamJK4U-w</a></p>\n<h2 id=\"rfid-\">RFID 的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rfid-1#-K45oDB4TmzOFSNMPGGG\">Webduino Blockly 課程 16-1：偵測 RFID</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rfid-2#-K45qdjcmCYGz9YaNcUp\">Webduino Blockly 課程 16-2：RFID 紅綠燈</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/rfid-3#-K462IpY3cfK91yLDK3M\">Webduino Blockly 課程 16-3：RFID 控制 Youtube</a>  </p>\n<div class=\"buy-this\">\n    <span>RFID 相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>   \n\n\n<!-- @@close-->"},"tutorial-21-toycar":{"tag":"tutorial","src":"tutorial-21-toycar.html","title":"鍵盤操控自走車","banner":"tutorial-21-01.jpg","img":"tutorial-21-01s.jpg","date":20160114,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 21：鍵盤操控自走車 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Webduino 公仔自走車是 Webduino 自主研發的產品，使用 Webduino 馬克 1 號開發板控制，不僅可以設定行進的模式，更可以接上超音波傳感器讓車子自動閃避障礙物，在這個範例我們會實作設定電腦的鍵盤行為，透過敲打鍵盤讓車子移動。\">\n\n<meta itemprop=\"description\" content=\"Webduino 公仔自走車是 Webduino 自主研發的產品，使用 Webduino 馬克 1 號開發板控制，不僅可以設定行進的模式，更可以接上超音波傳感器讓車子自動閃避障礙物，在這個範例我們會實作設定電腦的鍵盤行為，透過敲打鍵盤讓車子移動。\">\n\n<meta property=\"og:description\" content=\"Webduino 公仔自走車是 Webduino 自主研發的產品，使用 Webduino 馬克 1 號開發板控制，不僅可以設定行進的模式，更可以接上超音波傳感器讓車子自動閃避障礙物，在這個範例我們會實作設定電腦的鍵盤行為，透過敲打鍵盤讓車子移動。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/example/toycar-keyboard.html\">\n\n<meta property=\"og:title\" content=\"教學範例 21：鍵盤操控自走車\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-21-toycar.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-21-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-21-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-21-\">教學範例 21：鍵盤操控自走車</h1>\n<p>Webduino 公仔自走車是 Webduino 自主研發的產品，使用 Webduino 馬克 1 號開發板控制，不僅可以設定行進的模式，更可以接上超音波傳感器讓車子自動閃避障礙物，在這個範例我們會實作設定電腦的鍵盤行為，透過敲打鍵盤讓車子移動。</p>\n<div class=\"buy-this\">\n    <span>自走車相關套件：<a href=\"https://webduino.io/buy/webduino-package-toycar.html\" target=\"_blank\">Webduino 公仔自走車 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/0JT1KAHkMsk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>要操控自走車，首先就是要組裝自走車，先來看一下自走車包含哪些組件，組件分別有：自走車底版 ( 3D 列印 )、左右各一顆輪子與馬達、開關、電池盒、馬達驅動板、超音波傳感器和 Webduino 開發板，由於主要的機構都已經焊接完成，組裝上變得相當簡單，只需要幾個步驟即可完成。</p>\n<p>首先把電池放到電池盒內 ( 需要四顆三號電池 )，然後將電池盒放到車子上。</p>\n<p><img src=\"../img/tutorials/tutorial-21-02.jpg\" alt=\"\"></p>\n<p>接著把 Webduino 開發板放到前方的插槽裡。</p>\n<p><img src=\"../img/tutorials/tutorial-21-03.jpg\" alt=\"\"></p>\n<p>放妥開發板後，先把超音波傳感器插在開發板的左側排插，Trig 11，Echo 10。</p>\n<p><img src=\"../img/tutorials/tutorial-21-04.jpg\" alt=\"\"></p>\n<p>接著把馬達驅動板插在右側排插，注意會把 3.3V、 6、7、8、9 的腳位接滿，然後在 3.3V 的插孔處會突出一支腳，這支腳已經用電線聯結出來，所以是正常的不需理會。</p>\n<p><img src=\"../img/tutorials/tutorial-21-05.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-21-06.jpg\" alt=\"\"></p>\n<p>到這邊已經組裝完成，打開自走車的電源，就可以開始嘗試操控自走車了。</p>\n<p><img src=\"../img/tutorials/tutorial-21-07.jpg\" alt=\"\"></p>\n<p>最終長相：</p>\n<p><img src=\"../img/tutorials/tutorial-21-08.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>自走車相關套件：<a href=\"https://webduino.io/buy/webduino-package-toycar.html\" target=\"_blank\">Webduino 公仔自走車 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用「玩具應用」裡的「自走車(2)」來對自走車進行操控。</p>\n<p><img src=\"../img/tutorials/tutorial-21-09.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入自走車的積木，名稱設定為 car，腳位設定為 6、7、8、9 ( 這是 Webduino 自走車出場的腳位順序 )。</p>\n<p><img src=\"../img/tutorials/tutorial-21-10.jpg\" alt=\"\"></p>\n<p>因為要用鍵盤操控，所以要使用「進階功能」的「鍵盤行為」積木。</p>\n<p><img src=\"../img/tutorials/tutorial-21-11.jpg\" alt=\"\"></p>\n<p>首先放入偵測鍵盤「按下」的積木，在裡面放入偵測按下 W ( 可以用下拉選單選擇按鍵 )，這表示當 W 按下時，就會做自走車前進的動作。</p>\n<p><img src=\"../img/tutorials/tutorial-21-12.jpg\" alt=\"\"></p>\n<p>接著放入後退、原地左轉、原地右轉的積木。</p>\n<p><img src=\"../img/tutorials/tutorial-21-13.jpg\" alt=\"\"></p>\n<p>完成後我們把「偵測鍵盤按下」的這一整塊積木，按右鍵選擇複製，就會產生一塊新的積木 ( 包含肚子裡的積木也會一併複製 )。</p>\n<p><img src=\"../img/tutorials/tutorial-21-14.jpg\" alt=\"\"></p>\n<p>然後將偵測鍵盤行為改成「放開」，並把所有車子的動作改成「停止」，也就是當我們手指離開這個按鍵，就會觸發車子停止的動作。</p>\n<p><img src=\"../img/tutorials/tutorial-21-15.jpg\" alt=\"\"></p>\n<p>做好之後，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以開始用鍵盤操控自走車了。( 解答：<a href=\"https://blockly.webduino.io/#-KGMmOLh3VCSem3MK95f\">https://blockly.webduino.io/#-KGMmOLh3VCSem3MK95f</a> )</p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/pehev/1/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>JavaScript 最主要是鍵盤行為的操控，每個鍵盤按鍵，在 JavaScript 裡面都有對應的<code>keyCode</code>，利用<code>switch</code>就可以判斷不同的<code>keyCode</code>就做不同的事情，不過在右側有數字鍵和右側沒有數字鍵的鍵盤、或 Mac 作業系統裡，部分 KeyCode 會不同 ( 例如上下左右 )，不過如果是字母，基本上都會是相同的，所以建議先從字母鍵盤著手。</p>\n<pre><code>var car;\n\nboardReady(&#39;&#39;, async function (board) {\n  board.systemReset();\n  board.samplingInterval = 20;\n  car = getToyCar(board,6,7,8,9);\n  document.onkeydown = async function(e){\n    console.log(e.keyCode);\n    switch(e.keyCode){\n      case 87:\n        car.goFront();\n      break;\n      case 83:\n        car.goBack();\n      break;\n      case 65:\n        car.turnLeft();\n      break;\n      case 68:\n        car.turnRight();\n      break;\n    }\n  };\n  document.onkeyup = async function(e2){\n    console.log(e2.keyCode);\n    switch(e2.keyCode){\n      case 87:\n        car.stop();\n      break;\n      case 83:\n        car.stop();\n      break;\n      case 65:\n        car.stop();\n      break;\n      case 68:\n        car.stop();\n      break;\n    }\n  };\n});\n</code></pre><p>以上就是利用鍵盤來控制自走車的 Blockly 和程式碼簡介。<br>完整程式碼：<a href=\"https://bin.webduino.io/pehev/1/edit?html,css,js,output\">https://bin.webduino.io/pehev/1/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-KGMmOLh3VCSem3MK95f\">https://blockly.webduino.io/#-KGMmOLh3VCSem3MK95f</a></p>\n<h2 id=\"-\">自走車的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant#-KGMmvTNDxkWIiIklD7I\">Webduino Blockly 課程：操控自走車</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant#-KGMn222ejGP0edhX-KL\">Webduino Blockly 課程：超音波避障自走車</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant#-KGMn7k6rIv8_1om2-xa\">Webduino Blockly 課程：語音聲控自走車</a>     </p>\n<div class=\"buy-this\">\n    <span>自走車相關套件：<a href=\"https://webduino.io/buy/webduino-package-toycar.html\" target=\"_blank\">Webduino 公仔自走車 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-22-speech-led":{"tag":"tutorial","src":"tutorial-22-speech-led.html","title":"語音聲控 LED 燈","banner":"tutorial-22-01.jpg","img":"tutorial-22-01s.jpg","date":20160123,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 22：語音聲控 LED 燈 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"因為 Webduino 可以使用瀏覽器 Chrome 來操控各種電子零件，因此 Chrome 具備的功能也都能夠順利成章的使用，在這個範例裡面我們將會使用 Chrome 內建的 Speech API，透過 Google 的語音辨識功能，輕鬆實現語音聲控 LED 燈的效果。\">\n\n<meta itemprop=\"description\" content=\"因為 Webduino 可以使用瀏覽器 Chrome 來操控各種電子零件，因此 Chrome 具備的功能也都能夠順利成章的使用，在這個範例裡面我們將會使用 Chrome 內建的 Speech API，透過 Google 的語音辨識功能，輕鬆實現語音聲控 LED 燈的效果。\">\n\n<meta property=\"og:description\" content=\"因為 Webduino 可以使用瀏覽器 Chrome 來操控各種電子零件，因此 Chrome 具備的功能也都能夠順利成章的使用，在這個範例裡面我們將會使用 Chrome 內建的 Speech API，透過 Google 的語音辨識功能，輕鬆實現語音聲控 LED 燈的效果。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/component/led-speech.html\">\n\n<meta property=\"og:title\" content=\"教學範例 22：語音聲控 LED 燈\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-22-speech-led.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-22-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-22-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-22-led-\">教學範例 22：語音聲控 LED 燈</h1>\n<p>因為 Webduino 可以使用瀏覽器 Chrome 來操控各種電子零件，因此 Chrome 具備的功能也都能夠順利成章的使用，在這個範例裡面我們將會使用 Chrome 內建的 Speech API，透過 Google 的語音辨識功能，輕鬆實現語音聲控 LED 燈的效果 ( 同樣的方式也可以應用在繼電器上，就可以變成語音聲控電燈泡、門鎖或家電 )。</p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/FXoe5k6_iQo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>因為這個範例只需要用到一顆 LED 燈，所以接線方式很簡單，首先，LED 燈有「長短腳」之分，長腳接「高電位」( 帶有數字的腳位 )，短腳接「低電位」( GND、接地 )，因此我們只要直接將 LED 插到腳位上即可，或使用麵包板與麵包線外接出來，在這裡<strong>長腳接 10，短腳接 GND</strong>。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-22-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-22-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-22-03.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會「先」用網頁「顯示文字」來顯示我們語音辨識出來的文字，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」。</p>\n<p><img src=\"../img/tutorials/tutorial-22-04.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入 LED 的積木，名稱設定為 led，腳位設定 10。</p>\n<p><img src=\"../img/tutorials/tutorial-22-05.jpg\" alt=\"\"></p>\n<p>如果要使用語音聲控，點選左側「進階功能」的選項，選擇「語音聲控」，裡面就會有對應的積木。</p>\n<p><img src=\"../img/tutorials/tutorial-22-06.jpg\" alt=\"\"></p>\n<p>我們把「開始語音辨識」的積木放到開發板內，要注意的是，如果選擇「中文」語音，就只能辨識中文，不然會把念出來的英文，辨識為很奇怪的中文 ( 例如 good 可能會辨識成「固的」 )，如果要講英文，就選擇「English」。</p>\n<p><img src=\"../img/tutorials/tutorial-22-07.jpg\" alt=\"\"></p>\n<p>語音辨識積木的第二個選項：「即時辨識」，如果選擇「on」，表示我們講的每個字都會即時辨識出來，如果選擇「off」，則會在一段話停頓的時候 ( 由系統自動判斷何時叫做停頓 )，才會辨識一整段話出來，因此如果是使用「電腦」版本的瀏覽器，建議使用即時辨識，這樣語音聲控的效果會更好，不過<strong>如果是行動裝置，即時辨識一定要設定為「off」( 行動裝置預設值 )，而且也只有 Android 手機才能使用，要特別注意！</strong></p>\n<p><img src=\"../img/tutorials/tutorial-22-08.jpg\" alt=\"\"></p>\n<p>接著先放入「顯示文字」的積木來顯示辨識文字，這樣才可以看到我們講出來的文字是什麼。</p>\n<p><img src=\"../img/tutorials/tutorial-22-09.jpg\" alt=\"\"></p>\n<p>然後放入「如果辨識的文字是什麼，就執行什麼」的積木，把我們的語音命令寫在裡面，這個範例表示我們講「開燈」LED 就會亮，「關燈」就會熄滅，「閃爍」就會開始閃爍。</p>\n<p><img src=\"../img/tutorials/tutorial-22-10.jpg\" alt=\"\"></p>\n<p>如果要可以支援多種指令，我們可以利用「列表」的方式，把各個指令列出來就可以了。</p>\n<p><img src=\"../img/tutorials/tutorial-22-11.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，基本上會彈出一個是否允許啟用麥克風的選項，點選「允許」。</p>\n<p><img src=\"../img/tutorials/tutorial-22-12.jpg\" alt=\"\"></p>\n<p>接著就可以開始講話，用語音聲控 LED 燈了。( 解答：<a href=\"https://blockly.webduino.io/#-K8jMTLqExEaa7YlqKCN\">https://blockly.webduino.io/#-K8jMTLqExEaa7YlqKCN</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-22-13.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"http://bin.webduino.io/fexic/edit?html,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裏頭只有一個 span，用來顯示語音辨識出來的文字。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript 最主要用了<code>webkitSpeechRecognition()</code>這個 Chrome 內建語音辨識的物件，根據不同的屬性，例如<code>continuous</code>、<code>interimResults</code>和<code>lang</code>就可以針對語音辨識做一些設定，而語音辨識會回傳一個<code>onresult</code>的屬性，裡面就會有辨識出來的文字，而我們便將判斷式寫在裡頭，判斷如果有我們的指令文字，就會執行某些動作。</p>\n<pre><code>var led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  led = getLed(board, 10);\n  function speechRecognition(){\n    if (!(&quot;webkitSpeechRecognition&quot; in window)) {\n      alert(&quot;本瀏覽器不支援語音辨識，請更換瀏覽器！(Chrome 25 版以上才支援語音辨識)&quot;);\n    } else{\n      window._recognition = new webkitSpeechRecognition();\n      window._recognition.continuous = true;\n      window._recognition.interimResults = true;\n      window._recognition.lang = &quot;cmn-Hant-TW&quot;;\n\n      window._recognition.onstart = function() {\n        console.log(&quot;Start recognize...&quot;);\n      };\n\n      window._recognition.onend = function() {\n        console.log(&quot;Stop recognize&quot;);\n      };\n\n      window._recognition.onresult = function(event,result) {\n        result = {};\n        result.resultLength = event.results.length-1;\n        result.resultTranscript = event.results[result.resultLength][0].transcript;\n        if(event.results[result.resultLength].isFinal===false){\n          console.log(result.resultTranscript);\n            document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = result.resultTranscript;\n    if(result.resultTranscript.indexOf(&quot;開燈&quot;)!==-1){\n              led.on();\n          }\n    if(result.resultTranscript.indexOf(&quot;關燈&quot;)!==-1){\n              led.off();\n          }\n    if(result.resultTranscript.indexOf(&quot;閃爍&quot;)!==-1){\n              led.blink(0.5*1000);\n          }\n                }else if(event.results[result.resultLength].isFinal===true){\n          console.log(&quot;final&quot;);\n        }\n      };\n      window._recognition.start();\n    }\n  }\n  speechRecognition();\n});\n</code></pre><p>以上就是語音聲控的 Blockly 和程式碼簡介。<br>完整程式碼：<a href=\"http://bin.webduino.io/fexic/edit?html,js,output\">http://bin.webduino.io/fexic/edit?html,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-K8jMTLqExEaa7YlqKCN\">https://blockly.webduino.io/#-K8jMTLqExEaa7YlqKCN</a></p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克 1 號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-23-adxl345":{"tag":"tutorial","src":"tutorial-23-adxl345.html","title":"三軸加速度計","banner":"tutorial-23-01.jpg","img":"tutorial-23-01s.jpg","date":20160218,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 23：三軸加速度計 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"三軸加速度感應器是利用三個軸向移動的加速度，來算出旋轉的角度，在這個篇教學將使用 Webduino 來控制 ADXL345 這個型號的三軸加速度感應器，ADXL345 可以選擇使用 I2C 或 SPI 協定來傳遞資料，而 Arduino 的類比腳使用 I2C，所以這裏我們會使用到的腳位是 GND、VCC、CS、SDA 和 SCL。\">\n\n<meta itemprop=\"description\" content=\"三軸加速度感應器是利用三個軸向移動的加速度，來算出旋轉的角度，在這個篇教學將使用 Webduino 來控制 ADXL345 這個型號的三軸加速度感應器，ADXL345 可以選擇使用 I2C 或 SPI 協定來傳遞資料，而 Arduino 的類比腳使用 I2C，所以這裏我們會使用到的腳位是 GND、VCC、CS、SDA 和 SCL。\">\n\n<meta property=\"og:description\" content=\"三軸加速度感應器是利用三個軸向移動的加速度，來算出旋轉的角度，在這個篇教學將使用 Webduino 來控制 ADXL345 這個型號的三軸加速度感應器，ADXL345 可以選擇使用 I2C 或 SPI 協定來傳遞資料，而 Arduino 的類比腳使用 I2C，所以這裏我們會使用到的腳位是 GND、VCC、CS、SDA 和 SCL。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/sensor/adxl345.html\">\n\n<meta property=\"og:title\" content=\"教學範例 23：三軸加速度計\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-23-adxl345.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-23-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-23-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-23-\">教學範例 23：三軸加速度計</h1>\n<p>三軸加速度感應器是利用三個軸向移動的加速度，來算出旋轉的角度，在這個篇教學將使用 Webduino 來控制 ADXL345 這個型號的三軸加速度感應器，ADXL345 可以選擇使用 I2C 或 SPI 協定來傳遞資料，而 Arduino 的類比腳使用 I2C，所以這裏我們會使用到的腳位是 GND、VCC、CS、SDA 和 SCL。</p>\n<div class=\"buy-this\">\n    <span>三軸加速度計相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?&amp;page=tutorials/adxl345-1\">https://blockly.webduino.io/?&amp;page=tutorials/adxl345-1</a>  </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/SH4-Z7E1DZc\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>VCC 接在 3.3V 的位置 ( 電壓高於 3.6V 會導致晶片燒毀 )，GND 接 GND，CS 和 VCC 接在一起，把  CS 的電位拉高和 VCC 相同，目的在告訴晶片是走 I2C 的協定，IN1 和 IN2 是負責驅動中斷的兩個輸出引腳，在這邊實作的過程不會用到，所以不用接，SDO 屬於 SPI 協定使用因此在這個範例也用不到所以不用接。</p>\n<p>因為要走 I2C 的協定，所以要在訊號端加入「上拉電阻」，在線路裡分別加入兩顆 10K 的電阻來作為上拉電阻 ( Arduino 官方網站建議使用 10K 的電阻作為上拉或下拉的電阻值 ) 。</p>\n<p>接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-23-02.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-23-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-23-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-23-05.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>三軸加速度計相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會「先」用網頁「顯示文字」來顯示三軸加速度計的數值，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」，此外，記得要先燒錄三軸加速度計的韌體檔喔！ ( 請參考：<a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">韌體檔案燒錄教學</a>，選擇有 GY291 或 ADXL 檔名的韌體 )</p>\n<p><img src=\"../img/tutorials/tutorial-23-06.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入三軸加速度計的積木，名稱設定為 adxl345，SDA 腳位設定 A4，SCL 腳位設定 A5。</p>\n<p><img src=\"../img/tutorials/tutorial-23-07.jpg\" alt=\"\"></p>\n<p>放入「開始偵測」以及「顯示」的積木，在偵測的時候將數值顯示在網頁裡。</p>\n<p><img src=\"../img/tutorials/tutorial-23-08.jpg\" alt=\"\"></p>\n<p>因為三軸加速度計會回傳五個數值 ( X、Y、Z、Roll、Pitch )，但文字顯示欄位只有一個，為了可以一次將所有數值顯示出來，這裏我們<strong>使用「建立字串」的積木</strong>，利用藍色小齒輪，增加五個缺口，這樣就可以一次顯示五個數值。</p>\n<p><img src=\"../img/tutorials/tutorial-23-09.jpg\" alt=\"\"></p>\n<p>當然只有數值不夠，還要標示這個數值代表什麼，所以這邊要用到二層的「建立字串」積木，裡面放入數值名稱，以及三軸加速度計所偵測到的數值，至於要取出何種數值，可以透過下拉選單選擇。</p>\n<p><img src=\"../img/tutorials/tutorial-23-10.jpg\" alt=\"\"></p>\n<p>依序放入各個數值的積木，然後為了避免文字太大，這邊也可以利用文字大小的積木，來調整文字大小。</p>\n<p><img src=\"../img/tutorials/tutorial-23-11.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，轉動三軸加速度計，就可以看到數值出現在右側的網頁裡。<br>( 解答：<a href=\"https://blockly.webduino.io/#-KAxVJzMEpjTODr4q4k1\">https://blockly.webduino.io/#-KAxVJzMEpjTODr4q4k1</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-23-12.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"http://bin.webduino.io/lizuv/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裏頭只有一個 span，用來顯示三軸加速度計的數值，也因為只有一個 span，我們才需要使用「建立字串」的積木 ( 如果會寫程式，這部分也可以用五個 span 來取代 )。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript 最主要用了<code>on</code>這個方法，裡面會有一個函式，帶有五個參數，這五個參數就是三軸加速度計的五個數值，利用<code>innerHTML</code>與字串的相加，我們就可以把這五個數值，顯示在 span 裏頭了。</p>\n<pre><code>var adxl;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  adxl = getADXL345(board);\n  document.getElementById(&quot;demo-area-01-show&quot;).style.fontSize = 20+&quot;px&quot;;\n  adxl.setSensitivity = 0;\n  adxl.setBaseAxis = &quot;x&quot;;\n  adxl.on(function(_x,_y,_z,_r,_p){\n    adxl._x = _x;\n    adxl._y = _y;\n    adxl._z = _z;\n    adxl._r = _r;\n    adxl._p = _p;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ([String(&#39;X=&#39;) + String(adxl._x),String(&#39;, Y=&#39;) + String(adxl._y),String(&#39;, Z=&#39;) + String(adxl._z),String(&#39;, roll=&#39;) + String(adxl._r),String(&#39;, pitch=&#39;) + String(adxl._p)].join(&#39;&#39;));\n  });\n});\n</code></pre><p>以上就是控制三軸加速度計 ADXL345 和程式碼簡介。<br>完整程式碼：<a href=\"http://bin.webduino.io/lizuv/edit?html,css,js,output\">http://bin.webduino.io/lizuv/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-KAxVJzMEpjTODr4q4k1\">https://blockly.webduino.io/#-KAxVJzMEpjTODr4q4k1</a></p>\n<h2 id=\"-\">三軸加速度計的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/adxl345-1#-K0pl9rB2TohBuBnorit\">Webduino Blockly 課程 14-1：控制三軸加速度計</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/adxl345-2#-K0q9iZQIPc-9eLg9k2f\">Webduino Blockly 課程 14-2：旋轉角度旋轉圖片</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/adxl345-3#-K0qEX3wukvZgtnn817T\">Webduino Blockly 課程 14-3：旋轉角度點亮 LED 燈</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/adxl345-4#-K0qKebEHBdfd19FzAvZ\">Webduino Blockly 課程 14-4：旋轉角度改變點矩陣圖形</a></p>\n<div class=\"buy-this\">\n    <span>三軸加速度計相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-24-ir":{"tag":"tutorial","src":"tutorial-24-ir.html","title":"紅外線發射與接收","banner":"tutorial-24-01.jpg","img":"tutorial-24-01s.jpg","date":20160221,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 24：紅外線發射與接收 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"紅外線發射與接收，常見於我們日常生活的電器用品，舉凡電視機、冷氣機、遙控電風扇、玩具...等，只要有「遙控器」的電器，大多都是利用紅外線發射與接收的原理，這篇教學將會介紹如何透過 Webduino，時做出可以偵測遙控器紅外線訊號，以及發送紅外線訊號的實際案例。\">\n\n<meta itemprop=\"description\" content=\"紅外線發射與接收，常見於我們日常生活的電器用品，舉凡電視機、冷氣機、遙控電風扇、玩具...等，只要有「遙控器」的電器，大多都是利用紅外線發射與接收的原理，這篇教學將會介紹如何透過 Webduino，時做出可以偵測遙控器紅外線訊號，以及發送紅外線訊號的實際案例。\">\n\n<meta property=\"og:description\" content=\"紅外線發射與接收，常見於我們日常生活的電器用品，舉凡電視機、冷氣機、遙控電風扇、玩具...等，只要有「遙控器」的電器，大多都是利用紅外線發射與接收的原理，這篇教學將會介紹如何透過 Webduino，時做出可以偵測遙控器紅外線訊號，以及發送紅外線訊號的實際案例。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/ir.html\">\n\n<meta property=\"og:title\" content=\"教學範例 24：紅外線發射與接收\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-24-ir.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-24-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-24-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-24-\">教學範例 24：紅外線發射與接收</h1>\n<p>紅外線發射與接收，常見於我們日常生活的電器用品，舉凡電視機、冷氣機、遙控電風扇、玩具...等，只要有「遙控器」的電器，大多都是利用紅外線發射與接收的原理，這篇教學將會介紹如何透過 Webduino，時做出可以偵測遙控器紅外線訊號，以及發送紅外線訊號的實際案例。</p>\n<div class=\"buy-this\">\n    <span>紅外線發射與接收相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> \n\n<h2 id=\"-\">範例影片展示</h2>\n<p>影片對應範例：<a href=\"https://blockly.webduino.io/?&amp;page=tutorials/irrecv-1\">https://blockly.webduino.io/?&amp;page=tutorials/irrecv-1</a>  </p>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/lfN0D4198CM\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>將紅外線接收器上頭靠近「-」的腳接上 GND，中間的腳是 3.3V，靠近「S」的腳接到 10 的腳位，由於 Arduino 本身對於紅外線訊號的處理只有「一個」振盪器，所以發射與接收紅外線的事件會同時發生，因此，<strong>無法在同一塊 Arduino 上頭，同時使用紅外線接收器與發射器</strong>，如果要測試發射訊號，可以用紅外線接收器，接收家裡的電視機遙控器訊號，然後用紅外線發射器發送給電視機，就可以了。</p>\n<p>紅外線接收器，接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-24-02.jpg\" alt=\"\"></p>\n<p>紅外線接收器實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-24-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-24-04.jpg\" alt=\"\"></p>\n<p>紅外線發射器的長相就很類似一個大顆的 LED 燈，不注意的話還會用錯，如果我們使用<strong>紅外線發射器，一定得使用 9 號腳位</strong>，因為該腳位就是具備振盪器功能的腳位，才能發出紅外線訊號使用的方波，接別的腳位是無效的，所以這裡將長腳接在 9 號，短腳接在 GND。</p>\n<p>紅外線發射器，接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-24-05.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>紅外線發射與接收相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> \n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會「先」用網頁「顯示文字」來顯示紅外線接收器接收到的訊號，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」，此外，記得要先燒錄紅外線發射與接收的韌體檔喔！ ( 請參考：<a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">韌體檔案燒錄教學</a>，選擇有 IR 檔名的韌體 )</p>\n<p><img src=\"../img/tutorials/tutorial-24-06.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入紅外線接收器的積木，名稱設定為 irrecv，腳位設定為 10。</p>\n<p><img src=\"../img/tutorials/tutorial-24-07.jpg\" alt=\"\"></p>\n<p>放入「開始偵測」以及「顯示」的積木，在偵測的時候將訊號顯示在網頁裡。</p>\n<p><img src=\"../img/tutorials/tutorial-24-08.jpg\" alt=\"\"></p>\n<p>如果是紅外線發射，就要使用紅外線發射的積木，名稱為 irled，同時腳位也要改成 9。</p>\n<p><img src=\"../img/tutorials/tutorial-24-09.jpg\" alt=\"\"></p>\n<p>更進一步，我們也可以利用網頁的按鈕，發送不同的紅外線訊號，透過這個方式，我們就可以將電視遙控器的按鍵完全做成網頁版本了。</p>\n<p><img src=\"../img/tutorials/tutorial-24-10.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以開始接收紅外線訊號，或是開始發送紅外線訊號了。<br>( 解答：<a href=\"https://blockly.webduino.io/#-KB1oJMYKqVBeKrMmQGn\">https://blockly.webduino.io/#-KB1oJMYKqVBeKrMmQGn</a> )</p>\n<p>##範例解析 ( <a href=\"http://bin.webduino.io/jiguh/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>如果是用紅外線接收器，HTML 裏頭只有一個 span，用來顯示三軸加速度計的數值，也因為只有一個 span，我們才需要使用「建立字串」的積木 ( 如果會寫程式，這部分也可以用五個 span 來取代 )。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>如果是用紅外線發射器，HTML 裏頭就會是一些按鈕。</p>\n<pre><code>&lt;button id=&quot;demo-area-05-btn1&quot; class=&quot;db5&quot;&gt;按鈕 1&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn2&quot; class=&quot;db5&quot;&gt;按鈕 2&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn3&quot; class=&quot;db5&quot;&gt;按鈕 3&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn4&quot; class=&quot;db5&quot;&gt;按鈕 4&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn5&quot; class=&quot;db5&quot;&gt;按鈕 5&lt;/button&gt;\n</code></pre><p>紅外線接收器的 JavaScript 最主要用了<code>on</code>這個方法，裡面會有一個函式，帶有一個參數，這個參數就是紅外線接收器接收到的訊號數值，利用<code>innerHTML</code>與字串的相加，我們就可以把這個數值，顯示在 span 裏頭了。</p>\n<pre><code>var irrecv;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  irrecv = getIRRecv(board, 10);\n  irrecv.on(function(val){\n    irrecv.onVal = val;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = irrecv.onVal;\n  },function(){});\n});\n</code></pre><p>如果是紅外線發射器的 JavaScript ，就會使用<code>send</code>方法來傳送訊號，將訊號寫在後面就可以發送出去了。</p>\n<pre><code>var irled;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  irled = getIRLed(board, &quot;ffffffff&quot;);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n  document.getElementById(&quot;demo-area-05-btn3&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n  document.getElementById(&quot;demo-area-05-btn4&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n  document.getElementById(&quot;demo-area-05-btn5&quot;).addEventListener(&quot;click&quot;,function(){\n    irled.send(&quot;ffffffff&quot;);\n  });\n});\n</code></pre><p>以上就是控制紅外線發射器與接收器和程式碼簡介。<br>完整程式碼：<a href=\"http://bin.webduino.io/jiguh/edit?html,css,js,output\">http://bin.webduino.io/jiguh/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-KB1oJMYKqVBeKrMmQGn\">https://blockly.webduino.io/#-KB1oJMYKqVBeKrMmQGn</a></p>\n<h2 id=\"-\">紅外線發射與接收的延伸教學：</h2>\n<p><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/irrecv-1#-K0qf8JH7bENOyJgc25r\">Webduino Blockly 課程 15-1：接收紅外線訊號</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/irrecv-2#-K0qhamTHkjMc9nZg4rc\">Webduino Blockly 課程 15-2：接收紅外線訊號改變區域顏色</a><br><a href=\"https://blockly.webduino.io/?lang=zh-hant&amp;page=tutorials/irrecv-3#-K0qllY_jNznqTDWliZ4\">Webduino Blockly 課程 15-3：紅外線遙控 youtube 播放</a> </p>\n<div class=\"buy-this\">\n    <span>紅外線發射與接收相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div> \n\n\n<!-- @@close-->"},"tutorial-25-joypad":{"tag":"tutorial","src":"tutorial-25-joypad.html","title":"偵測搖桿行為","banner":"tutorial-25-01.jpg","img":"tutorial-25-01s.jpg","date":20160222,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 25：偵測搖桿行為 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"在許多遊戲機裡，搖桿是標準的遊戲機配件，一個搖桿可以發出三種訊號，分別是左右、前後以及按下去的時候，我們可以透過 Webduino 來偵測搖桿的訊號，進一步就可以用搖桿控制車子、機器人或一些實體裝置，做出許多有趣的應用。    \">\n\n<meta itemprop=\"description\" content=\"在許多遊戲機裡，搖桿是標準的遊戲機配件，一個搖桿可以發出三種訊號，分別是左右、前後以及按下去的時候，我們可以透過 Webduino 來偵測搖桿的訊號，進一步就可以用搖桿控制車子、機器人或一些實體裝置，做出許多有趣的應用。\">\n\n<meta property=\"og:description\" content=\"在許多遊戲機裡，搖桿是標準的遊戲機配件，一個搖桿可以發出三種訊號，分別是左右、前後以及按下去的時候，我們可以透過 Webduino 來偵測搖桿的訊號，進一步就可以用搖桿控制車子、機器人或一些實體裝置，做出許多有趣的應用。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/component/joypad.html\">\n\n<meta property=\"og:title\" content=\"教學範例 25：偵測搖桿行為\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-25-joypad.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-25-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-25-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-25-\">教學範例 25：偵測搖桿行為</h1>\n<p>在許多遊戲機裡，搖桿是標準的遊戲機配件，一個搖桿可以發出三種訊號，分別是左右、前後以及按下去的時候，我們可以透過 Webduino 來偵測搖桿的訊號，進一步就可以用搖桿控制車子、機器人或一些實體裝置，做出許多有趣的應用。</p>\n<div class=\"buy-this\">\n    <span>搖桿相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/CwWwQmuvL28\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>搖桿總共有五支接腳，分別是 GND、5V、VRx、VRy 和 SW，VRx 和 VRy 要接類比腳，這裏分別接在 A4 與 A5，SW 我們可以想像他就是一顆按鈕，因此接法在 GND 與 5V 之間必須加入電阻，避免按下按鈕的時候短路，但又因受限於搖桿本身的電路設計，必須採用上拉電阻的做法，也就是電阻接在 5V 的地方，訊號源也跟 5V 相連接。</p>\n<p>接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-25-02.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-25-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-25-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-25-05.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-25-06.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>搖桿相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「顯示文字」來顯示搖桿傳回的訊號，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」，此外，記得要先燒錄搖桿的韌體檔！ ( 請參考：<a href=\"https://webduino.io/tutorials/info-07-arduino-ino.html\">韌體檔案燒錄教學</a>，選擇有 joypad 檔名的韌體 )</p>\n<p><img src=\"../img/tutorials/tutorial-25-07.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放搖桿的積木，名稱設定為 joystick，腳位 X 設定為 A4、Y 設定為 A5、SW 設定為 10。</p>\n<p><img src=\"../img/tutorials/tutorial-25-08.jpg\" alt=\"\"></p>\n<p>放入「開始偵測」以及「顯示」的積木，在搖桿有動作的時候，數值就會顯示在畫面裡。</p>\n<p><img src=\"../img/tutorials/tutorial-25-09.jpg\" alt=\"\"></p>\n<p>因為搖桿會回傳五個數值 ( X、Y、SW )，但文字顯示欄位只有一個，為了可以一次將所有數值顯示出來，這裏我們<strong>使用「建立字串」的積木</strong>，利用藍色小齒輪，增加三個缺口，這樣就可以一次顯示三個數值。。</p>\n<p><img src=\"../img/tutorials/tutorial-25-10.jpg\" alt=\"\"></p>\n<p>當然只有數值不夠，還要標示這個數值代表什麼，所以這邊要用到二層的「建立字串」積木，裡面放入搖桿數值名稱，至於要取出何種數值，可以透過下拉選單選擇 ( 如果覺得字體太大，可以設定文字大小，這裏設定為 20 )。</p>\n<p><img src=\"../img/tutorials/tutorial-25-11.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，轉動或按壓搖桿，就會看見數值的變化。<br>( 解答：<a href=\"https://blockly.webduino.io/#-KB6z6vqt9sXTYqd7CN8\">https://blockly.webduino.io/#-KB6z6vqt9sXTYqd7CN8</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-25-12.jpg\" alt=\"\"></p>\n<p>如果覺得一堆小數點不好看，也可以利用「進階功能」裡頭「數值轉換」的積木，就可以設定只到小數點第一位。</p>\n<p><img src=\"../img/tutorials/tutorial-25-13.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，轉動或按壓搖桿，就會看見數值的變化。<br>( 解答：<a href=\"https://blockly.webduino.io/#-KB6zxyhUzw1sJ2RvY56\">https://blockly.webduino.io/#-KB6zxyhUzw1sJ2RvY56</a> )</p>\n<p>##範例解析 ( <a href=\"http://bin.webduino.io/wifak/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>我們使用一個 span 來顯示搖桿回傳的數值。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>搖桿的 JavaScript 使用<code>on</code>這個方法，裡面會有一個函式，帶有三個參數，這三個參數就是搖桿的 X、Y 和 SW 數值，利用<code>innerHTML</code>與字串的相加，我們就可以把這個數值，顯示在 span 裏頭了。</p>\n<pre><code>var joystick;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  joystick = getJoystick(board, 4, 5, 10);\n  document.getElementById(&quot;demo-area-01-show&quot;).style.fontSize = 20+&quot;px&quot;;\n  joystick.on(&quot;message&quot;,_read_);\n  function _read_(_x, _y, _z){\n    joystick._x = _x;\n    joystick._y = _y;\n    joystick._z = _z;\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ([String(&#39;X=&#39;) + String((Math.round((joystick._x)*10))/10),String(&#39;, Y=&#39;) + String((Math.round((joystick._y)*10))/10),String(&#39;, SW=&#39;) + String((Math.round((joystick._z)*10))/10)].join(&#39;&#39;));\n  }\n});\n</code></pre><p>以上就是控制搖桿的程式碼簡介。<br>完整程式碼：<a href=\"http://bin.webduino.io/wifak/edit?html,css,js,output\">http://bin.webduino.io/wifak/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-KB6zxyhUzw1sJ2RvY56\">https://blockly.webduino.io/#-KB6zxyhUzw1sJ2RvY56</a></p>\n<div class=\"buy-this\">\n    <span>搖桿相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-p.html\" target=\"_blank\">Webduino 擴充套件 P ( 支援 Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n\n<!-- @@close-->"},"tutorial-26-google-sheet":{"tag":"tutorial","src":"tutorial-26-google-sheet.html","title":"使用 Google 試算表控制 LED","banner":"tutorial-26-01.jpg","img":"tutorial-26-01s.jpg","date":20160307,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 26：使用 Google 試算表控制 LED :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"Google 試算表 ( Google Spreadsheet ) 是目前最方便的線上試算表，除了試算表功能一應俱全，更可以和 Google 表單搭配，變成一個簡單的問卷統計資料庫，在這個範例中，我們會填寫 Google 問卷，接著把問卷的統計數字平均並四捨五入成整數，再讓平均的分數透過 LED 的數量顯示出來。\">\n\n<meta itemprop=\"description\" content=\"Google 試算表 ( Google Spreadsheet ) 是目前最方便的線上試算表，除了試算表功能一應俱全，更可以和 Google 表單搭配，變成一個簡單的問卷統計資料庫，在這個範例中，我們會填寫 Google 問卷，接著把問卷的統計數字平均並四捨五入成整數，再讓平均的分數透過 LED 的數量顯示出來。\">\n\n<meta property=\"og:description\" content=\"Google 試算表 ( Google Spreadsheet ) 是目前最方便的線上試算表，除了試算表功能一應俱全，更可以和 Google 表單搭配，變成一個簡單的問卷統計資料庫，在這個範例中，我們會填寫 Google 問卷，接著把問卷的統計數字平均並四捨五入成整數，再讓平均的分數透過 LED 的數量顯示出來。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/component/led-google-form.html\">\n\n<meta property=\"og:title\" content=\"教學範例 26：使用 Google 試算表控制 LED\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-26-google-sheet.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-26-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-26-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-26-google-led\">教學範例 26：使用 Google 試算表控制 LED</h1>\n<p>Google 試算表 ( Google Spreadsheet ) 是目前最方便的線上試算表，除了試算表功能一應俱全，更可以和 Google 表單搭配，變成一個簡單的問卷統計資料庫，在這個範例中，我們會填寫 Google 問卷，接著把問卷的統計數字平均並四捨五入成整數，再讓平均的分數透過 LED 的數量顯示出來。</p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/mpwSAFwlL_0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>這個範例只會用到 LED 燈，但因為評比分數有七分，所以會接到 7 顆 LED 燈，將 LED 燈利用麵包板與單心線，長腳分別接到 7、8、9、10、11、12、13，然後短腳和 GND 連接。</p>\n<p>接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-26-02.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-26-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-26-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-26-05.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">操作解析</h2>\n<p>因為要使用 Google 表單，所以要先註冊 Google 的帳號，開啟雲端硬碟的功能，在裡面就可以開啟新資料夾，或者直接在根目錄新增「Google 表單」。( 範例中建立了一個名為 test 的資料夾 )</p>\n<p><img src=\"../img/tutorials/tutorial-26-06.jpg\" alt=\"\"></p>\n<p>打開表單，輸入表單名稱，這個名稱將會對應到同樣名稱的試算表，完成後選擇「回覆」標籤，點選「在 Google 試算表中查看回應」，就會自動幫我們建立一份對應的 Google 試算表。</p>\n<p><img src=\"../img/tutorials/tutorial-26-07.jpg\" alt=\"\"></p>\n<p>完成後切回「問題」標籤，在這邊可以新增一些問卷的問題，我們新增一個「線性刻度」的單選題，設定 1 到 7 分，在使用者填妥送出後，Google 試算表內就會記錄該使用者對應的分數。</p>\n<p><img src=\"../img/tutorials/tutorial-26-08.jpg\" alt=\"\"></p>\n<p>點選右上角眼睛形狀的圖示「預覽」，就可以打開這份表單，我們可以先嘗試填寫，先選擇七分，然後按下「提交」送出。</p>\n<p><img src=\"../img/tutorials/tutorial-26-09.jpg\" alt=\"\"></p>\n<p>送出之後，回到 Google 雲端硬碟，也就是剛剛建立表單的資料夾，把對應的 Google 試算表打開。</p>\n<p><img src=\"../img/tutorials/tutorial-26-10.jpg\" alt=\"\"></p>\n<p>打開後會看到第一列是「時間戳記」，表示使用者填寫表單的時間，第二列是分數。</p>\n<p><img src=\"../img/tutorials/tutorial-26-11.jpg\" alt=\"\"></p>\n<p>為了要計算平均，我們在第三列的第一欄 ( C1 ) 寫上「平均」，將平均數計算在第四列第一欄 ( D1 )。</p>\n<p><img src=\"../img/tutorials/tutorial-26-12.jpg\" alt=\"\"></p>\n<p>計算的公式如下：</p>\n<pre><code>=IF(TYPE(ROUND(AVERAGE(B:B)))=16,0,ROUND(AVERAGE(B:B)))\n</code></pre><p>接著我們會把開發板對應的 Device 填寫在第五列第一欄 ( E1 ) 的地方，這樣就可以讓對應的開發板進行燈號顯示。</p>\n<p><img src=\"../img/tutorials/tutorial-26-13.jpg\" alt=\"\"></p>\n<p>前面這些步驟完成後，再來就是<strong>最重要</strong>的部分，選擇「工具」，選擇「指令碼編輯器」，就會打開一份屬於這個試算表的指令碼工具，我們在中間編輯區域，輸入以下這段程式碼，這段程式碼表示開發板會依據平均值數字，讓對應數量的 LED 燈亮起來。</p>\n<p><img src=\"../img/tutorials/tutorial-26-14.jpg\" alt=\"\"></p>\n<pre><code>function myFunction() {\n  var sheet = SpreadsheetApp.getActiveSheet();\n  var device = sheet.getRange(&#39;E1&#39;).getValue();\n  var a = sheet.getRange(&#39;D1&#39;).getValue();\n  led(device,a);\n}\n\nfunction led(d,r){\n  for(var i=7; i&lt;=13; i++){\n    setPin(d,i,0);\n    if(i==13){\n      for(var j=0; j&lt;r; j++){\n        setPin(d,13-j,1);\n      }\n    }\n  }\n}\n\nfunction setPin(id,pin,state){\n   var response = UrlFetchApp.fetch(&quot;http://webduino.tw/iot/&quot;+id+&quot;/set/&quot;+pin+&quot;/&quot;+state);\n}\n</code></pre><p>輸入完成後，點選「資源」，選擇「您所有的觸發程序」，這邊會要求要先輸入新的專案名稱，就輸入並按下確定。(過程中如果遇到需要「授權」，按下確定授權就可以 ) 接著點選「尚未建立觸發程序，按一下這裡來新增觸發程序」。</p>\n<p><img src=\"../img/tutorials/tutorial-26-15.jpg\" alt=\"\"></p>\n<p>這邊可以選擇讓我們的程式，在試算表在「變更時」觸發，以及在「提交表單時」觸發，如此一來，當使用者填寫完表單送出後，就會觸發程式。</p>\n<p><img src=\"../img/tutorials/tutorial-26-16.jpg\" alt=\"\"></p>\n<p>進行到這一步，在第五列第一欄 ( E1 ) 的地方填入開發板的 device 名稱，確認開發板上線之後 ( 可透過 <a href=\"https://webduino.io/device.html\">https://webduino.io/device.html</a> )，填寫表單並送出，就會看到對應數量的 LED 亮起了。</p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-27-tracking-face":{"tag":"tutorial","src":"tutorial-27-tracking-face.html","title":"人臉追蹤點亮 LED 燈","banner":"tutorial-27-01.jpg","img":"tutorial-27-01s.jpg","date":20160308,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 27：人臉追蹤點亮 LED 燈 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"隨著瀏覽器的效能越來越強大，我們開始可以透過許多的網頁技術，實現我們長久以來的想像，在這個範例中，將會使用網路攝影機，進行人臉追蹤，根據人臉的位置，來點亮 LED 燈。\">\n\n<meta itemprop=\"description\" content=\"隨著瀏覽器的效能越來越強大，我們開始可以透過許多的網頁技術，實現我們長久以來的想像，在這個範例中，將會使用網路攝影機，進行人臉追蹤，根據人臉的位置，來點亮 LED 燈。\">\n\n<meta property=\"og:description\" content=\"隨著瀏覽器的效能越來越強大，我們開始可以透過許多的網頁技術，實現我們長久以來的想像，在這個範例中，將會使用網路攝影機，進行人臉追蹤，根據人臉的位置，來點亮 LED 燈。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/component/led-tracking-face.html\">\n\n<meta property=\"og:title\" content=\"教學範例 27：人臉追蹤點亮 LED 燈\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-27-tracking-face.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-27-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-27-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-27-led-\">教學範例 27：人臉追蹤點亮 LED 燈</h1>\n<p>隨著瀏覽器的效能越來越強大，我們開始可以透過許多的網頁技術，實現我們長久以來的想像，在這個範例中，將會使用網路攝影機，進行人臉追蹤，根據人臉的位置，來點亮 LED 燈。</p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/GxOh2Gv9GJA\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>因為這個範例只需要用到一顆 LED 燈，所以接線方式很簡單，首先，LED 燈有「長短腳」之分，長腳接「高電位」( 帶有數字的腳位 )，短腳接「低電位」( GND、接地 )，因此我們只要直接將 LED 插到腳位上即可，或使用麵包板與麵包線外接出來，在這裡<strong>長腳接 10，短腳接 GND</strong>。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-27-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-27-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-27-03.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「影像追蹤」來顯示攝影機的影像，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「影像追蹤」。</p>\n<p><img src=\"../img/tutorials/tutorial-27-04.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入 LED 的積木，名稱設定為 led，腳位設定 10。</p>\n<p><img src=\"../img/tutorials/tutorial-27-05.jpg\" alt=\"\"></p>\n<p>如果要使用影像追蹤，點選左側「進階功能」的選項，選擇「影像追蹤」，裡面就會有對應的積木。</p>\n<p><img src=\"../img/tutorials/tutorial-27-06.jpg\" alt=\"\"></p>\n<p>首先要放入影像追蹤模組，這邊我們會先設定要使用「人臉追蹤」還是「顏色追蹤」，範例將使用「人臉追蹤」，選擇好了之後，就要來設定追蹤成功的動作。</p>\n<p><img src=\"../img/tutorials/tutorial-27-07.jpg\" alt=\"\"></p>\n<p>在執行動作內放入邏輯判斷的積木，判斷如果人臉的 X 座標數值大於 100 的時候，就讓 LED 燈亮起，反之小於 100 就讓 LED 燈熄滅。</p>\n<p><img src=\"../img/tutorials/tutorial-27-08.jpg\" alt=\"\"></p>\n<p>點選下拉選單，可以看到除了追蹤 X 座標外，還可以追蹤 Y 座標、寬度、高度與 total 數量，如果是顏色追蹤，也可以選擇追蹤出來的顏色色彩。</p>\n<p><img src=\"../img/tutorials/tutorial-27-09.jpg\" alt=\"\"></p>\n<p>放入開始追蹤的積木，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，右邊的網頁就會出現攝影機的影像，就可以開始追蹤了。</p>\n<p><img src=\"../img/tutorials/tutorial-27-10.jpg\" alt=\"\"></p>\n<p>如果發現沒有反應，因為瀏覽器有安全性限制 ( 要啟用網路攝影機會有隱私及安全性問題 )，解決的方法就是把網址改成 https 開頭，就可以順利執行。</p>\n<p><img src=\"../img/tutorials/tutorial-27-11.jpg\" alt=\"\"></p>\n<p>如果想知道追蹤數值，我們可以利用「進階功能」的「控制台顯示」，利用控制台 ( console ) 來顯示追蹤數值，因為要使用瀏覽器的控制台，我們就要把控制台打開，在 windows 可以按 F12，Mac 可以按 option + command + i，。</p>\n<p><img src=\"../img/tutorials/tutorial-27-12.jpg\" alt=\"\"></p>\n<p>到這邊，基本上就已經可以使用人臉影像追蹤囉。( 解答：<a href=\"https://blockly.webduino.io/#-KCTXIwqV8sEumJODx8D\">https://blockly.webduino.io/#-KCTXIwqV8sEumJODx8D</a> )</p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/famar/1/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>除了上面兩支 JS，這裏我們還用了兩支 Open Source 的程式：tracking-min.js、face-min.js，用同樣的方法引入之後才可以使用人臉影像追蹤的功能</p>\n<pre><code>&lt;script src=&quot;https://blockly.webduino.io/lib/tracking-min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://blockly.webduino.io/lib/face-min.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裏頭有一個 video 和 canvas，兩個的大小一樣，目的是用 video 顯示影像，然後用 canvas 分析影像並判斷人臉，然後用紅色方框將人臉框住。</p>\n<pre><code>&lt;div id=&quot;demo-area-08-content&quot;&gt;\n  &lt;video id=&quot;demo-area-08-video&quot; preload=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; controls=&quot;&quot;&gt;&lt;/video&gt;\n  &lt;canvas id=&quot;demo-area-08-canvas&quot;&gt;&lt;/canvas&gt;\n&lt;/div&gt;\n</code></pre><p>CSS 的部分主要就是制定 video 與 canvas 的大小。</p>\n<pre><code>#demo-area-08-content {\n  position: relative;\n  width: 100%;\n  max-width: 300px;\n  height: 200px;\n}\n\n#demo-area-08-video {\n  top: 0;\n  left: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n#demo-area-08-canvas {\n  top: 0;\n  left: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n</code></pre><p>JavaScript 比較多一些，主要是使用 tracking 相關的方法，當中也有一些設定：<code>setInitialScale</code>、<code>setStepSize</code>、<code>setEdgesDensity</code>，分別代表取向的尺度、頻率和深度，當然如果設定的太精細，電腦就要耗費相對多的效能處理，反之如果追求速度，就可以設定的粗糙一些，但相對追蹤出來的準確度就會降低。( 詳細可以參考：<a href=\"https://trackingjs.com/\">https://trackingjs.com/</a> )  </p>\n<p>如果要設定邊框顏色，可以從<code>strokeStyle</code>修改，預設的是紅色 #f00，然後這邊判斷就只是很簡單的 if 和 else，針對 data 的 x 屬性來判斷 ( 人臉追蹤預設會有 x、y、width、height 和 total，顏色追蹤則沒有 total，改成 color )</p>\n<pre><code>var led;\nvar track;\n\nboardReady(&#39;&#39;, function (board) {\n  board.samplingInterval = 20;\n  led = getLed(board, 10);\n  track = {};\n  track.canvas = document.getElementById(&quot;demo-area-08-canvas&quot;);\n  track.context = track.canvas.getContext(&quot;2d&quot;);\n  track.myTracker = new tracking.ObjectTracker(&quot;face&quot;);\n  track.myTracker.setInitialScale(4);\n  track.myTracker.setStepSize(0.5);\n  track.myTracker.setEdgesDensity(0.1);\n\n  track.myTracker.on(&quot;track&quot;, function(event) {\n    if (event.data.length === 0) {\n      track.context.clearRect(0, 0, track.canvas.width, track.canvas.height);\n    } else {\n      track.context.clearRect(0, 0, track.canvas.width, track.canvas.height);\n      event.data.forEach(function(data) {\n        console.log(data.x);\n    if (data.x &gt; 100) {\n      led.on();\n    } else {\n      led.off();\n    }\n        if(data.color){\n          track.context.strokeStyle = track.storkColor[data.color];\n        }else{\n          track.context.strokeStyle = &quot;#f00&quot;;\n        }\n        track.context.lineWidth = 5;\n        track.context.strokeRect(data.x, data.y, data.width, data.height-30);\n        track.context.font = &quot;11px Helvetica&quot;;\n        track.context.fillStyle = &quot;#fff&quot;;\n      });\n    }\n  });\n  track.trackerTask = tracking.track(&quot;#demo-area-08-video&quot;, track.myTracker, {\n    camera: true\n  });\n\n  track.context.clearRect(0, 0, track.canvas.width, track.canvas.height);\n  track.trackerTask.run();\n});\n</code></pre><p>以上就是人臉影像追蹤的 Blockly 和程式碼簡介。<br>完整程式碼：<a href=\"https://bin.webduino.io/famar/1/edit?html,css,js,output\">https://bin.webduino.io/famar/1/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-KCTXIwqV8sEumJODx8D\">https://blockly.webduino.io/#-KCTXIwqV8sEumJODx8D</a></p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-28-dancing-leds":{"tag":"tutorial","src":"tutorial-28-dancing-leds.html","title":"霹靂燈 ( 12 顆 LED + 迴圈 )","banner":"tutorial-28-01.jpg","img":"tutorial-28-01s.jpg","date":20160330,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 28：霹靂燈 ( 12 顆 LED + 迴圈 ) :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"在程式邏輯的世界裡，「迴圈」是很重要也是必備的程式之一，在這個範例中，我們將會用迴圈的方式，讓 12 顆 LED 燈交互閃爍，同時也可以控制交互閃爍的速度，實際做出一個超酷的霹靂燈效果。\">\n\n<meta itemprop=\"description\" content=\"在程式邏輯的世界裡，「迴圈」是很重要也是必備的程式之一，在這個範例中，我們將會用迴圈的方式，讓 12 顆 LED 燈交互閃爍，同時也可以控制交互閃爍的速度，實際做出一個超酷的霹靂燈效果。\">\n\n<meta property=\"og:description\" content=\"在程式邏輯的世界裡，「迴圈」是很重要也是必備的程式之一，在這個範例中，我們將會用迴圈的方式，讓 12 顆 LED 燈交互閃爍，同時也可以控制交互閃爍的速度，實際做出一個超酷的霹靂燈效果。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/component/led-dancing.html\">\n\n<meta property=\"og:title\" content=\"教學範例 28：霹靂燈 ( 12 顆 LED + 迴圈 )\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-28-dancing-leds.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-28-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-28-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-28-12-led-\">教學範例 28：霹靂燈 ( 12 顆 LED + 迴圈 )</h1>\n<p>在程式邏輯的世界裡，「迴圈」是很重要也是必備的程式之一，在這個範例中，我們將會用迴圈的方式，讓 12 顆 LED 燈交互閃爍，同時也可以控制交互閃爍的速度，實際做出一個超酷的霹靂燈效果。</p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/wwnmfd5Mc-Y\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>因為這個範例需要用到 12 顆 LED 燈，所以我們就直接接在 2 ~ 13 號腳，如果麵包板有共地端的話就直接用其接 GND，不然就是分別用單心線共地。</p>\n<p>實際接線照片：\n<img src=\"../img/tutorials/tutorial-28-02.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-28-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-28-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-28-05.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例會用網頁「拉霸」來顯控制速度並顯示速度數值，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「拉霸操作」。</p>\n<p><img src=\"../img/tutorials/tutorial-28-06.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內先放入三個變數，第一個 pinNum 表示一開始的腳位號碼，addNum 則是每次腳位變換要增加多少，如果設定 1，就表示 2 亮完就會變 3 亮，3 亮完就會變 4 亮，第三個變數是 time，就是我們的切換速度 ( 0.1 秒做切換 )，這裏要特別注意，<strong>這邊我們所設定的變數，尚未與各個腳位或 LED 燈綁定，而是待會要綁定的時候，會用到這些變數</strong> ( 換句話說因為要從 2 變到 13，我們要用一個變數來裝載這些會變化的數字 )。</p>\n<p><img src=\"../img/tutorials/tutorial-28-07.jpg\" alt=\"\"></p>\n<p>再來先設定拉霸的行為，拉霸調整的時候，最主要會改變 time 的數值 ( 這也是為什麼要把 time 設為變數，這樣才可以動態更改 )，一開始我們先顯示 time，然後設定拉霸最小值為 0.02 秒，最大值 0.2 秒，間距 0.01 秒，預設值就是 time。</p>\n<p><img src=\"../img/tutorials/tutorial-28-08.jpg\" alt=\"\"></p>\n<p>接著將會用到迴圈，迴圈的積木在「基本功能」裡面。</p>\n<p><img src=\"../img/tutorials/tutorial-28-09.jpg\" alt=\"\"></p>\n<p>除了迴圈，還會用到「等待」，等待的積木在「進階功能」裡面。</p>\n<p><img src=\"../img/tutorials/tutorial-28-10.jpg\" alt=\"\"></p>\n<p>先看到最外層的迴圈，在缺口前的「直到」，表示「直到發生什麼事情，這個迴圈就會停下來」，如果我們不做設定，就會是一個無窮迴圈，因為這裡我們要讓霹靂燈一直跑，所以就不做設定，而第二層的迴圈有個數字 11，表示這個迴圈會執行 11 次，11 次結束之後會把 addNum 變成負的 addNum，也就是從每次加 1 變成每次減 1，這樣霹靂燈才會從 2 跑到 13 之後再由 13 跑回 2，當變成正或負完成後，就會再度執行外層的迴圈，就會又跑一次 11 次的這個內層迴圈。</p>\n<p>接著看到第二層迴圈的內容，這裏就用到了「I/O 腳位」的積木：「設定 pin 腳」，這裏我們指定 pin 這個變數為 pinNum 這個腳位 ( 注意 pinNum 是會變的數字，剛剛我們已經預設為 2 )，然後再設定一個 next 腳位是 pinNum + addNum，接著我們把 pin 的輸出變成 0，next 的輸出設為 1，這就表示 2 號燈熄滅 3 號燈亮，最後我們把 pinNum 再加一次 addNum，如此的設定，就表示當這次迴圈之後，下次一迴圈執行就會是 3 號燈熄滅，4 號燈亮起。</p>\n<p>如果對於腳位積木不了解的，可以參考：<a href=\"info-10-pin.html\">Webduino 腳位偵測與設定</a></p>\n<p><img src=\"../img/tutorials/tutorial-28-11.jpg\" alt=\"\"></p>\n<p>到這邊就已經完成了用拉霸控制霹靂燈的程式，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就會看到霹靂燈開始左右跑來跑去，同時我們也可以用拉霸控制速度了。( 解答：<a href=\"http://blockly.webduino.io/#-KE6wtNh5PXDjosOGkwU\">http://blockly.webduino.io/#-KE6wtNh5PXDjosOGkwU</a> )</p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/mibim/1/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>，因為這裡有用到同步處理的迴圈，為了讓其他瀏覽器也支援，記得再引入 <code>runtime.min.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://blockly.webduino.io/lib/runtime.min.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裏頭有一個 span 顯示拉霸數值，還有一個 range 拉霸。</p>\n<pre><code>數值：&lt;span id=&quot;demo-area-06-input-value&quot;&gt;90&lt;/span&gt;&lt;br&gt;\n拉霸：&lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;180&quot; step=&quot;5&quot; value=&quot;90&quot; id=&quot;demo-area-06-input&quot;&gt;\n</code></pre><p>JavaScript 使用了 while 和 for 迴圈來進行剛剛的同步迴圈處理，如果要運行在自己的電腦或裝置上頭，記得在我們程式編輯工具的 ES6/Babel 最上方下拉選單，選擇 JavaScript，就會看到可以實際運行的程式碼了。    </p>\n<pre><code>(async function () {\n\nvar pinNum;\nvar addNum;\nvar time;\nvar pin;\nvar next;\n\n\nboardReady(&#39;&#39;, async function (board) {\n  board.samplingInterval = 250;\n  pinNum = 2;\n  addNum = 1;\n  time = 0.1;\n  document.getElementById(&quot;demo-area-06-input-value&quot;).innerHTML = time;\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;min&quot;,0.02);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;max&quot;,0.2);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;step&quot;,0.01);\n  document.getElementById(&quot;demo-area-06-input&quot;).setAttribute(&quot;value&quot;,time);\n  document.getElementById(&quot;demo-area-06-input&quot;).oninput = async function(_value){\n    _value = this.value;\n    time = _value;\n    document.getElementById(&quot;demo-area-06-input-value&quot;).innerHTML = _value;\n  };\n  while (!false) {\n    for (var count = 0; count &lt; 11; count++) {\n      pin = getPin(board, pinNum);\n      next = getPin(board, (pinNum + addNum));\n      pin.write(0);\n      next.write(1);\n      await delay(time);\n      pinNum = pinNum + addNum;\n    }\n    addNum = -addNum;\n  }\n});\n\n}());\n</code></pre><p>以上就是用拉霸控制 12 顆 LED 產生的霹靂燈效果。<br>完整程式碼：<a href=\"https://bin.webduino.io/mibim/1/edit?html,css,js,output\">https://bin.webduino.io/mibim/1/edit?html,css,js,output</a><br>解答：<a href=\"http://blockly.webduino.io/#-KE6wtNh5PXDjosOGkwU\">http://blockly.webduino.io/#-KE6wtNh5PXDjosOGkwU</a></p>\n<div class=\"buy-this\">\n    <span>LED 相關套件：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-29-firebase-dht":{"tag":"tutorial","src":"tutorial-29-firebase-dht.html","title":"使用 Firebase 資料庫記錄溫濕度","banner":"tutorial-29-01.jpg","img":"tutorial-29-01s.jpg","date":20160330,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 29：使用 Firebase 資料庫記錄溫濕度 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"當我們會使用溫濕度傳感器獲取環境溫濕度之後，下一步一定是想要把溫濕度的數值儲存起來，這時候我們就要使用資料庫來記錄，但資料庫也不是每個人都會的，所以這邊我們將會使用 Google 的雲端資料庫服務：Firebase，透過 Webduino Blockly，我們就可以非常輕鬆的將溫濕度數值，存入雲端資料庫。\">\n\n<meta itemprop=\"description\" content=\"當我們會使用溫濕度傳感器獲取環境溫濕度之後，下一步一定是想要把溫濕度的數值儲存起來，這時候我們就要使用資料庫來記錄，但資料庫也不是每個人都會的，所以這邊我們將會使用 Google 的雲端資料庫服務：Firebase，透過 Webduino Blockly，我們就可以非常輕鬆的將溫濕度數值，存入雲端資料庫。\">\n\n<meta property=\"og:description\" content=\"當我們會使用溫濕度傳感器獲取環境溫濕度之後，下一步一定是想要把溫濕度的數值儲存起來，這時候我們就要使用資料庫來記錄，但資料庫也不是每個人都會的，所以這邊我們將會使用 Google 的雲端資料庫服務：Firebase，透過 Webduino Blockly，我們就可以非常輕鬆的將溫濕度數值，存入雲端資料庫。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/sensor/dht-firebase.html\">\n\n<meta property=\"og:title\" content=\"教學範例 29：使用 Firebase 資料庫記錄溫濕度\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-29-firebase-dht.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-29-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-29-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-29-firebase-\">教學範例 29：使用 Firebase 資料庫記錄溫濕度</h1>\n<p>當我們會使用溫濕度傳感器獲取環境溫濕度之後，下一步一定是想要把溫濕度的數值儲存起來，這時候我們就要使用資料庫來記錄，但資料庫也不是每個人都會的，所以這邊我們將會使用 Google 的雲端資料庫服務：Firebase，透過 Webduino Blockly，我們就可以非常輕鬆的將溫濕度數值，存入雲端資料庫。</p>\n<div class=\"buy-this\">\n    <span>溫濕度傳感器：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/g2vcIGukV6k\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>溫濕度傳感器有四隻針腳，第一隻針腳為 v ( 接 3.3V )，第二隻為 data ( 接 10 )，第三隻沒有作用，為 N/C，第四隻為 GND。</p>\n<p><img src=\"../img/tutorials/tutorial-29-02.jpg\" alt=\"\"></p>\n<p>可以直接將溫濕度傳感器接在馬克 1 號上，或利用麵包板接線出來。</p>\n<p>馬克一號接線示意圖：\n<img src=\"../img/tutorials/tutorial-29-03.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：\n<img src=\"../img/tutorials/tutorial-29-03-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-29-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>溫濕度傳感器：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-firebase\">註冊 Firebase</h2>\n<p>要使用 Firebase 就要先進行註冊，前往 Firebase 官方網站：<a href=\"https://www.firebase.com/\">https://www.firebase.com/</a>，有帳號的就可以直接登入，或直接註冊 sign up。</p>\n<p><img src=\"../img/tutorials/tutorial-29-05.jpg\" alt=\"\"></p>\n<p>註冊完成登入後，我們就可以建立專案，這裏的專案就是我們的資料庫，每個資料庫都會有自己的網址。</p>\n<p><img src=\"../img/tutorials/tutorial-29-06.jpg\" alt=\"\"></p>\n<p>點選 Manage App 就可以進入專案查看與設定，Firebase 都是使用 JSON 的格式儲存資料，這裏我們只要先了解資料會儲存在裡面，如果對於 Firebase 想瞭解更多，可以參考 Firebase 的教學 ( <a href=\"https://www.firebase.com/docs/web/api/\">https://www.firebase.com/docs/web/api/</a> )，在這裡我們只需要記下資料庫的網址，就可以開始記錄溫濕度囉！</p>\n<p><img src=\"../img/tutorials/tutorial-29-07.jpg\" alt=\"\"></p>\n<p>由於 Firebase 改版的緣故，預設的存取權限是需要帳號的，但存取權我們可以透過簡單的方式修改，如果你是新版的 Firebase，第一步先選擇左邊選單的 database。</p>\n<p><img src=\"../img/tutorials/tutorial-29-13.jpg\" alt=\"\"></p>\n<p>選擇「規則」的頁籤，可以看到裡面預設的帳號規則是「不能為 null」。</p>\n<p><img src=\"../img/tutorials/tutorial-29-14.jpg\" alt=\"\"></p>\n<p>我們只要把這段規則改成下面這樣就可以了。</p>\n<pre><code>{\n    &quot;rules&quot;: {\n        &quot;.read&quot;: true,\n        &quot;.write&quot;: true\n    }\n}\n</code></pre><p><img src=\"../img/tutorials/tutorial-29-15.jpg\" alt=\"\"></p>\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，因為這個範例除了用 Firebase 記錄溫濕度之外，還會用網頁「顯示文字」來顯示溫度或濕度，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「顯示文字」。</p>\n<p><img src=\"../img/tutorials/tutorial-29-08.jpg\" alt=\"\"></p>\n<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入溫濕度積木，名稱設定為 dht，腳位設定為 11。</p>\n<p><img src=\"../img/tutorials/tutorial-29-09.jpg\" alt=\"\"></p>\n<p>接著放入載入 Firebase 模組的積木，把剛剛資料庫的網址貼在裡面，然後在下面放入每 1000 毫秒 ( 1 秒 ) 偵測溫濕度的積木，注意，不要把載入 Firebase 模組的積木放到裡面，不然就會變成每一秒載入一次模組。</p>\n<p><img src=\"../img/tutorials/tutorial-29-10.jpg\" alt=\"\"></p>\n<p>在每一秒偵測溫濕度的肚子裡，先放入顯示溫濕度數值的積木，讓溫濕度可以顯示在右邊的網頁，然後放入 Firebase 的積木，這裏我們可以用藍色小齒輪增加欄位，填入欄位名稱，並將溫濕度和當下的時間放在後面。</p>\n<p><img src=\"../img/tutorials/tutorial-29-11.jpg\" alt=\"\"></p>\n<p>到這邊就已經完成了用 Firebase 記錄溫濕度數值，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，將網頁切換至 Firebase，就會看到資料出現了。( 解答：<a href=\"http://blockly.webduino.io/#-KE9NjIuBmQ81j-tnYu7\">http://blockly.webduino.io/#-KE9NjIuBmQ81j-tnYu7</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-29-12.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/vohen/1/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>因為我們使用 Firebase，所以還要再額外載入 Firebase 的 JavaScript。( 從他們的官方網站可以看到連結 <a href=\"https://www.firebase.com/docs/web/quickstart.html\">https://www.firebase.com/docs/web/quickstart.html</a> )</p>\n<pre><code>&lt;script src=&quot;https://cdn.firebase.com/js/client/2.4.2/firebase.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 裏頭只有一個 span 顯示溫濕度數值。</p>\n<pre><code>&lt;span id=&quot;demo-area-01-show&quot;&gt;123&lt;/span&gt;\n</code></pre><p>JavaScript 的第一個 function 是獲取當下時間的函式，當我們呼叫這段函式就可以獲得當前時間，在 boardReady 裡面，使用了 Firebase 提供的 API，我們利用 push 的指令將格式為物件的數值記錄到資料庫裡。    </p>\n<pre><code>var dht;\nvar myFirebase;\n\nfunction get_time(t) {\n  var varTime = new Date(),\n    varHours = varTime.getHours(),\n    varMinutes = varTime.getMinutes(),\n    varSeconds = varTime.getSeconds();\n  var varNow;\n  if (t == &quot;hms&quot;) {\n    varNow = varHours + &quot;:&quot; + varMinutes + &quot;:&quot; + varSeconds;\n  } else if (t == &quot;h&quot;) {\n    varNow = varHours;\n  } else if (t == &quot;m&quot;) {\n    varNow = varMinutes;\n  } else if (t == &quot;s&quot;) {\n    varNow = varSeconds;\n  }\n  return varNow;\n}\n\nboardReady(&#39;&#39;, async function (board) {\n  board.samplingInterval = 250;\n  dht = getDht(board, 11);\n  myFirebase = new Firebase(&quot;https://&lt;YOUR-FIREBASE-APP&gt;.firebaseio.com&quot;);\n  dht.read(function(evt){\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = ([dht.temperature,&#39; , &#39;,dht.humidity].join(&#39;&#39;));\n    myFirebase.push({\n      time:get_time(&quot;hms&quot;),\n      t:dht.temperature,\n      h:dht.humidity\n    });\n  }, 1000);\n});\n</code></pre><p>以上就是用 Firebase 做為資料庫，記錄溫濕度的數值。<br>完整程式碼：<a href=\"https://bin.webduino.io/vohen/1/edit?html,css,js,output\">https://bin.webduino.io/vohen/1/edit?html,css,js,output</a><br>解答：<a href=\"http://blockly.webduino.io/#-KE9NjIuBmQ81j-tnYu7\">http://blockly.webduino.io/#-KE9NjIuBmQ81j-tnYu7</a></p>\n<div class=\"buy-this\">\n    <span>溫濕度傳感器：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-30-motor-ic":{"tag":"tutorial","src":"tutorial-30-motor-ic.html","title":"雙馬達驅動模組改造玩具車","banner":"tutorial-30-01.jpg","img":"tutorial-30-01s.jpg","date":20160622,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 30：雙馬達驅動模組改造玩具車 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"透過「馬達驅動模組」的輔助，我們可以讓一般家用玩具車連接上 Webduino 開發板，進一步使用 Wi-Fi 來操控玩具車，簡簡單單幾個步驟，百元玩具車也可以透過手機、電腦操作，甚至做到遠端遙控、多台連動...等動輒數千元的智慧玩具的功能。\">\n\n<meta itemprop=\"description\" content=\"透過「馬達驅動模組」的輔助，我們可以讓一般家用玩具車連接上 Webduino 開發板，進一步使用 Wi-Fi 來操控玩具車，簡簡單單幾個步驟，百元玩具車也可以透過手機、電腦操作，甚至做到遠端遙控、多台連動...等動輒數千元的智慧玩具的功能。\">\n\n<meta property=\"og:description\" content=\"透過「馬達驅動模組」的輔助，我們可以讓一般家用玩具車連接上 Webduino 開發板，進一步使用 Wi-Fi 來操控玩具車，簡簡單單幾個步驟，百元玩具車也可以透過手機、電腦操作，甚至做到遠端遙控、多台連動...等動輒數千元的智慧玩具的功能。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/example/toycar-motor-ic.html\">\n\n<meta property=\"og:title\" content=\"教學範例 30：雙馬達驅動模組改造玩具車\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-30-motor-ic.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-30-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-30-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-30-\">教學範例 30：雙馬達驅動模組改造玩具車</h1>\n<p>透過「L9110S 雙馬達驅動模組」的輔助，我們可以讓一般家用玩具車連接上 Webduino 開發板，進一步使用 Wi-Fi 來操控玩具車，簡簡單單幾個步驟，百元玩具車也可以透過手機、電腦操作，甚至做到遠端遙控、多台連動...等動輒數千元的智慧玩具的功能 ( 只要是兩顆馬達控制的玩具都可以改造 )。 </p>\n<div class=\"buy-this\">\n    <span>L9110S 馬達驅動模組：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/twdVMSYF4rQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線示意圖</h2>\n<p>「L9110S 雙馬達驅動模組」有兩端，一端有四個需要用十字或一字螺絲起子鎖定的接孔，上方標示 MOTOR A 和 MOTOR B，分別接上兩顆馬達，另外一端有六個針腳，要使用公母杜邦線來和 Webduino 開發板連接，GND 接 GND，VCC 接 VCC 或 5V，MOTER A 的馬達對應到 A-B 和 A-IA 的針腳，MOTER B 的馬達對應到 B-B 和 B-IA 的針腳。</p>\n<p><img src=\"../img/tutorials/tutorial-30-02.jpg\" alt=\"\"></p>\n<h2 id=\"-\">實際接線與玩具改造</h2>\n<p>這是一台陳年古董的百元唐老鴨玩具車。</p>\n<p><img src=\"../img/tutorials/tutorial-30-03.jpg\" alt=\"\"></p>\n<p>把玩具車打開，內部構造就是兩顆馬達，前面的馬達用齒輪控制左右轉，後面的馬達則是用齒輪控制往前或往後，然後因為玩具車本身是無線電遙控，所以內部有一塊無線電的晶片。</p>\n<p><img src=\"../img/tutorials/tutorial-30-04.jpg\" alt=\"\"></p>\n<p>毫不留情地把線剪斷 ( 注意，連接車體的電線要留長一點，方便後續接線使用 )。</p>\n<p><img src=\"../img/tutorials/tutorial-30-05.jpg\" alt=\"\"></p>\n<p>使用電子材料行購買的「杜邦端子」( 公公、公母 )。</p>\n<p><img src=\"../img/tutorials/tutorial-30-06.jpg\" alt=\"\"></p>\n<p>將剛剛剪斷的電線改造成杜邦線 ( 這樣就不用焊接，很容易地和開發板串接，不過如果只是要鎖到驅動模組上，也是可以不用杜邦線 )。</p>\n<p><img src=\"../img/tutorials/tutorial-30-07.jpg\" alt=\"\"></p>\n<p>把馬達和雙馬達驅動模組組合。</p>\n<p><img src=\"../img/tutorials/tutorial-30-08.jpg\" alt=\"\"></p>\n<p>把外殼裝上去，想辦法把馬達驅動模組放到外面，如果車體內放得下也是可以，不過因為後續要接線，還是放到車體外比較方便。</p>\n<p><img src=\"../img/tutorials/tutorial-30-09.jpg\" alt=\"\"></p>\n<p>和 Webduino 開發板組合 ( 這裏組合 Webduino 馬克 1 號 )，GND 接 GND，VCC 接 VCC 或 5V，MOTER A 的馬達對應到 A-B 和 A-IA 的針腳，MOTER B 的馬達對應到 B-B 和 B-IA 的針腳。</p>\n<p><img src=\"../img/tutorials/tutorial-30-10.jpg\" alt=\"\"></p>\n<p>完成後接上行動電源，用黏土或膠帶固定在玩具車上，就完成了一台 Wi-Fi 遙控的玩具車囉！</p>\n<p><img src=\"../img/tutorials/tutorial-30-11.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>L9110S 馬達驅動模組：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，因為這裡純粹要控制腳位 1 或 0，最簡單的方法就是用 LED 的積木來實作，因為兩顆馬達總共有四條線，所以要放入四個 LED 的積木。</p>\n<p><img src=\"../img/tutorials/tutorial-30-12.jpg\" alt=\"\"></p>\n<p>再來我們使用「偵測鍵盤按下」的積木，把上下左右的事件對應進去積木裡，按下「上」的時候就讓 a 的狀態為 on，按下「下」的時候就讓 b 的狀態為 on，依此類推。</p>\n<p><img src=\"../img/tutorials/tutorial-30-13.jpg\" alt=\"\"></p>\n<p>接著放入「偵測鍵盤放開」的積木，把上下左右的事件對應進去積木裡，這裏就再放開的時候，把狀態設為 off 即可。為什麼要這麼做呢？因為當第一顆馬達一條線為 on，一條線為 off，就可以當作我們把電池正極接在 on 的地方，負極接在 off 的地方，馬達會正轉，如果反接，馬達就會反轉，透過正轉反轉的原理，我們就可以控制車子左右轉或是前後跑。</p>\n<p><img src=\"../img/tutorials/tutorial-30-14.jpg\" alt=\"\"></p>\n<p>到這邊就已經完成了，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選紅色的執行按鈕，就可以開始用鍵盤操控玩具車了，如果跑起來方向不同，只要在程式裡調整，或把線對調就可以了。</p>\n<p>( 解答：<a href=\"https://blockly.webduino.io/#-KKmaDVfUAoDrcxGHLpg\">https://blockly.webduino.io/#-KKmaDVfUAoDrcxGHLpg</a> )</p>\n<p>如果想要用手機操控，可以打開「網頁互動區」，下拉選單選擇「遙控器」，就可以把事件綁定到上下左右的按鍵裡頭，如果要在手機上控制，可以參考「<a href=\"https://webduino.io/tutorials/info-11-feature.html\">Webduino Blockly 的十個操作密技</a>」，裏頭有詳細介紹。</p>\n<p><img src=\"../img/tutorials/tutorial-30-15.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/vohen/1/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>JavaScript 讀取 <code>onkeydown</code> 和 <code>onkeyup</code> 來判斷鍵盤按下還是放開，透過不同的 <code>keycode</code>，綁定不同的事件，就可以做出用鍵盤遙控的功能了。    </p>\n<pre><code>var a;\nvar b;\nvar c;\nvar d;\n\nboardReady(&#39;&#39;, function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  a = getLed(board, 6);\n  b = getLed(board, 7);\n  c = getLed(board, 8);\n  d = getLed(board, 9);\n  document.onkeydown = function(e){\n    console.log(e.keyCode);\n    if(e.keyCode == 38){\n        a.on();\n    }\n    if(e.keyCode == 40){\n        b.on();\n    }\n    if(e.keyCode == 39){\n        c.on();\n    }\n    if(e.keyCode == 37){\n        d.on();\n    }\n  };\n  document.onkeyup = function(e){\n    console.log(e.keyCode);\n    if(e.keyCode == 38){\n        a.off();\n    }\n    if(e.keyCode == 40){\n        b.off();\n    }\n    if(e.keyCode == 39){\n        c.off();\n    }\n    if(e.keyCode == 37){\n        d.off();\n    }\n  };\n});\n</code></pre><p>以上就是用 L9110S 雙馬達驅動模組來操控玩具車。<br>完整程式碼：<a href=\"https://bin.webduino.io/nibud/edit?html,css,js,output\">https://bin.webduino.io/nibud/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-KKmaDVfUAoDrcxGHLpg\">https://blockly.webduino.io/#-KKmaDVfUAoDrcxGHLpg</a></p>\n<div class=\"buy-this\">\n    <span>L9110S 馬達驅動模組：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-31-soil-max7219":{"tag":"tutorial","src":"tutorial-31-soil-max7219.html","title":"偵測土壤濕度並由 LED 點矩陣顯示","banner":"tutorial-31-01.jpg","img":"tutorial-31-01s.jpg","date":20160623,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 31：偵測土壤濕度並由 LED 點矩陣顯示 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"我們可以利用土壤濕度計插入土中偵測土壤濕度，原理其實是偵測兩塊金屬片的導電度換算成濕度，在這個例子裡，我們透過 LED 點矩陣來顯示偵測到的濕度數值，當濕度高達 100 的時候就會播放動畫。 \">\n\n<meta itemprop=\"description\" content=\"我們可以利用土壤濕度計插入土中偵測土壤濕度，原理其實是偵測兩塊金屬片的導電度換算成濕度，在這個例子裡，我們透過 LED 點矩陣來顯示偵測到的濕度數值，當濕度高達 100 的時候就會播放動畫。 \">\n\n<meta property=\"og:description\" content=\"我們可以利用土壤濕度計插入土中偵測土壤濕度，原理其實是偵測兩塊金屬片的導電度換算成濕度，在這個例子裡，我們透過 LED 點矩陣來顯示偵測到的濕度數值，當濕度高達 100 的時候就會播放動畫。 \">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/sensor/soil.html\">\n\n<meta property=\"og:title\" content=\"教學範例 31：偵測土壤濕度並由 LED 點矩陣顯示\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-31-soil-max7219.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-31-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-31-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-31-led-\">教學範例 31：偵測土壤濕度並由 LED 點矩陣顯示</h1>\n<p>我們可以利用土壤濕度計插入土中偵測土壤濕度，原理其實是偵測兩塊金屬片的導電度換算成濕度，在這個例子裡，我們透過 LED 點矩陣來顯示偵測到的濕度數值，當濕度高達 100 的時候就會播放動畫。 </p>\n<div class=\"buy-this\">\n    <span>土壤濕度偵測模組：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>LED 點矩陣：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus  ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/ppweeGJD0nw\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>「土壤濕度偵測模組」有三支針腳，分別是訊號腳、GND 和 VCC，由於我們還要利用 LED 點矩陣來顯示數值，LED 點矩陣也需要用到 GND 與 VCC，所以我們利用麵包板外接出來，VCC 接在開發板的 VCC，GND 接 GND，土壤濕度偵測模組的訊號腳接在 A3，LED 點矩陣的 DIN 接 7，CS 接 8，CLK 接 9。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-31-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-31-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線照片：</p>\n<p><img src=\"../img/tutorials/tutorial-31-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-31-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-31-05.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-31-06.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>土壤濕度偵測模組：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>LED 點矩陣：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus  ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，然後放入土壤濕度偵測以及 LED 點矩陣的積木，並選擇對應的腳位。</p>\n<p><img src=\"../img/tutorials/tutorial-31-07.jpg\" alt=\"\"></p>\n<p>放入開始偵測的積木，這裏先用一個變數來裝載偵測到的數值，同時我們也對這個數值做四捨五入到小數點零位 ( 因為待會會重複用到這個數值，用一個變數才不會修改的時候要修改太多地方，然後四捨五入是因為 LED 點矩陣待會只會顯示整數 )。</p>\n<p><img src=\"../img/tutorials/tutorial-31-08.jpg\" alt=\"\"></p>\n<p>放入「顯示」的積木，讓偵測到的數值同步顯示在「網頁互動區」裡頭，接著使用「邏輯」的積木，讓小於某個數值的時候，點矩陣會顯示當前數字，大於某的數值的時候會播放動畫 ( 這裏設定為大於等於 100 的時候 )。</p>\n<p><img src=\"../img/tutorials/tutorial-31-09.jpg\" alt=\"\"></p>\n<p>到這邊就已經完成了，確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選右上方紅色按鈕執行，裝一杯水，把土壤濕度偵測模組插到水中，就會看到數值的變化。\n( 解答：<a href=\"https://blockly.webduino.io/#-KKrc9v9vLO_zy7j075S\">https://blockly.webduino.io/#-KKrc9v9vLO_zy7j075S</a> )</p>\n<p>注意，因為不同的感測器數值會有不同，而且如果把 VCC 改接 3.3V，偵測到的最大值也會不同，如果需要進行數值尺度的轉換，可以使用「數值轉換的積木」。</p>\n<p><img src=\"../img/tutorials/tutorial-31-10.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-31-11.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/fijuw/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>JavaScript 裏頭上半部是 LED 點矩陣顯示圖案的程式，下半部就是偵測的程式，最主要我們使用了<code>on</code>的方法來偵測，回傳的<code>val</code>就是數值。    </p>\n<pre><code>boardReady(&#39;&#39;, function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  soil = getSoil(board, 3);\n  matrix = getMax7219(board, 7, 8, 9);\n  soil.on(function(val){\n    soil.detectedVal = val;\n    a = Math.round(soil.detectedVal);\n    document.getElementById(&quot;demo-area-01-show&quot;).innerHTML = a;\n    if (a &lt; 100) {\n      matrix.animateStop();\n      matrix.on(&quot;0000000000000000&quot;);\n      matrix.on((max7219_number(a)));\n    } else {\n      matrix.animateStop();\n      matrix.animate(max7219_horse(&quot;left&quot;,&quot;0c1e3e7c3e1e0c00&quot;),100);\n    }\n  });\n});\n</code></pre><p>以上就是偵測土壤濕度並由 LED 點矩陣顯示。<br>完整程式碼：<a href=\"https://bin.webduino.io/fijuw/edit?html,css,js,output\">https://bin.webduino.io/fijuw/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-KKrc9v9vLO_zy7j075S\">https://blockly.webduino.io/#-KKrc9v9vLO_zy7j075S</a></p>\n<div class=\"buy-this\">\n    <span>土壤濕度偵測模組：<a href=\"https://webduino.io/buy/webduino-expansion-s.html\" target=\"_blank\">Webduino 擴充套件 S ( 支援馬克 1 號、Fly )</a></span>\n    <span>LED 點矩陣：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus  ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-32-smart-socket":{"tag":"tutorial","src":"tutorial-32-smart-socket.html","title":"智慧插座 DIY","banner":"tutorial-32-01.jpg","img":"tutorial-32-01s.jpg","date":20160627,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 32：智慧插座 DIY :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"之前在「教學範例 14：繼電器控制風扇旋轉」有介紹過繼電器的應用，如果我們將繼電器和日常生活中的插座結合，就可以利用 Wi-Fi 來操控，將平凡無奇的插座升級成為可以光感、聲控、遠端遙控的智慧插座囉！\">\n\n<meta itemprop=\"description\" content=\"之前在「教學範例 14：繼電器控制風扇旋轉」有介紹過繼電器的應用，如果我們將繼電器和日常生活中的插座結合，就可以利用 Wi-Fi 來操控，將平凡無奇的插座升級成為可以光感、聲控、遠端遙控的智慧插座囉！\">\n\n<meta property=\"og:description\" content=\"之前在「教學範例 14：繼電器控制風扇旋轉」有介紹過繼電器的應用，如果我們將繼電器和日常生活中的插座結合，就可以利用 Wi-Fi 來操控，將平凡無奇的插座升級成為可以光感、聲控、遠端遙控的智慧插座囉！\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/example/smart-socket.html\">\n\n<meta property=\"og:title\" content=\"教學範例 32：智慧插座 DIY\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-32-smart-socket.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-32-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-32-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-32-diy\">教學範例 32：智慧插座 DIY</h1>\n<p>之前在「<a href=\"https://webduino.io/tutorials/tutorial-14-relay.html\">教學範例 14：繼電器控制風扇旋轉</a>」有介紹過繼電器的應用，如果我們將繼電器和日常生活中的插座結合，就可以利用 Wi-Fi 來操控，將平凡無奇的插座升級成為可以光感、聲控、遠端遙控的智慧插座囉！ </p>\n<div class=\"buy-this\">\n    <span>智慧插座套件：<a href=\"https://webduino.io/buy/webduino-package-socket.html\" target=\"_blank\">Webduino 智慧插座套件 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/nFEY_k_2zxQ\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>我們使用的插座有兩個插孔，其中一個插孔會接上家用電，同時這個插孔會提供 Webduino 開發板電源，然後透過繼電器來控制另外一個插孔的供電與否，因此我們會把接在插孔上的單心線，接到繼電器的「公共」與「常開」端，然後繼電器的 VCC 接在開發板的 5V 或 3.3V，GND 接在 GND，Vin 訊號腳可以接在 2 ~ 13。</p>\n<p><img src=\"../img/tutorials/tutorial-32-02.jpg\" alt=\"\"></p>\n<p>所需材料列表：</p>\n<p><img src=\"../img/tutorials/tutorial-32-03.jpg\" alt=\"\"></p>\n<p>一開始先把插座和插座背板結合，插座有卡榫，直接裝上去就可以。</p>\n<p><img src=\"../img/tutorials/tutorial-32-04.jpg\" alt=\"\"></p>\n<p>中間的空間剛好可以放入繼電器，可以直接卡進去或是用熱熔膠固定，插座則看照片放入五根單心線，單心線很硬，直接塞進去插座的接孔內就可以 ( 內有金屬夾片會自動卡住 )</p>\n<p><img src=\"../img/tutorials/tutorial-32-05.jpg\" alt=\"\"></p>\n<p>組合插頭與電線，直接把電線的頭去皮，分別鎖到插頭上即可。</p>\n<p><img src=\"../img/tutorials/tutorial-32-07.jpg\" alt=\"\"></p>\n<p>把單心線和電線，用快速接頭連接，同時也把單心線接到繼電器上面 ( <strong>公共端 與 常開端</strong> )。</p>\n<p><img src=\"../img/tutorials/tutorial-32-06.jpg\" alt=\"\"></p>\n<p>繼電器的另一側用杜邦線接出來。</p>\n<p><img src=\"../img/tutorials/tutorial-32-08.jpg\" alt=\"\"></p>\n<p>組合外殼。</p>\n<p><img src=\"../img/tutorials/tutorial-32-09.jpg\" alt=\"\"></p>\n<p>上蓋用螺絲固定 ( 若螺絲太小可用墊片與螺帽輔助 )。</p>\n<p><img src=\"../img/tutorials/tutorial-32-09a.jpg\" alt=\"\"></p>\n<p>和開發板連線就完成囉！插座上有兩個插孔，一個是固定供電給開發板，透過 Wi-Fi 來控制另外一個插孔有沒有電。</p>\n<p><img src=\"../img/tutorials/tutorial-32-10.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>智慧插座套件：<a href=\"https://webduino.io/buy/webduino-package-socket.html\" target=\"_blank\">Webduino 智慧插座套件 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，然後放入繼電器或是 LED 的積木 ( 這裏我們使用 LED 的積木 )，按照上面的接線圖是接開發板的 10 號腳，這裏腳位我們設定為 10。</p>\n<p><img src=\"../img/tutorials/tutorial-32-11.jpg\" alt=\"\"></p>\n<p>這裏我們要來使用網頁互動測試區域裡的燈泡控制插座供電與否，一開始先放入設定燈泡裝態 off 以及 LED 狀態 off 的積木，讓兩者狀態一致，接著放入點擊燈泡的積木，點擊時候的行為就是切換 on 與 off 的狀態。</p>\n<p><img src=\"../img/tutorials/tutorial-32-12.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選右上方紅色按鈕執行，在智慧插座上接個電燈或電扇，電燈或電扇的開關先打開 ( 此時是不會亮或不會動的 )，點選網頁的燈泡，就會看到可以透過網頁控制了。</p>\n<p>( 解答：<a href=\"https://blockly.webduino.io/#-KLFXif-dpr6cgel5YHi\">https://blockly.webduino.io/#-KLFXif-dpr6cgel5YHi</a> )</p>\n<p>既然已經可以用網頁透過 Wi-Fi 操控，我們就可以來做個聲控智慧插座，將剛剛燈泡的積木換成語音辨識的積木，辨識開燈關燈的文字，聲控電燈就完成了。</p>\n<p><img src=\"../img/tutorials/tutorial-32-13.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/basop/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>JavaScript 基本上就是 LED 的控制程式，非常的簡單 ( 可參考 <a href=\"https://webduino.io/tutorials/tutorial-01-led.html\">教學範例 1：控制單顆 LED 燈</a> )。    </p>\n<pre><code>var led;\n\nboardReady(&#39;&#39;, function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  led = getLed(board, 10);\n  document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n  led.off();\n  document.getElementById(&quot;demo-area-02-light&quot;).addEventListener(&quot;click&quot;, function(){\n    if (document.getElementById(&quot;demo-area-02-light&quot;).className == &quot;on&quot;) {\n       document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;off&quot;;\n    } else {\n      document.getElementById(&quot;demo-area-02-light&quot;).className = &quot;on&quot;;\n    }\n    led.toggle();\n  });\n});\n</code></pre><p>以上就是智慧插座 DIY 以及相關的控制方式。<br>完整程式碼：<a href=\"https://bin.webduino.io/basop/edit?html,css,js,output\">https://bin.webduino.io/basop/edit?html,css,js,output</a><br>解答：<a href=\"https://blockly.webduino.io/#-KLFXif-dpr6cgel5YHi\">https://blockly.webduino.io/#-KLFXif-dpr6cgel5YHi</a></p>\n<div class=\"buy-this\">\n    <span>智慧插座套件：<a href=\"https://webduino.io/buy/webduino-package-socket.html\" target=\"_blank\">Webduino 智慧插座套件 ( 電子材料包 )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-33-clock":{"tag":"tutorial","src":"tutorial-33-clock.html","title":"會說話的鬧鐘 ( 貪睡、蜂鳴器 )","banner":"tutorial-33-01.jpg","img":"tutorial-33-01s.jpg","date":20160629,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 33：會說話的鬧鐘 ( 貪睡、蜂鳴器 ) :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"過去的範例分別有介紹過按鈕開關和蜂鳴器的用法，在這個範例裡面，我們會把按鈕開關和蜂鳴器結合，實際做出一個具備貪睡功能的鬧鐘，也就是按下按鈕開關之後，會過個幾分鐘再叫，同時，按下開關的時候電腦還會發音報時喔！\">\n\n<meta itemprop=\"description\" content=\"過去的範例分別有介紹過按鈕開關和蜂鳴器的用法，在這個範例裡面，我們會把按鈕開關和蜂鳴器結合，實際做出一個具備貪睡功能的鬧鐘，也就是按下按鈕開關之後，會過個幾分鐘再叫，同時，按下開關的時候電腦還會發音報時喔！\">\n\n<meta property=\"og:description\" content=\"過去的範例分別有介紹過按鈕開關和蜂鳴器的用法，在這個範例裡面，我們會把按鈕開關和蜂鳴器結合，實際做出一個具備貪睡功能的鬧鐘，也就是按下按鈕開關之後，會過個幾分鐘再叫，同時，按下開關的時候電腦還會發音報時喔！\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/component/buzzer-clock.html\">\n\n<meta property=\"og:title\" content=\"教學範例 33：會說話的鬧鐘 ( 貪睡、蜂鳴器 )\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-33-clock.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-33-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-33-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-33-\">教學範例 33：會說話的鬧鐘 ( 貪睡、蜂鳴器 )</h1>\n<p>過去的範例「<a href=\"https://webduino.io/tutorials/tutorial-09-button-led.html\">教學範例 9：按鈕開關</a>」和「<a href=\"https://webduino.io/tutorials/tutorial-13-buzzer.html\">教學範例 13：蜂鳴器播放自製音樂</a>」分別有介紹過按鈕開關和蜂鳴器的用法，在這個範例裡面，我們會把按鈕開關和蜂鳴器結合，實際做出一個具備貪睡功能的鬧鐘 也就是按下按鈕開關之後，會過個幾分鐘再叫，同時，按下開關的時候電腦還會發音報時喔！ </p>\n<div class=\"buy-this\">\n    <span>蜂鳴器、按鈕：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/BEDgC5iAnCo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>如果使用馬克一號，因為只有一個 GND，所以我們用麵包板共地，如果是用 Fly 就可以接不同的 GND 即可，這裏按鈕開關的訊號腳接 10，蜂鳴器則是接 11。</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-33-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-33-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線圖：</p>\n<p><img src=\"../img/tutorials/tutorial-33-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-33-04.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-33-05.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>蜂鳴器、按鈕：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，然後放入按鈕開關和蜂鳴器的積木，按鈕開關設定 10 號腳，蜂鳴器為 11 號腳。</p>\n<p><img src=\"../img/tutorials/tutorial-33-06.jpg\" alt=\"\"></p>\n<p>設定四個變數，<strong>clock 表示鬧鐘的時間，check 用來判斷按鈕開關是否壓下，type 如果設定為 m，延遲的就是分鐘，如果是 s 就是秒，sleep 則是要延遲多久</strong>，然後我們要讓時間顯示在網頁裡，因為字體比較大，所以我們透過設定字體大小和行高的積木來進行設定，完成後就執行鬧鐘的流程，這裏流程名稱設定為 f。( 注意，如果是時間個位數，前面不要補 0，例如 01 就寫 1，00 就寫 0 )</p>\n<p><img src=\"../img/tutorials/tutorial-33-07.jpg\" alt=\"\"></p>\n<p>來看一下 f 流程的內容，一開始我們先用三個變數 h、m 和 s 來裝載當前時間的時、分、秒，然後再透過字串組合成我們要比對的文字格式，然後將這串文字指定給另外一個變數 now，在下面的判斷式我們就會比對 now 和 clock 的內容是否相同，如果相同的話，就讓蜂鳴器播放超級瑪莉的音樂，同時也會把文字的顏色改成紅色。</p>\n<p>此外，我們利用「顯示」的積木，把當前的時間和鬧鐘時間秀在網頁互動區域裡頭 ( <code>&lt;br/&gt;</code>是換行的符號 )，然後再流程的最後使用了「等待」，就可以每隔一秒執行一次這段流程，就可以在網頁互動區裡看到時間一秒一秒的跳動了。</p>\n<p><img src=\"../img/tutorials/tutorial-33-08.jpg\" alt=\"\"></p>\n<p>接著我們在開發板的積木裡，放入按鈕開關的積木，這裏我們讓按鈕開關有兩種行為，「按下」的時候會把蜂鳴器停下來，並把文字顏色改成黑色，同時啟動「貪睡流程 alarm」，如果是「長按」，則把鬧鐘關閉。( 這裡 check 等於 1 就很重要了，<strong>因為 check 只有在鬧鐘啟動的時候才會等於 1</strong>，這也可以避免在鬧鐘還沒響的時候，按下按鈕開關會觸發貪睡的功能 )</p>\n<p><img src=\"../img/tutorials/tutorial-33-09.jpg\" alt=\"\"></p>\n<p>來看到貪睡的流程，這裏我們先用 h1、m1 和 s1 三個變數來紀錄按下按鈕開關的時、分、秒，然後我們就使用「語音朗讀」來唸出當前的時間，接著觸發一個新的鬧鐘 ( 這樣才是「貪睡」，也就是說按下按鈕開關的同時，產生一個新的鬧鐘時間，時間到就會叫 )</p>\n<p><img src=\"../img/tutorials/tutorial-33-10.jpg\" alt=\"\"></p>\n<p>新的鬧鐘流程裡頭放入三個判斷式，因為我們對時間加總的時候，不論是小時、分鐘或是秒，都會有「進位」的可能，所以要連續做三個判斷，又因為秒的進位會影響到分鐘的進位，分鐘的進位又會影響到小時的進位，所以順序必須是秒、分鐘、小時，最後就把新的時間指定給 clock 這個變數。</p>\n<p><img src=\"../img/tutorials/tutorial-33-11.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選右上方紅色按鈕執行，時間到了的時候蜂鳴器就會播放超級瑪莉的音樂，同時喇叭也會有人聲報時，文字也會變成紅色，這時候按下按鈕開關，就會產生一個新的鬧鐘時間，如果長按按鈕開關，就會把鬧鐘關起來。</p>\n<p>( 解答：<a href=\"https://blockly.webduino.io/#-KLMkPWH4stuxpbr7sEs\">https://blockly.webduino.io/#-KLMkPWH4stuxpbr7sEs</a> )</p>\n<div class=\"buy-this\">\n    <span>蜂鳴器、按鈕：<a href=\"https://webduino.io/buy/webduino-package-plus.html\" target=\"_blank\">Webduino 基本套件 Plus ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-34-vr-image":{"tag":"tutorial","src":"tutorial-34-vr-image.html","title":"可變電阻改變圖片位置","banner":"tutorial-34-01.jpg","img":"tutorial-34-01s.jpg","date":20160701,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 34：可變電阻改變圖片位置 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"在「教學範例 17：光敏電阻獲取亮度數值」有介紹過光敏電阻的用法，而可變電阻的積木，也是同樣的使用方式，在這個範例當中，我們將使用可變電阻的旋鈕，透過旋轉旋鈕改變數值，就可以讓圖片的位置發生變化！\">\n\n<meta itemprop=\"description\" content=\"在「教學範例 17：光敏電阻獲取亮度數值」有介紹過光敏電阻的用法，而可變電阻的積木，也是同樣的使用方式，在這個範例當中，我們將使用可變電阻的旋鈕，透過旋轉旋鈕改變數值，就可以讓圖片的位置發生變化！\">\n\n<meta property=\"og:description\" content=\"在「教學範例 17：光敏電阻獲取亮度數值」有介紹過光敏電阻的用法，而可變電阻的積木，也是同樣的使用方式，在這個範例當中，我們將使用可變電阻的旋鈕，透過旋轉旋鈕改變數值，就可以讓圖片的位置發生變化！\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/basic/sensor/pot.html\">\n\n<meta property=\"og:title\" content=\"教學範例 34：可變電阻改變圖片位置\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-34-vr-image.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-34-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-34-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-34-\">教學範例 34：可變電阻改變圖片位置</h1>\n<p>在「<a href=\"https://webduino.io/tutorials/tutorial-17-photocell.html\">教學範例 17：光敏電阻獲取亮度數值</a>」有介紹過光敏電阻的用法，而可變電阻的積木，也是同樣的使用方式，在這個範例當中，我們將使用可變電阻的旋鈕，透過旋轉旋鈕改變數值，就可以讓圖片的位置發生變化！ </p>\n<div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/Q5ErAOdnfCo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>可變電阻有三支接腳，左右分別接 3.3V 和 GND，記得使用電阻保護，避免當可變電阻過小的時候發生短路，中間的腳位為類比訊號腳，我們接在 A3 的位置。( 如果你的 3.3V 與 GND 顛倒，會發現出來的數值和旋轉的方向相反 )</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-34-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-34-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線圖：</p>\n<p><img src=\"../img/tutorials/tutorial-34-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-34-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，然後放入可變電阻的積木，設定為 A3 腳位。</p>\n<p><img src=\"../img/tutorials/tutorial-34-05.jpg\" alt=\"\"></p>\n<p>放入開始偵測的積木，一開始我們先用一個變數 a 來裝載偵測到的數值，這裡對偵測到的數值做四捨五入到小數點兩位的計算，接著把這個數值 ( 0 ~ 1 ) 乘以 200，作為圖片水平移動的數值。( 為了讓圖片移動比較明顯所以乘以兩百，也因為乘以百位數所以一開始四捨五入到小數點兩位 )</p>\n<p><img src=\"../img/tutorials/tutorial-34-06.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選右上方紅色按鈕執行，轉動可變電阻旋鈕，就會看到圖片的位置發生變化了。</p>\n<p>( 解答：<a href=\"http://blockly.webduino.io/#-KL_HHObSm1qXrX5vi1C\">http://blockly.webduino.io/#-KL_HHObSm1qXrX5vi1C</a> )</p>\n<p>如果你發現圖片移動的位置和你的旋轉方向不同，有兩個方法可以解決，第一個方法就是把 3.3v 和 GND 的電線對調，第二個方法可以從積木著手，因為可變電阻偵測到的數值是 0 ~ 1，要相反只要用 1 去減掉這個數值即可。</p>\n<p><img src=\"../img/tutorials/tutorial-34-07.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/fayu/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 的部分會放上一張圖片，如果要放自己的圖片就將網址放在 src 裡面。</p>\n<pre><code>&lt;div id=&quot;demo-area-03-container&quot;&gt;\n  &lt;img src=&quot;http://blockly.webduino.io/media/webduino-logo.jpg&quot; id=&quot;demo-area-03-image&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>圖片位置會改變主要是因為我們的圖片 position 屬性是絕對的 ( absolute )，所以在這邊 CSS 要設定一下。</p>\n<pre><code>#demo-area-03-container {\n  position: relative;\n  width: 150px;\n  height: 150px;\n}\n\n#demo-area-03-image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 150px;\n  height: 150px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  transform-origin: 75px 75px;\n  -webkit-transform-origin: 75px 75px;\n  -moz-transform-origin: 75px 75px;\n}\n</code></pre><p>JavaScript 基本上就是透過 on 來做接收，接收後會回傳 val 的數值。    </p>\n<pre><code>var photocell;\nvar a;\n\nboardReady(&#39;&#39;, function (board) {\n  board.systemReset();\n  board.samplingInterval = 50;\n  photocell = getPhotocell(board, 3);\n  photocell.on(function(val){\n    photocell.detectedVal = val;\n    a = (Math.round((photocell.detectedVal)*100))/100;\n    document.getElementById(&quot;demo-area-03-image&quot;).style.left = (a * 200)+&quot;px&quot;;\n  });\n});\n</code></pre><p>以上就是透過可變電阻旋鈕，改變圖片位置。<br>完整程式碼：<a href=\"https://bin.webduino.io/fayu/edit?html,css,js,output\">https://bin.webduino.io/fayu/edit?html,css,js,output</a><br>解答：<a href=\"http://blockly.webduino.io/#-KL_HHObSm1qXrX5vi1C\">http://blockly.webduino.io/#-KL_HHObSm1qXrX5vi1C</a></p>\n<div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-35-vr-youtube":{"tag":"tutorial","src":"tutorial-35-vr-youtube.html","title":"可變電阻改變 Youtube 音量大小","banner":"tutorial-35-01.jpg","img":"tutorial-35-01s.jpg","date":20160704,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 35：可變電阻改變 Youtube 音量大小 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"上一篇「教學範例 34：可變電阻改變圖片位置」介紹了利用可變電阻改變圖片位置，這篇我們將功能再升級，透過可變電阻來改變 Youtube 影片的音量大小，實作出來就像是實際的旋鈕控制音響喇叭音量一樣。\">\n\n<meta itemprop=\"description\" content=\"上一篇「教學範例 34：可變電阻改變圖片位置」介紹了利用可變電阻改變圖片位置，這篇我們將功能再升級，透過可變電阻來改變 Youtube 影片的音量大小，實作出來就像是實際的旋鈕控制音響喇叭音量一樣。\">\n\n<meta property=\"og:description\" content=\"上一篇「教學範例 34：可變電阻改變圖片位置」介紹了利用可變電阻改變圖片位置，這篇我們將功能再升級，透過可變電阻來改變 Youtube 影片的音量大小，實作出來就像是實際的旋鈕控制音響喇叭音量一樣。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/sensor/pot-youtube.html\">\n\n<meta property=\"og:title\" content=\"教學範例 35：可變電阻改變 Youtube 音量大小\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-35-vr-youtube.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-35-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-35-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-35-youtube-\">教學範例 35：可變電阻改變 Youtube 音量大小</h1>\n<p>上一篇「<a href=\"https://webduino.io/tutorials/tutorial-34-vr-image.html\">教學範例 34：可變電阻改變圖片位置</a>」介紹了利用可變電阻改變圖片位置，這篇我們將功能再升級，透過可變電阻來改變 Youtube 影片的音量大小，實作出來就像是實際的旋鈕控制音響喇叭音量一樣。</p>\n<div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/hA0rx5uK_qw\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>可變電阻有三支接腳，左右分別接 3.3V 和 GND，記得使用電阻保護，避免當可變電阻過小的時候發生短路，中間的腳位為類比訊號腳，我們接在 A3 的位置。( 如果你的 3.3V 與 GND 顛倒，會發現出來的數值和旋轉的方向相反 )</p>\n<p>馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-34-02.jpg\" alt=\"\"></p>\n<p>Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-34-02-fly.jpg\" alt=\"\"></p>\n<p>實際接線圖：</p>\n<p><img src=\"../img/tutorials/tutorial-34-03.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-34-04.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，然後放入可變電阻的積木，設定為 A3 腳位。</p>\n<p><img src=\"../img/tutorials/tutorial-35-02.jpg\" alt=\"\"></p>\n<p>放入 Youtube 以及開始偵測的積木，填入 Youtube 的影片 id。</p>\n<p><img src=\"../img/tutorials/tutorial-35-03.jpg\" alt=\"\"></p>\n<p>如果不知道 Youtube 影片 id，可以打開 Youtube 影片，影片網址後面 <code>v=</code> 接的一串代碼就是影片 id。</p>\n<p><img src=\"../img/tutorials/tutorial-35-04.jpg\" alt=\"\"></p>\n<p>開始偵測的時候，我們先用一個變數裝載數值 ( 因為會重複用到，用變數裝載就只需要指定一次 )，因為可變電阻的數值是 0 到 1 的浮點數，而 Youtube 的音量是 0 到 100 的整數，所以這裡要使用四捨五入以及尺度轉換，然後我們可以打開 Chrome 開發者工具的 console 來接收數值。( 在網頁上方按滑鼠右鍵，點選檢視 )</p>\n<p><img src=\"../img/tutorials/tutorial-35-05.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選右上方紅色按鈕執行，Youtube 載入之後，旋轉可變電阻，就會看到音量發生變化了。</p>\n<p>( 解答：<a href=\"http://blockly.webduino.io/#-KLpGunMdNSQ-MW_LLKi\">http://blockly.webduino.io/#-KLpGunMdNSQ-MW_LLKi</a> )</p>\n<p>如果覺得想要把左右旋轉的方向顛倒 ( 原本往右轉變大聲，現在要改成往左轉變大聲 )，我們可以直接修改尺度轉換的數值，把 0 改成 1，把 1 改成 0 就可以，或者由接線著手，把接 3.3V 的位置換成接 GND，把 GND 換成接 3.3V，數值也會顛倒過來</p>\n<p><img src=\"../img/tutorials/tutorial-35-06.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/qazu/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 的部分會放入一個 div 來載入 Youtube 影片。</p>\n<pre><code>&lt;div id=&quot;player&quot;&gt;&lt;/div&gt;\n</code></pre><p>圖片位置會改變主要是因為我們的圖片 position 屬性是絕對的 ( absolute )，所以在這邊 CSS 要設定一下。</p>\n<pre><code>#demo-area-03-container {\n  position: relative;\n  width: 150px;\n  height: 150px;\n}\n\n#demo-area-03-image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 150px;\n  height: 150px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  transform-origin: 75px 75px;\n  -webkit-transform-origin: 75px 75px;\n  -moz-transform-origin: 75px 75px;\n}\n</code></pre><p>主程式一開始載入 Youtube 模組，然後透過可變電阻的 <code>on</code> 來接收訊號，訊號值回傳在 val 裡頭，我們就透過尺度與四捨五入的公式轉換數值，把數值拋給 Youtube 音量的音量，為了避免音量大於 100 會發生錯誤，在這裏有用一個大於一百的時候就等於一百的判斷式作為保護。    </p>\n<pre><code>var photocell;\nvar youtube;\nvar a;\n\nboardReady(&#39;&#39;, async function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  photocell = getPhotocell(board, 3);\n  await new Promise(function (resolve) {\n    var tag = document.createElement(&quot;script&quot;);\n    tag.src = &quot;https://www.youtube.com/iframe_api&quot;;\n    var scptTag = document.getElementsByTagName(&quot;script&quot;)[0];\n    scptTag.parentNode.insertBefore(tag, scptTag);\n    window.onYouTubeIframeAPIReady = function () {\n      youtube = new YT.Player(&quot;player&quot;, {\n        height: &quot;240&quot;,\n        width: &quot;96%&quot;,\n        videoId: &quot;h18K_JnUi4Q&quot;,\n        playerVars: {\n          autoplay: 1,\n          controls: 1\n        },\n        events: {\n          onReady: function (evt) {\n            resolve();\n          }\n        }\n      });\n    };\n  });\n  photocell.on(async function(val){\n    photocell.detectedVal = val;\n    a = Math.round(((photocell.detectedVal - (0)) * (1/((1)-(0)))) * ((100)-(0)) + (0));\n    console.log(a);\n    var varA = a;\n    if (varA &gt;= 100) {\n      varA = 100;\n    }\n    youtube.setVolume(varA);\n  });\n});\n</code></pre><p>以上就是透過可變電阻旋鈕，改變 Youtube 音量大小。<br>完整程式碼：<a href=\"https://bin.webduino.io/qazu/edit?html,css,js,output\">https://bin.webduino.io/qazu/edit?html,css,js,output</a><br>解答：<a href=\"http://blockly.webduino.io/#-KLpGunMdNSQ-MW_LLKi\">http://blockly.webduino.io/#-KLpGunMdNSQ-MW_LLKi</a></p>\n<div class=\"buy-this\">\n    <span>可變電阻旋鈕：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-36-pump":{"tag":"tutorial","src":"tutorial-36-pump.html","title":"網頁操控水泵","banner":"tutorial-36-01.jpg","img":"tutorial-36-01s.jpg","date":20161223,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 36：網頁操控水泵 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"泵讀音「ㄅㄥˋ」，是一種用以增加液體或氣體的壓力，使之輸送流動的機械，我們亦可稱之為「幫浦」，透過馬達的加壓，可以做到一個管子抽水，然後從另外一個管子放水的動作，這篇我們將透過「繼電器」來控制水泵的啟動，進一步就可以實現從網頁操控水泵了。\">\n\n<meta itemprop=\"description\" content=\"泵讀音「ㄅㄥˋ」，是一種用以增加液體或氣體的壓力，使之輸送流動的機械，我們亦可稱之為「幫浦」，透過馬達的加壓，可以做到一個管子抽水，然後從另外一個管子放水的動作，這篇我們將透過「繼電器」來控制水泵的啟動，進一步就可以實現從網頁操控水泵了。\">\n\n<meta property=\"og:description\" content=\"泵讀音「ㄅㄥˋ」，是一種用以增加液體或氣體的壓力，使之輸送流動的機械，我們亦可稱之為「幫浦」，透過馬達的加壓，可以做到一個管子抽水，然後從另外一個管子放水的動作，這篇我們將透過「繼電器」來控制水泵的啟動，進一步就可以實現從網頁操控水泵了。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/example/smart-plant-pump.html\">\n\n<meta property=\"og:title\" content=\"教學範例 36：網頁操控水泵\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-36-pump.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-36-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-36-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-36-\">教學範例 36：網頁操控水泵</h1>\n<p>泵讀音「ㄅㄥˋ」，是一種用以增加液體或氣體的壓力，使之輸送流動的機械，我們亦可稱之為「幫浦」，透過馬達的加壓，可以做到一個管子抽水，然後從另外一個管子放水的動作，這篇我們將透過「繼電器」來控制水泵的啟動，進一步就可以實現從網頁操控水泵了。</p>\n<div class=\"buy-this\">\n    <span>繼電器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>水泵套件：<a href=\"https://webduino.io/buy/webduino-package-plant.html\" target=\"_blank\">Webduino 智慧植栽套件 ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>水泵的長相如下圖，水泵本身一定會有兩個開口，一個負責吸水而另外一個就是負責放水。</p>\n<p><img src=\"../img/tutorials/tutorial-36-02.jpg\" alt=\"\"></p>\n<p>水泵只有兩條電線，一條接 5V 一條接 GND，通電之後就會啟動內部的馬達開始抽水，所以在電路上使用一個繼電器作為開關，透過網頁控制繼電器，就可以啟動水泵或關閉水泵。( 可以參考 <a href=\"https://webduino.io/tutorials/tutorial-14-relay.html\">教學範例 14：繼電器控制風扇旋轉</a> )</p>\n<p><img src=\"../img/tutorials/tutorial-36-03.jpg\" alt=\"\"></p>\n<p>水泵、繼電器、馬克一號接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-36-04.jpg\" alt=\"\"></p>\n<p>水泵、繼電器、Fly 接線示意圖：</p>\n<p><img src=\"../img/tutorials/tutorial-36-05.jpg\" alt=\"\"></p>\n<p>實際接線圖：</p>\n<p><img src=\"../img/tutorials/tutorial-36-06.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-36-07.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-36-08.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>繼電器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>水泵套件：<a href=\"https://webduino.io/buy/webduino-package-plant.html\" target=\"_blank\">Webduino 智慧植栽套件 ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作解析</h2>\n<p>打開 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> )，把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，然後放入「繼電器」的積木，設定為 10 腳位。</p>\n<p><img src=\"../img/tutorials/tutorial-36-09.jpg\" alt=\"\"></p>\n<p>打開內嵌的網頁，下拉選單選擇「按鈕行為」，對應到左側選單的「網頁互動」裡的「按鈕行為」積木。</p>\n<p><img src=\"../img/tutorials/tutorial-36-10.jpg\" alt=\"\"></p>\n<p>設定點選按鈕 1 的時候讓繼電器的狀態為「on」( 水泵通電開始吸水放水 )，點選按鈕 2 的時候繼電器狀態為「off」，水泵關閉。</p>\n<p><img src=\"../img/tutorials/tutorial-36-11.jpg\" alt=\"\"></p>\n<p>確認開發板上線 ( 點選「<a href=\"https://webduino.io/device.html\">檢查連線狀態</a>」查詢 )，點選右上方紅色按鈕執行，點選按鈕，就可以看到水泵開始吸水了。</p>\n<p>( 解答：<a href=\"http://bin.webduino.io/keleb/edit?html,css,js,output\">http://bin.webduino.io/keleb/edit?html,css,js,output</a> )</p>\n<p>如果覺得想要把左右旋轉的方向顛倒 ( 原本往右轉變大聲，現在要改成往左轉變大聲 )，我們可以直接修改尺度轉換的數值，把 0 改成 1，把 1 改成 0 就可以，或者由接線著手，把接 3.3V 的位置換成接 GND，把 GND 換成接 3.3V，數值也會顛倒過來</p>\n<p><img src=\"../img/tutorials/tutorial-35-06.jpg\" alt=\"\"></p>\n<p>##範例解析 ( <a href=\"https://bin.webduino.io/qazu/edit?html,css,js,output\">完整程式碼</a>、<a href=\"https://webduino.io/device.html\">檢查連線狀態</a> )</p>\n<p>HTML 的 header 引入 <code>webduino-all.min.js</code>，目的在讓瀏覽器可以支援 WebComponents 以及 Webduino 所有的元件，如果是用 Blockly 編輯工具產生的程式碼，則要額外引入 <code>webduino-blockly.js</code>。</p>\n<pre><code>&lt;script src=&quot;https://webduino.io/components/webduino-js/dist/webduino-all.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://webduinoio.github.io/webduino-blockly/webduino-blockly.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>HTML 的部分會放入一些按鈕。</p>\n<pre><code>&lt;button id=&quot;demo-area-05-btn1&quot; class=&quot;db5&quot;&gt;按鈕 1&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn2&quot; class=&quot;db5&quot;&gt;按鈕 2&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn3&quot; class=&quot;db5&quot;&gt;按鈕 3&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn4&quot; class=&quot;db5&quot;&gt;按鈕 4&lt;/button&gt;\n&lt;button id=&quot;demo-area-05-btn5&quot; class=&quot;db5&quot;&gt;按鈕 5&lt;/button&gt;\n</code></pre><p>透過 <code>getRelay</code>，然後透過可變電阻的 <code>on</code> 來接收訊號，訊號值回傳在 val 裡頭，我們就透過尺度與四捨五入的公式轉換數值，把數值拋給 Youtube 音量的音量，為了避免音量大於 100 會發生錯誤，在這裏有用一個大於一百的時候就等於一百的判斷式作為保護。    </p>\n<pre><code>var relay;\n\nboardReady(&#39;&#39;, function (board) {\n  board.systemReset();\n  board.samplingInterval = 250;\n  relay = getRelay(board, 10);\n  document.getElementById(&quot;demo-area-05-btn1&quot;).addEventListener(&quot;click&quot;,function(){\n    relay.on();\n  });\n  document.getElementById(&quot;demo-area-05-btn2&quot;).addEventListener(&quot;click&quot;,function(){\n    relay.off();\n  });\n});\n</code></pre><p>以上就是透過網頁操水泵的原理。<br>完整程式碼：<a href=\"http://bin.webduino.io/keleb/edit?html,css,js,output\">http://bin.webduino.io/keleb/edit?html,css,js,output</a><br>解答：<a href=\"http://blockly.webduino.io/#-KZ_bMKQA1W1RZIBf5VH\">http://blockly.webduino.io/#-KZ_bMKQA1W1RZIBf5VH</a></p>\n<div class=\"buy-this\">\n    <span>繼電器相關套件：<a href=\"https://webduino.io/buy/webduino-expansion-m.html\" target=\"_blank\">Webduino 擴充套件 M ( 支援馬克 1 號、Fly )</a></span>\n    <span>水泵套件：<a href=\"https://webduino.io/buy/webduino-package-plant.html\" target=\"_blank\">Webduino 智慧植栽套件 ( 支援馬克 1 號、Fly )</a></span>\n    <span>Webduino 開發板：<a href=\"https://webduino.io/buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\"https://webduino.io/buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"https://webduino.io/buy/component-webduino-uno-fly.html\" target=\"_blank\">Webduino Fly + Arduino UNO</a></span>\n</div>\n\n\n<!-- @@close-->"},"tutorial-37-line-following-robot":{"tag":"tutorial","src":"tutorial-37-line-following-robot.html","title":"循跡自走車","banner":"tutorial-37-01.jpg","img":"tutorial-37-01s.jpg","date":20170313,"body":"<!-- @@master  = ../../_layout.html-->\n<!-- @@block  =  meta-->\n<title>教學範例 37：循跡自走車 :::: Webduino = Web × Arduino</title>\n\n<meta name=\"description\" content=\"這篇範例將為自走車加上「循跡」的功能，使自走車在一般操作之外，也能透過「循跡控制板」，輕鬆跟隨地上的軌跡移動，最後甚至可藉由雲端資料庫的輔助，實現紀錄路徑軌跡並重複播放的功能。\">\n\n<meta itemprop=\"description\" content=\"這篇範例將為自走車加上「循跡」的功能，使自走車在一般操作之外，也能透過「循跡控制板」，輕鬆跟隨地上的軌跡移動，最後甚至可藉由雲端資料庫的輔助，實現紀錄路徑軌跡並重複播放的功能。\">\n\n<meta property=\"og:description\" content=\"這篇範例將為自走車加上「循跡」的功能，使自走車在一般操作之外，也能透過「循跡控制板」，輕鬆跟隨地上的軌跡移動，最後甚至可藉由雲端資料庫的輔助，實現紀錄路徑軌跡並重複播放的功能。\">\n\n<link rel=\"canonical\" href=\"https://tutorials.webduino.io/zh-tw/docs/useful/example/toycar-line-following.html\">\n\n<meta property=\"og:title\" content=\"教學範例 37：循跡自走車\" >\n\n<meta property=\"og:url\" content=\"https://webduino.io/tutorials/tutorial-37-line-following-robot.html\">\n\n<meta property=\"og:image\" content=\"https://webduino.io/img/tutorials/tutorial-37-01s.jpg\">\n\n<meta itemprop=\"image\" content=\"https://webduino.io/img/tutorials/tutorial-37-01s.jpg\">\n\n<include src=\"../_include-tutorials.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  preAndNext-->\n<include src=\"../_include-tutorials-content.html\"></include>\n\n<!-- @@close-->\n<!-- @@block  =  tutorials-->\n<h1 id=\"-37-\">教學範例 37：循跡自走車</h1>\n<p>在之前「公仔自走車」的範例中，已經了解基本的操作方式，這篇範例將利用「自走車循跡升級套件」，為自走車加上「循跡」的功能，讓我們在一般操作控制之外，也能跟隨地上的軌跡移動，甚至可藉由雲端資料庫的輔助，紀錄軌跡並重複行進同樣的路徑。</p>\n<div class=\"buy-this\">\n    <span>自走車套件：<a href=\"../buy/webduino-package-toycar.html\" target=\"_blank\">Webduino 公仔自走車 ( 支援馬克 1 號 )</a></span>\n    <span>循跡套件：<a href=\"../buy/webduino-package-line-following.html\" target=\"_blank\">Webduino 自走車循跡升級套件 ( 需搭配公仔自走車 )</a></span>\n    <span>Webduino 開發板：<a href=\"../buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\".//buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"../buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a></span>\n</div>\n\n<h2 id=\"-\">範例影片展示</h2>\n<iframe class=\"youtube\" src=\"https://www.youtube.com/embed/vnazkVchsp4\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"-\">接線與實作</h2>\n<p>要使用循跡的功能，必須在自走車的機構安裝「循跡控制板」，如果您手邊的 Webduino 自走車為「白色的」萬向輪支架，則必須更換為 3D 列印的支架，如此一來才可以順利組合循跡控制板，若自走車上頭「已經是 3D 列印支架則不用更換」。</p>\n<p><img src=\"../img/tutorials/tutorial-37-02.jpg\" alt=\"\"></p>\n<p>更換的方式很簡單 ( 已是 3D 列印支架可略過組裝教學 )，首先用螺絲起子鬆開支架的小螺絲，取下支架和萬向輪，萬向輪內有四顆小鋼珠和一顆大鋼珠，千萬要注意不要弄丟了 ( 建議可用磁鐵放在旁邊吸附著 )。</p>\n<p><img src=\"../img/tutorials/tutorial-37-03.jpg\" alt=\"\"></p>\n<p>將 3D 列印的支架用原本的螺絲螺帽鎖到車體上，和車體並不會垂直，是正常的現象。</p>\n<p><img src=\"../img/tutorials/tutorial-37-04.jpg\" alt=\"\"></p>\n<p>將萬向輪鎖上，車體的改造就完成了。</p>\n<p><img src=\"../img/tutorials/tutorial-37-05.jpg\" alt=\"\"></p>\n<p>接著移除 Webduino 馬克一號原本的 Arduino Pro mini，換上循跡自走車的 Arduino Pro mini。</p>\n<p><img src=\"../img/tutorials/tutorial-37-06.jpg\" alt=\"\"></p>\n<p>循跡車 Arduino 背面的接線照片如下，如果不小心把線拔除了就按照顏色位置接回去即可。</p>\n<p><img src=\"../img/tutorials/tutorial-37-19.jpg\" alt=\"\"></p>\n<p>注意換完的方向要正確，五條線的接頭朝下，灰色線接頭朝上。</p>\n<p><img src=\"../img/tutorials/tutorial-37-07.jpg\" alt=\"\"></p>\n<p>將馬克一號與自走車組合，五條線街頭插入3D 列印支架的孔洞當中，目的在於要組合循跡控制板。</p>\n<p><img src=\"../img/tutorials/tutorial-37-08.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-37-10.jpg\" alt=\"\"></p>\n<p><img src=\"../img/tutorials/tutorial-37-09.jpg\" alt=\"\"></p>\n<p>灰色的線則向上和馬克一號 A3 的腳位連接。</p>\n<p><img src=\"../img/tutorials/tutorial-37-11.jpg\" alt=\"\"></p>\n<p>將循跡控制板插入五條線的接頭，如果在運行的時候發現偵測狀況不理想，可使用十字螺絲起子，調整循跡偵測的靈敏度。</p>\n<p><img src=\"../img/tutorials/tutorial-37-12.jpg\" alt=\"\"></p>\n<p>最後放入四顆 3 號電池，就完成了 Webduino 循跡自走車的升級改造。</p>\n<p><img src=\"../img/tutorials/tutorial-37-13.jpg\" alt=\"\"></p>\n<div class=\"buy-this\">\n    <span>自走車套件：<a href=\"../buy/webduino-package-toycar.html\" target=\"_blank\">Webduino 公仔自走車 ( 支援馬克 1 號 )</a></span>\n    <span>循跡套件：<a href=\"../buy/webduino-package-line-following.html\" target=\"_blank\">Webduino 自走車循跡升級套件 ( 需搭配公仔自走車 )</a></span>\n    <span>Webduino 開發板：<a href=\"../buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\".//buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"../buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a></span>\n</div>\n\n<h2 id=\"-webduino-\">體驗 Webduino 循跡功能</h2>\n<p>打開 Webduino 循跡自走車操控頁面，在上方填入自走車馬克一號的 Device ID，按下 Connect 連線，連線成功之後，就可以開始使用下方的遙控器循跡與記錄功能。</p>\n<p><strong>循跡自走車操控頁面：</strong><a href=\"https://goo.gl/NrTrLb\">https://goo.gl/NrTrLb</a></p>\n<p><img src=\"../img/tutorials/tutorial-37-14.jpg\" alt=\"\"></p>\n<p>遙控器第一個部分有三個按鈕，第一個按鈕是「循跡與紀錄軌跡」的功能，點選之後就會啟動循跡功能，只要地上有黑色的線 ( 寬度需大於四公分 )，就會跟隨著黑線移動，同時也會開始記錄移動的軌跡；第二個按鈕是「停止」，除了會停止自走車的動作，同時也停止軌跡的紀錄；最後一個按鈕是「播放」，點選之後自走車就會開始運行上一次紀錄的路徑。</p>\n<p><img src=\"../img/tutorials/tutorial-37-15.jpg\" alt=\"\"></p>\n<p>遙控器的第二個部分為「軌跡控制板」，當我們在上面繪製線條圖案，自走車就會跑出我們所繪製的形狀。</p>\n<p><img src=\"../img/tutorials/tutorial-37-16.jpg\" alt=\"\"></p>\n<p>由於每輛自走車的馬達轉速不見得相同 ( 相同型號的馬達轉速也都會有誤差 )，電池的電量也都會有差異，所以在遙控器最後一個部分提供了「設定」功能，拉霸 Around 在修正左右偏移量，如果自走車在跑的時候一直向左偏，就往右調整一些，拉霸 speed 表示速度，速度 100% 表示全速行進，拉霸 Raidal 是微調校正速度，假設在 100% 的速度下 150ms 會跑 50px，但實際上卻只跑了 40px，就必須透過 Radial 修正，拉霸 Degree 則是微調修正轉的角度，原理和 Raidal 相同。</p>\n<p><img src=\"../img/tutorials/tutorial-37-17.jpg\" alt=\"\"></p>\n<h2 id=\"webduino-blockly-\">Webduino Blockly 操作</h2>\n<p>如果不想要用遙控器操作，亦可使用 Webduino Blockly 編輯工具 ( <a href=\"https://blockly.webduino.io\">https://blockly.webduino.io</a> ) 實現循跡功能，打開下方的範例網頁，會帶出對應的循跡自走車程式，填入 Device ID，點選右上方的執行按鈕，就會看到自走車沿著黑色路線行進了。</p>\n<p><strong>範例程式：</strong><a href=\"https://goo.gl/8XYAam\">https://goo.gl/8XYAam</a></p>\n<p><img src=\"../img/tutorials/tutorial-37-18.jpg\" alt=\"\"></p>\n<p>以上就是 2017 Webduino 循跡自走車的組裝與基本操控。   </p>\n<div class=\"buy-this\">\n    <span>自走車套件：<a href=\"../buy/webduino-package-toycar.html\" target=\"_blank\">Webduino 公仔自走車 ( 支援馬克 1 號 )</a></span>\n    <span>循跡套件：<a href=\"../buy/webduino-package-line-following.html\" target=\"_blank\">Webduino 自走車循跡升級套件 ( 需搭配公仔自走車 )</a></span>\n    <span>Webduino 開發板：<a href=\"../buy/component-webduino-v1.html\" target=\"_blank\">Webduino 馬克一號</a>、<a href=\".//buy/component-webduino-fly.html\" target=\"_blank\">Webduino Fly</a>、<a href=\"../buy/component-webduino-smart.html\" target=\"_blank\">Webduino Smart</a></span>\n</div>\n\n\n<!-- @@close-->"}}